// internal/imports/csv_importer.go
package imports

import (
	"database/sql"
	"encoding/csv"
	"fmt"
	"io"
	"log"
	"strconv"
	"strings"
	"time"

	"github.com/drerr0r/vetbot/internal/database"
	"github.com/drerr0r/vetbot/internal/models"
	"github.com/xuri/excelize/v2"
)

type CSVImporter struct {
	db *database.Database
}

func NewCSVImporter(db *database.Database) *CSVImporter {
	return &CSVImporter{db: db}
}

// ImportVeterinarians –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Ä–∞—á–µ–π –∏–∑ CSV/Excel —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≥–æ—Ä–æ–¥–æ–≤, –∫–ª–∏–Ω–∏–∫ –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
func (i *CSVImporter) ImportVeterinarians(file io.Reader, filename string, InfoLog, ErrorLog *log.Logger) (*models.ImportResult, error) {
	InfoLog.Printf("üöÄ –ù–∞—á–∞–ª–æ –∏–º–ø–æ—Ä—Ç–∞ —Ñ–∞–π–ª–∞: %s", filename)

	records, err := i.readFile(file, filename)
	if err != nil {
		ErrorLog.Printf("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: %v", err)
		return nil, err
	}

	InfoLog.Printf("üìä –ü—Ä–æ—á–∏—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: %d", len(records))

	if len(records) > 0 {
		InfoLog.Printf("üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏: %v", records[0])
	} else {
		ErrorLog.Printf("‚ùå –§–∞–π–ª %s –ø—É—Å—Ç–æ–π", filename)
		return nil, fmt.Errorf("—Ñ–∞–π–ª –ø—É—Å—Ç–æ–π")
	}

	result := &models.ImportResult{
		TotalRows: len(records) - 1, // –º–∏–Ω—É—Å –∑–∞–≥–æ–ª–æ–≤–æ–∫
		Errors:    []models.ImportError{},
	}

	// –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
	InfoLog.Printf("üîç –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤...")
	cities, err := i.db.GetAllCities()
	if err != nil {
		ErrorLog.Printf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–æ—Ä–æ–¥–æ–≤: %v", err)
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–æ—Ä–æ–¥–æ–≤: %w", err)
	}

	specializations, err := i.db.GetAllSpecializations()
	if err != nil {
		ErrorLog.Printf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π: %v", err)
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π: %w", err)
	}

	clinics, err := i.db.GetAllClinics()
	if err != nil {
		ErrorLog.Printf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª–∏–Ω–∏–∫: %v", err)
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª–∏–Ω–∏–∫: %w", err)
	}

	cityMap := make(map[string]int)
	for _, city := range cities {
		cityMap[strings.ToLower(city.Name)] = city.ID
	}

	specMap := make(map[string]int)
	for _, spec := range specializations {
		specMap[strings.ToLower(spec.Name)] = spec.ID
	}

	clinicMap := make(map[string]int)
	for _, clinic := range clinics {
		clinicMap[strings.ToLower(clinic.Name)] = clinic.ID
	}

	InfoLog.Printf("‚úÖ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: %d –≥–æ—Ä–æ–¥–æ–≤, %d —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π, %d –∫–ª–∏–Ω–∏–∫", len(cities), len(specializations), len(clinics))

	InfoLog.Printf("üîç –û—Ç–ª–∞–¥–∫–∞ - –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∫–ª–∏–Ω–∏–∫–∏:")
	for _, clinic := range clinics {
		district := "–Ω–µ —É–∫–∞–∑–∞–Ω"
		if clinic.District.Valid {
			district = clinic.District.String
		}

		metro := "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
		if clinic.MetroStation.Valid {
			metro = clinic.MetroStation.String
		}

		InfoLog.Printf("   –ö–ª–∏–Ω–∏–∫–∞: %s (ID: %d, CityID: %v, District: %s, Metro: %s)",
			clinic.Name, clinic.ID, clinic.CityID, district, metro)
	}

	InfoLog.Printf("üîç –û—Ç–ª–∞–¥–∫–∞ - –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞:")
	for _, city := range cities {
		InfoLog.Printf("   –ì–æ—Ä–æ–¥: %s (ID: %d, Region: %s)", city.Name, city.ID, city.Region)
	}

	for idx, record := range records {
		if idx == 0 {
			InfoLog.Printf("üî§ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫: %v", record)
			continue // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
		}

		if len(record) < 7 {
			result.ErrorCount++
			result.Errors = append(result.Errors, models.ImportError{
				RowNumber: idx + 1,
				Field:     "all",
				Message:   fmt.Sprintf("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–ª–æ–Ω–æ–∫ (—Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 7, –ø–æ–ª—É—á–µ–Ω–æ %d)", len(record)),
			})
			ErrorLog.Printf("‚ùå –°—Ç—Ä–æ–∫–∞ %d: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–ª–æ–Ω–æ–∫ (%d –≤–º–µ—Å—Ç–æ 7)", idx+1, len(record))
			continue
		}

		InfoLog.Printf("üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É %d: %v", idx+1, record)

		// –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –≤—Ä–∞—á–∞
		vet := &models.Veterinarian{
			FirstName: strings.TrimSpace(record[0]),
			LastName:  strings.TrimSpace(record[1]),
			Phone:     strings.TrimSpace(record[2]),
			Email:     i.parseNullString(record[3]),
			IsActive:  true,
		}

		// –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã
		if record[4] != "" {
			if exp, err := strconv.ParseInt(strings.TrimSpace(record[4]), 10, 64); err == nil {
				vet.ExperienceYears = sql.NullInt64{Int64: exp, Valid: true}
				InfoLog.Printf("üíº –°—Ç—Ä–æ–∫–∞ %d: –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã %d –ª–µ—Ç", idx+1, exp)
			} else {
				ErrorLog.Printf("‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ %d: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ–ø—ã—Ç–∞ —Ä–∞–±–æ—Ç—ã '%s'", idx+1, record[4])
			}
		}

		// –û–ø–∏—Å–∞–Ω–∏–µ
		if len(record) > 5 {
			vet.Description = i.parseNullString(record[5])
			if vet.Description.Valid {
				InfoLog.Printf("üìÑ –°—Ç—Ä–æ–∫–∞ %d: –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ", idx+1)
			}
		}

		// –ì–æ—Ä–æ–¥
		if len(record) > 6 && record[6] != "" {
			cityName := strings.TrimSpace(record[6])
			if id, exists := cityMap[strings.ToLower(cityName)]; exists {
				vet.CityID = sql.NullInt64{Int64: int64(id), Valid: true}
				InfoLog.Printf("üèôÔ∏è –°—Ç—Ä–æ–∫–∞ %d: –≥–æ—Ä–æ–¥ '%s' –Ω–∞–π–¥–µ–Ω (ID: %d)", idx+1, cityName, id)
			} else {
				result.ErrorCount++
				result.Errors = append(result.Errors, models.ImportError{
					RowNumber: idx + 1,
					Field:     "city",
					Message:   fmt.Sprintf("–ì–æ—Ä–æ–¥ '%s' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ", cityName),
				})
				ErrorLog.Printf("‚ùå –°—Ç—Ä–æ–∫–∞ %d: –≥–æ—Ä–æ–¥ '%s' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ", idx+1, cityName)
				continue
			}
		} else {
			ErrorLog.Printf("‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ %d: –≥–æ—Ä–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω", idx+1)
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–∞—á–∞ –≤ –±–∞–∑—É —Å–æ –≤—Å–µ–º–∏ —Å–≤—è–∑—è–º–∏
		err := i.addVeterinarianWithRelations(vet, record, specMap, clinicMap, idx+1, InfoLog, ErrorLog)
		if err != nil {
			result.ErrorCount++
			result.Errors = append(result.Errors, models.ImportError{
				RowNumber: idx + 1,
				Field:     "database",
				Message:   fmt.Sprintf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: %v", err),
			})
			ErrorLog.Printf("‚ùå –°—Ç—Ä–æ–∫–∞ %d: –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–∞—á–∞: %v", idx+1, err)
		} else {
			result.SuccessCount++
			InfoLog.Printf("‚úÖ –°—Ç—Ä–æ–∫–∞ %d: –≤—Ä–∞—á %s %s —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω (ID: %d)", idx+1, vet.FirstName, vet.LastName, vet.ID)
		}
	}

	InfoLog.Printf("üéØ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –£—Å–ø–µ—à–Ω–æ: %d, –û—à–∏–±–æ–∫: %d, –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: %d",
		result.SuccessCount, result.ErrorCount, result.TotalRows)
	return result, nil
}

// addVeterinarianWithRelations –¥–æ–±–∞–≤–ª—è–µ—Ç –≤—Ä–∞—á–∞ —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–º–∏, –∫–ª–∏–Ω–∏–∫–∞–º–∏ –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
func (i *CSVImporter) addVeterinarianWithRelations(vet *models.Veterinarian, record []string, specMap, clinicMap map[string]int, rowNum int, InfoLog, ErrorLog *log.Logger) error {
	tx, err := i.db.GetDB().Begin()
	if err != nil {
		ErrorLog.Printf("‚ùå –°—Ç—Ä–æ–∫–∞ %d: –æ—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: %v", rowNum, err)
		return err
	}
	defer tx.Rollback()

	// –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–∞—á–∞
	query := `INSERT INTO veterinarians (first_name, last_name, phone, email, experience_years, description, city_id, is_active) 
              VALUES ($1, $2, $3, $4, $5, $6, $7, $8) RETURNING id`

	err = tx.QueryRow(query, vet.FirstName, vet.LastName, vet.Phone, vet.Email,
		vet.ExperienceYears, vet.Description, vet.CityID, vet.IsActive).Scan(&vet.ID)
	if err != nil {
		ErrorLog.Printf("‚ùå –°—Ç—Ä–æ–∫–∞ %d: –æ—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Ä–∞—á–∞ –≤ –ë–î: %v", rowNum, err)
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Ä–∞—á–∞: %w", err)
	}

	InfoLog.Printf("üë®‚Äç‚öïÔ∏è –°—Ç—Ä–æ–∫–∞ %d: –≤—Ä–∞—á –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î —Å ID: %d", rowNum, vet.ID)

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (–∫–æ–ª–æ–Ω–∫–∞ 7)
	if len(record) > 7 && record[7] != "" {
		specNames := strings.Split(record[7], ",")
		specCount := 0
		for _, specName := range specNames {
			specName = strings.TrimSpace(specName)
			if specName == "" {
				continue
			}

			specID, exists := specMap[strings.ToLower(specName)]
			if !exists {
				ErrorLog.Printf("‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ %d: —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è '%s' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", rowNum, specName)
				continue
			}

			_, err = tx.Exec(
				"INSERT INTO vet_specializations (vet_id, specialization_id) VALUES ($1, $2)",
				vet.ID, specID,
			)
			if err != nil {
				ErrorLog.Printf("‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ %d: –æ—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ '%s': %v", rowNum, specName, err)
			} else {
				specCount++
				InfoLog.Printf("üéØ –°—Ç—Ä–æ–∫–∞ %d: –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è '%s'", rowNum, specName)
			}
		}
		InfoLog.Printf("‚úÖ –°—Ç—Ä–æ–∫–∞ %d: –¥–æ–±–∞–≤–ª–µ–Ω–æ %d —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π", rowNum, specCount)
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–ª–∏–Ω–∏–∫–∏ –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (–∫–æ–ª–æ–Ω–∫–∞ 8) - –° –û–ë–†–ê–ë–û–¢–ö–û–ô –û–®–ò–ë–û–ö
	if len(record) > 8 && record[8] != "" {
		clinicSchedules := strings.Split(record[8], ";")
		scheduleCount := 0
		scheduleErrors := 0

		for _, clinicSchedule := range clinicSchedules {
			parts := strings.Split(clinicSchedule, ":")
			if len(parts) < 2 {
				ErrorLog.Printf("‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ %d: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è '%s'", rowNum, clinicSchedule)
				scheduleErrors++
				continue
			}

			clinicName := strings.TrimSpace(parts[0])
			scheduleStr := strings.TrimSpace(parts[1])

			clinicID, exists := clinicMap[strings.ToLower(clinicName)]
			if !exists {
				ErrorLog.Printf("‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ %d: –∫–ª–∏–Ω–∏–∫–∞ '%s' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", rowNum, clinicName)
				scheduleErrors++
				continue
			}

			InfoLog.Printf("üè• –°—Ç—Ä–æ–∫–∞ %d: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–Ω–∏–∫–∏ '%s' (ID: %d)", rowNum, clinicName, clinicID)

			// –ü–∞—Ä—Å–∏–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
			schedules := i.parseSchedule(scheduleStr, vet.ID, clinicID)
			for _, schedule := range schedules {
				_, err = tx.Exec(
					`INSERT INTO schedules (vet_id, clinic_id, day_of_week, start_time, end_time, is_available) 
                     VALUES ($1, $2, $3, $4, $5, $6)`,
					schedule.VetID, schedule.ClinicID, schedule.DayOfWeek, schedule.StartTime, schedule.EndTime, schedule.IsAvailable,
				)
				if err != nil {
					ErrorLog.Printf("‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ %d: –æ—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: %v", rowNum, err)
					scheduleErrors++
				} else {
					scheduleCount++
				}
			}
		}
		InfoLog.Printf("üìÖ –°—Ç—Ä–æ–∫–∞ %d: –¥–æ–±–∞–≤–ª–µ–Ω–æ %d –∑–∞–ø–∏—Å–µ–π —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è, –æ—à–∏–±–æ–∫: %d", rowNum, scheduleCount, scheduleErrors)

		// –ù–ï –ü–†–ï–†–´–í–ê–ï–ú –ò–ú–ü–û–†–¢ –ò–ó-–ó–ê –û–®–ò–ë–û–ö –†–ê–°–ü–ò–°–ê–ù–ò–Ø
		if scheduleErrors > 0 {
			InfoLog.Printf("‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ %d: –µ—Å—Ç—å –æ—à–∏–±–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è, –Ω–æ –≤—Ä–∞—á –¥–æ–±–∞–≤–ª–µ–Ω", rowNum)
		}
	}

	err = tx.Commit()
	if err != nil {
		ErrorLog.Printf("‚ùå –°—Ç—Ä–æ–∫–∞ %d: –æ—à–∏–±–∫–∞ –∫–æ–º–º–∏—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: %v", rowNum, err)
		return err
	}

	InfoLog.Printf("üíæ –°—Ç—Ä–æ–∫–∞ %d: —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", rowNum)
	return nil
}

// parseSchedule –ø–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ "–ü–Ω:9-18,–°—Ä:9-18,–ü—Ç:14-20"
func (i *CSVImporter) parseSchedule(scheduleStr string, vetID, clinicID int) []models.Schedule {
	var schedules []models.Schedule

	dayMap := map[string]int{
		"–ø–Ω": 1, "–ø–æ–Ω": 1, "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": 1,
		"–≤—Ç": 2, "–≤—Ç–æ": 2, "–≤—Ç–æ—Ä–Ω–∏–∫": 2,
		"—Å—Ä": 3, "—Å—Ä–µ": 3, "—Å—Ä–µ–¥–∞": 3,
		"—á—Ç": 4, "—á–µ—Ç": 4, "—á–µ—Ç–≤–µ—Ä–≥": 4,
		"–ø—Ç": 5, "–ø—è—Ç": 5, "–ø—è—Ç–Ω–∏—Ü–∞": 5,
		"—Å–±": 6, "—Å—É–±": 6, "—Å—É–±–±–æ—Ç–∞": 6,
		"–≤—Å": 7, "–≤–æ—Å": 7, "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ": 7,
	}

	days := strings.Split(scheduleStr, ",")
	for _, day := range days {
		parts := strings.Split(day, ":")
		if len(parts) != 2 {
			continue
		}

		dayName := strings.ToLower(strings.TrimSpace(parts[0]))
		timeRange := strings.TrimSpace(parts[1])

		dayOfWeek, exists := dayMap[dayName]
		if !exists {
			continue
		}

		timeParts := strings.Split(timeRange, "-")
		if len(timeParts) != 2 {
			continue
		}

		startTime, endTime := strings.TrimSpace(timeParts[0]), strings.TrimSpace(timeParts[1])

		// –î–æ–±–∞–≤–ª—è–µ–º :00 –µ—Å–ª–∏ –≤—Ä–µ–º—è —É–∫–∞–∑–∞–Ω–æ –±–µ–∑ –º–∏–Ω—É—Ç
		if !strings.Contains(startTime, ":") {
			startTime += ":00"
		}
		if !strings.Contains(endTime, ":") {
			endTime += ":00"
		}

		schedule := models.Schedule{
			VetID:       vetID,
			ClinicID:    clinicID,
			DayOfWeek:   dayOfWeek,
			StartTime:   startTime,
			EndTime:     endTime,
			IsAvailable: true,
			CreatedAt:   time.Now(),
		}
		schedules = append(schedules, schedule)
	}

	return schedules
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã (–æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
func (i *CSVImporter) readFile(file io.Reader, filename string) ([][]string, error) {
	if strings.HasSuffix(strings.ToLower(filename), ".xlsx") {
		return i.readExcel(file)
	}
	return i.readCSV(file)
}

func (i *CSVImporter) readCSV(file io.Reader) ([][]string, error) {
	reader := csv.NewReader(file)
	reader.Comma = ';'
	reader.LazyQuotes = true
	return reader.ReadAll()
}

func (i *CSVImporter) readExcel(file io.Reader) ([][]string, error) {
	f, err := excelize.OpenReader(file)
	if err != nil {
		return nil, err
	}
	defer f.Close()

	sheets := f.GetSheetList()
	if len(sheets) == 0 {
		return nil, fmt.Errorf("–Ω–µ—Ç –ª–∏—Å—Ç–æ–≤ –≤ —Ñ–∞–π–ª–µ")
	}

	rows, err := f.GetRows(sheets[0])
	if err != nil {
		return nil, err
	}

	return rows, nil
}

func (i *CSVImporter) parseNullString(s string) sql.NullString {
	s = strings.TrimSpace(s)
	if s == "" || s == "NULL" || s == "null" {
		return sql.NullString{Valid: false}
	}
	return sql.NullString{String: s, Valid: true}
}
