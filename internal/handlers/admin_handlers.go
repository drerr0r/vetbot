package handlers

import (
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
	"path/filepath"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/drerr0r/vetbot/internal/database"
	"github.com/drerr0r/vetbot/internal/imports"
	"github.com/drerr0r/vetbot/internal/models"
	"github.com/drerr0r/vetbot/pkg/utils"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

var (
	InfoLog  = log.New(os.Stdout, "INFO: ", log.Ldate|log.Ltime|log.Lshortfile)
	ErrorLog = log.New(os.Stdout, "ERROR: ", log.Ldate|log.Ltime|log.Lshortfile)
)

// AdminHandlers —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
type AdminHandlers struct {
	bot          BotAPI
	db           Database
	config       *utils.Config
	stateManager *StateManager
	adminState   map[int64]string
	tempData     map[string]interface{}
}

// NewAdminHandlers —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä AdminHandlers
func NewAdminHandlers(bot BotAPI, db Database, config *utils.Config, stateManager *StateManager) *AdminHandlers {
	return &AdminHandlers{
		bot:          bot,
		db:           db,
		config:       config,
		stateManager: stateManager,
		adminState:   make(map[int64]string),
		tempData:     make(map[string]interface{}),
	}
}

// HandleAdmin –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω—Å–∫—É—é –ø–∞–Ω–µ–ª—å
func (h *AdminHandlers) HandleAdmin(update tgbotapi.Update) {
	userID := update.Message.From.ID
	h.adminState[userID] = "main_menu"

	keyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–∞—á–∞–º–∏"),
			tgbotapi.NewKeyboardButton("üè• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–Ω–∏–∫–∞–º–∏"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üèôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞–º–∏"),
			tgbotapi.NewKeyboardButton("üì• –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
			tgbotapi.NewKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚ùå –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏"),
		),
	)
	keyboard.OneTimeKeyboard = true

	msg := tgbotapi.NewMessage(update.Message.Chat.ID,
		"üîß *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = keyboard

	h.bot.Send(msg)
}

func (h *AdminHandlers) HandleAdminMessage(update tgbotapi.Update) {
	userID := update.Message.From.ID
	text := update.Message.Text
	state := h.adminState[userID]

	InfoLog.Printf("Admin message from %d: %s (state: %s)", userID, text, state)

	// –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
	if text == "üîô –ù–∞–∑–∞–¥" {
		h.handleBackButton(update)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∞" –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
	if text == "‚ùå –û—Ç–º–µ–Ω–∞" {
		h.handleCancelProcess(update, state)
		return
	}

	switch state {
	case "main_menu":
		h.handleMainMenu(update, text)
	case "vet_management":
		h.handleVetManagement(update, text)
	case "vet_search_city":
		h.handleVetSearchCity(update, text)
	case "clinic_management":
		h.handleClinicManagement(update, text)
	case "city_management":
		h.handleCityManagement(update, text)
	case "import_menu":
		h.handleImportMenu(update, text)
	case "add_vet_name":
		h.handleAddVetName(update, text)
	case "add_vet_phone":
		h.handleAddVetPhone(update, text)
	case "add_vet_specializations":
		h.handleAddVetSpecializations(update, text)
	case "vet_list":
		h.handleVetListSelection(update, text)
	case "vet_edit_menu":
		h.handleVetEditMenu(update, text)
	case "vet_edit_field":
		h.handleVetEditField(update, text)
	case "vet_edit_specializations":
		h.handleVetEditSpecializations(update, text)
	case "vet_edit_city":
		h.handleVetEditCity(update, text)
	case "vet_confirm_delete":
		h.handleVetConfirmDelete(update, text)
	case "vet_toggle_active":
		h.handleVetToggleActive(update, text)
	case "clinic_list":
		h.handleClinicListSelection(update, text)
	case "clinic_edit_menu":
		h.handleClinicEditMenu(update, text)
	case "clinic_edit_field":
		h.handleClinicEditField(update, text)
	case "clinic_confirm_delete":
		h.handleClinicConfirmDelete(update, text)
	case "clinic_toggle_active":
		h.handleClinicToggleActive(update, text)
	case "add_city_name":
		h.handleAddCityName(update, text)
	case "add_city_region":
		h.handleAddCityRegion(update, text)
	case "city_list":
		h.handleCityListSelection(update, text)
	case "city_edit_menu":
		h.handleCityEditMenu(update, text)
	case "city_edit_name":
		h.handleCityEditName(update, text)
	case "city_edit_region":
		h.handleCityEditRegion(update, text)
	case "city_confirm_delete":
		h.handleCityConfirmDelete(update, text)
	case "city_search_region":
		h.handleCitySearchRegion(update, text)
	default:
		h.handleMainMenu(update, text)
	}
}

// handleCancelProcess –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
func (h *AdminHandlers) handleCancelProcess(update tgbotapi.Update, state string) {
	userID := update.Message.From.ID

	// –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
	h.cleanTempData(userID)

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—É–¥–∞ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
	switch {
	case strings.HasPrefix(state, "add_vet"), strings.HasPrefix(state, "vet_edit"):
		h.adminState[userID] = "vet_management"
		h.showVetManagement(update)
	case strings.HasPrefix(state, "add_city"), strings.HasPrefix(state, "city_edit"):
		h.adminState[userID] = "city_management"
		h.showCityManagement(update)
	case strings.HasPrefix(state, "add_clinic"), strings.HasPrefix(state, "clinic_edit"):
		h.adminState[userID] = "clinic_management"
		h.showClinicManagement(update)
	default:
		h.adminState[userID] = "main_menu"
		h.HandleAdmin(update)
	}

	msg := tgbotapi.NewMessage(update.Message.Chat.ID, "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
	h.bot.Send(msg)
}

// handleBackButton –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
func (h *AdminHandlers) handleBackButton(update tgbotapi.Update) {
	userID := update.Message.From.ID
	currentState := h.adminState[userID]

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ
	switch currentState {
	case "vet_management", "clinic_management", "city_management", "import_menu":
		h.adminState[userID] = "main_menu"
		h.HandleAdmin(update)
	case "vet_list", "vet_edit_menu", "vet_edit_field", "vet_edit_specializations",
		"vet_edit_city", "vet_confirm_delete", "vet_toggle_active":
		h.adminState[userID] = "vet_management"
		h.showVetManagement(update)
	case "clinic_list", "clinic_edit_menu", "clinic_edit_field", "clinic_confirm_delete", "clinic_toggle_active":
		h.adminState[userID] = "clinic_management"
		h.showClinicManagement(update)
	case "city_list", "city_edit_menu", "city_edit_name", "city_edit_region",
		"city_search_region", "city_confirm_delete":
		h.adminState[userID] = "city_management"
		h.showCityManagement(update)
	case "vet_search_city":
		h.adminState[userID] = "vet_management"
		h.showVetManagement(update)
	case "add_vet_name", "add_vet_phone", "add_vet_specializations":
		h.adminState[userID] = "vet_management"
		h.cleanTempData(userID)
		h.showVetManagement(update)
	case "add_city_name", "add_city_region":
		h.adminState[userID] = "city_management"
		h.cleanTempData(userID)
		h.showCityManagement(update)
	default:
		h.adminState[userID] = "main_menu"
		h.HandleAdmin(update)
	}
}

// cleanTempData –æ—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (h *AdminHandlers) cleanTempData(userID int64) {
	userIDStr := strconv.FormatInt(userID, 10)
	delete(h.tempData, userIDStr+"_name")
	delete(h.tempData, userIDStr+"_phone")
	delete(h.tempData, userIDStr+"_vet_edit")
	delete(h.tempData, userIDStr+"_clinic_edit")
	delete(h.tempData, userIDStr+"_city_edit")
	delete(h.tempData, userIDStr+"_new_city")
	delete(h.tempData, userIDStr+"_cities")
}

// handleMainMenu –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏
func (h *AdminHandlers) handleMainMenu(update tgbotapi.Update, text string) {
	switch text {
	case "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–∞—á–∞–º–∏":
		h.showVetManagement(update)
	case "üè• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–Ω–∏–∫–∞–º–∏":
		h.showClinicManagement(update)
	case "üèôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞–º–∏":
		h.showCityManagement(update)
	case "üì• –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö":
		h.showImportMenu(update)
	case "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
		h.HandleStats(update)
	case "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
		h.showSettings(update)
	case "‚ùå –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏":
		h.closeAdmin(update)
	default:
		msg := tgbotapi.NewMessage(update.Message.Chat.ID,
			"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏")
		h.bot.Send(msg)
	}
}

// showImportMenu –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
func (h *AdminHandlers) showImportMenu(update tgbotapi.Update) {
	userID := update.Message.From.ID
	h.adminState[userID] = "import_menu"

	keyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üèôÔ∏è –ò–º–ø–æ—Ä—Ç –≥–æ—Ä–æ–¥–æ–≤"),
			tgbotapi.NewKeyboardButton("üë• –ò–º–ø–æ—Ä—Ç –≤—Ä–∞—á–µ–π"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üè• –ò–º–ø–æ—Ä—Ç –∫–ª–∏–Ω–∏–∫"),
			tgbotapi.NewKeyboardButton("üîô –ù–∞–∑–∞–¥"),
		),
	)

	msg := tgbotapi.NewMessage(update.Message.Chat.ID,
		"üì• *–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è CSV –∏ Excel —Ñ–∞–π–ª—ã.\n\n"+
			"*–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–æ–≤:*\n"+
			"‚Ä¢ CSV: —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å - —Ç–æ—á–∫–∞ —Å –∑–∞–ø—è—Ç–æ–π\n"+
			"‚Ä¢ Excel: –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏")
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = keyboard

	h.bot.Send(msg)
}

// handleImportMenu –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–µ–Ω—é –∏–º–ø–æ—Ä—Ç–∞
func (h *AdminHandlers) handleImportMenu(update tgbotapi.Update, text string) {
	switch text {
	case "üèôÔ∏è –ò–º–ø–æ—Ä—Ç –≥–æ—Ä–æ–¥–æ–≤":
		h.handleImportCities(update)
	case "üë• –ò–º–ø–æ—Ä—Ç –≤—Ä–∞—á–µ–π":
		h.handleImportVeterinarians(update)
	case "üè• –ò–º–ø–æ—Ä—Ç –∫–ª–∏–Ω–∏–∫":
		h.handleImportClinics(update)
	case "üîô –ù–∞–∑–∞–¥":
		h.handleBackButton(update)
	default:
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–º–ø–æ—Ä—Ç–∞")
		h.bot.Send(msg)
	}
}

// handleImportCities –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–º–ø–æ—Ä—Ç –≥–æ—Ä–æ–¥–æ–≤
func (h *AdminHandlers) handleImportCities(update tgbotapi.Update) {
	msg := tgbotapi.NewMessage(update.Message.Chat.ID,
		"üì§ –î–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≥–æ—Ä–æ–¥–æ–≤ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ CSV –∏–ª–∏ Excel —Ñ–∞–π–ª —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏:\n\n"+
			"1. *–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞* (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n"+
			"2. *–†–µ–≥–∏–æ–Ω* (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n\n"+
			"*–ü—Ä–∏–º–µ—Ä CSV:*\n"+
			"–ú–æ—Å–∫–≤–∞;–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥\n"+
			"–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥;–°–µ–≤–µ—Ä–æ-–ó–∞–ø–∞–¥–Ω—ã–π —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥")
	msg.ParseMode = "Markdown"
	h.bot.Send(msg)
}

// handleImportVeterinarians –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–º–ø–æ—Ä—Ç –≤—Ä–∞—á–µ–π
func (h *AdminHandlers) handleImportVeterinarians(update tgbotapi.Update) {
	msg := tgbotapi.NewMessage(update.Message.Chat.ID,
		"üì§ –î–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤—Ä–∞—á–µ–π –æ—Ç–ø—Ä–∞–≤—å—Ç–µ CSV –∏–ª–∏ Excel —Ñ–∞–π–ª —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏:\n\n"+
			"1. *–ò–º—è* (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n"+
			"2. *–§–∞–º–∏–ª–∏—è* (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n"+
			"3. *–¢–µ–ª–µ—Ñ–æ–Ω* (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n"+
			"4. *Email* (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)\n"+
			"5. *–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã* (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, —á–∏—Å–ª–æ)\n"+
			"6. *–û–ø–∏—Å–∞–Ω–∏–µ* (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)\n"+
			"7. *–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏* (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)\n\n"+
			"*–ü—Ä–∏–º–µ—Ä CSV:*\n"+
			"–ò–≤–∞–Ω;–ü–µ—Ç—Ä–æ–≤;+79161234567;ivan@vet.ru;10;–û–ø—ã—Ç–Ω—ã–π —Ö–∏—Ä—É—Ä–≥;–•–∏—Ä—É—Ä–≥,–¢–µ—Ä–∞–ø–µ–≤—Ç")
	msg.ParseMode = "Markdown"
	h.bot.Send(msg)
}

// handleImportClinics –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–º–ø–æ—Ä—Ç –∫–ª–∏–Ω–∏–∫
func (h *AdminHandlers) handleImportClinics(update tgbotapi.Update) {
	msg := tgbotapi.NewMessage(update.Message.Chat.ID,
		"üì§ –î–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∫–ª–∏–Ω–∏–∫ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ CSV –∏–ª–∏ Excel —Ñ–∞–π–ª —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏:\n\n"+
			"1. *–ù–∞–∑–≤–∞–Ω–∏–µ* (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n"+
			"2. *–ì–æ—Ä–æ–¥* (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n"+
			"3. *–ê–¥—Ä–µ—Å* (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n"+
			"4. *–¢–µ–ª–µ—Ñ–æ–Ω* (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)\n"+
			"5. *–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã* (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)\n"+
			"6. *–†–∞–π–æ–Ω* (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)\n"+
			"7. *–°—Ç–∞–Ω—Ü–∏—è –º–µ—Ç—Ä–æ* (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)\n\n"+
			"*–ü—Ä–∏–º–µ—Ä CSV:*\n"+
			"–í–µ—Ç–ö–ª–∏–Ω–∏–∫–∞ –¶–µ–Ω—Ç—Ä;–ú–æ—Å–∫–≤–∞;—É–ª. –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è, –¥.1;+74950000001;–ü–Ω-–ü—Ç 9-21;–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π;–û—Ö–æ—Ç–Ω—ã–π —Ä—è–¥")
	msg.ParseMode = "Markdown"
	h.bot.Send(msg)
}

// handleVetManagement –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Ä–∞—á–∞–º–∏
func (h *AdminHandlers) handleVetManagement(update tgbotapi.Update, text string) {
	switch text {
	case "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤—Ä–∞—á–∞":
		h.startAddVet(update)
	case "üåç –ü–æ–∏—Å–∫ –ø–æ –≥–æ—Ä–æ–¥—É":
		h.handleVetSearchByCity(update)
	case "üìã –°–ø–∏—Å–æ–∫ –≤—Ä–∞—á–µ–π":
		h.showVetList(update)
	case "üîô –ù–∞–∑–∞–¥":
		h.handleBackButton(update)
	default:
		msg := tgbotapi.NewMessage(update.Message.Chat.ID,
			"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Ä–∞—á–∞–º–∏")
		h.bot.Send(msg)
	}
}

// handleVetSearchByCity –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∏—Å–∫ –≤—Ä–∞—á–µ–π –ø–æ –≥–æ—Ä–æ–¥—É
func (h *AdminHandlers) handleVetSearchByCity(update tgbotapi.Update) {
	userID := update.Message.From.ID
	h.adminState[userID] = "vet_search_city"

	cities, err := h.db.GetAllCities()
	if err != nil {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤")
		h.bot.Send(msg)
		return
	}

	if len(cities) == 0 {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ì–æ—Ä–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –≥–æ—Ä–æ–¥–∞.")
		h.bot.Send(msg)
		return
	}

	var sb strings.Builder
	sb.WriteString("üèôÔ∏è *–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Ä–∞—á–µ–π:*\n\n")

	for i, city := range cities {
		sb.WriteString(fmt.Sprintf("%d. %s (%s)\n", i+1, city.Name, city.Region))
	}

	sb.WriteString("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥–æ—Ä–æ–¥–∞:")

	keyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üîô –ù–∞–∑–∞–¥"),
		),
	)

	msg := tgbotapi.NewMessage(update.Message.Chat.ID, sb.String())
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = keyboard

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
	userIDStr := strconv.FormatInt(userID, 10)
	h.tempData[userIDStr+"_cities"] = cities

	h.bot.Send(msg)
}

// handleClinicManagement –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–Ω–∏–∫–∞–º–∏
func (h *AdminHandlers) handleClinicManagement(update tgbotapi.Update, text string) {
	switch text {
	case "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–Ω–∏–∫—É":
		h.startAddClinic(update)
	case "üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–Ω–∏–∫":
		h.showClinicList(update)
	case "üîô –ù–∞–∑–∞–¥":
		h.handleBackButton(update)
	default:
		msg := tgbotapi.NewMessage(update.Message.Chat.ID,
			"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–Ω–∏–∫–∞–º–∏")
		h.bot.Send(msg)
	}
}

// showVetManagement –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Ä–∞—á–∞–º–∏
func (h *AdminHandlers) showVetManagement(update tgbotapi.Update) {
	userID := update.Message.From.ID
	h.adminState[userID] = "vet_management"

	// –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Ä–∞—á–µ–π
	activeVets, _ := h.getActiveVetCount()
	totalVets, _ := h.getTotalVetCount()

	keyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤—Ä–∞—á–∞"),
			tgbotapi.NewKeyboardButton("üåç –ü–æ–∏—Å–∫ –ø–æ –≥–æ—Ä–æ–¥—É"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –≤—Ä–∞—á–µ–π"),
			tgbotapi.NewKeyboardButton("üîô –ù–∞–∑–∞–¥"),
		),
	)

	msg := tgbotapi.NewMessage(update.Message.Chat.ID,
		fmt.Sprintf("üë• *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–∞—á–∞–º–∏*\n\n–ê–∫—Ç–∏–≤–Ω—ã—Ö –≤—Ä–∞—á–µ–π: %d/%d\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", activeVets, totalVets))
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = keyboard

	h.bot.Send(msg)
}

// showClinicManagement –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–Ω–∏–∫–∞–º–∏
func (h *AdminHandlers) showClinicManagement(update tgbotapi.Update) {
	userID := update.Message.From.ID
	h.adminState[userID] = "clinic_management"

	// –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–ª–∏–Ω–∏–∫
	activeClinics, _ := h.getActiveClinicCount()
	totalClinics, _ := h.getTotalClinicCount()

	keyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–Ω–∏–∫—É"),
			tgbotapi.NewKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–Ω–∏–∫"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üîô –ù–∞–∑–∞–¥"),
		),
	)

	msg := tgbotapi.NewMessage(update.Message.Chat.ID,
		fmt.Sprintf("üè• *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–Ω–∏–∫–∞–º–∏*\n\n–ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–Ω–∏–∫: %d/%d\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", activeClinics, totalClinics))
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = keyboard

	h.bot.Send(msg)
}

// startAddVet –Ω–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Ä–∞—á–∞
func (h *AdminHandlers) startAddVet(update tgbotapi.Update) {
	userID := update.Message.From.ID
	h.adminState[userID] = "add_vet_name"

	keyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"),
		),
	)
	keyboard.OneTimeKeyboard = true

	msg := tgbotapi.NewMessage(update.Message.Chat.ID,
		"üë®‚Äç‚öïÔ∏è *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤—Ä–∞—á–∞*\n\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤—Ä–∞—á–∞:")
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = keyboard

	h.bot.Send(msg)
}

// handleAddVetName –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∏–º–µ–Ω–∏ –≤—Ä–∞—á–∞
func (h *AdminHandlers) handleAddVetName(update tgbotapi.Update, name string) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∞"
	if name == "‚ùå –û—Ç–º–µ–Ω–∞" {
		h.handleCancelAddVet(update)
		return
	}

	userID := update.Message.From.ID
	h.adminState[userID] = "add_vet_phone"

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
	userIDStr := strconv.FormatInt(userID, 10)
	h.tempData[userIDStr+"_name"] = name

	keyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"),
		),
	)

	msg := tgbotapi.NewMessage(update.Message.Chat.ID,
		"üìû –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –≤—Ä–∞—á–∞:")
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = keyboard

	h.bot.Send(msg)
}

// handleAddVetPhone –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤—Ä–∞—á–∞
func (h *AdminHandlers) handleAddVetPhone(update tgbotapi.Update, phone string) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∞"
	if phone == "‚ùå –û—Ç–º–µ–Ω–∞" {
		h.handleCancelAddVet(update)
		return
	}

	userID := update.Message.From.ID
	h.adminState[userID] = "add_vet_specializations"

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
	userIDStr := strconv.FormatInt(userID, 10)
	h.tempData[userIDStr+"_phone"] = phone

	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞
	specializations, err := h.db.GetAllSpecializations()
	if err != nil {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID,
			"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π")
		h.bot.Send(msg)
		return
	}

	// –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ ID –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ—Å—Ç–∏
	sort.Slice(specializations, func(i, j int) bool {
		return specializations[i].ID < specializations[j].ID
	})

	var sb strings.Builder
	sb.WriteString("üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Ä–∞—á–∞ (–≤–≤–µ–¥–∏—Ç–µ ID —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):\n\n")

	for _, spec := range specializations {
		sb.WriteString(fmt.Sprintf("ID %d: %s\n", spec.ID, spec.Name))
	}

	sb.WriteString("\n–ü—Ä–∏–º–µ—Ä: 1,3,5")

	keyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"),
		),
	)

	msg := tgbotapi.NewMessage(update.Message.Chat.ID, sb.String())
	msg.ReplyMarkup = keyboard
	h.bot.Send(msg)
}

// handleCancelAddVet –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Ä–∞—á–∞
func (h *AdminHandlers) handleCancelAddVet(update tgbotapi.Update) {
	userID := update.Message.From.ID

	// –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
	h.cleanTempData(userID)

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Ä–∞—á–∞–º–∏
	h.adminState[userID] = "vet_management"

	msg := tgbotapi.NewMessage(update.Message.Chat.ID, "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
	h.bot.Send(msg)

	h.showVetManagement(update)
}

// handleAddVetSpecializations –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π
func (h *AdminHandlers) handleAddVetSpecializations(update tgbotapi.Update, specsText string) {
	userID := update.Message.From.ID

	// –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
	userIDStr := strconv.FormatInt(userID, 10)
	name := h.getStringTempData(userIDStr + "_name")
	phone := h.getStringTempData(userIDStr + "_phone")

	if name == "" || phone == "" {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID,
			"–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –≤—Ä–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
		h.bot.Send(msg)
		h.startAddVet(update)
		return
	}

	// –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö ID —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π
	if !h.isValidSpecializationIDs(specsText) {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID,
			"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π. –í–≤–µ–¥–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ ID —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1,3,5)")
		h.bot.Send(msg)
		return
	}

	// –°–æ–∑–¥–∞–µ–º –≤—Ä–∞—á–∞
	vet := &models.Veterinarian{
		FirstName: name,
		LastName:  "",
		Phone:     phone,
		IsActive:  true,
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–∞—á–∞ –≤ –±–∞–∑—É
	err := h.addVeterinarian(vet, specsText)
	if err != nil {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID,
			fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤—Ä–∞—á–∞: %v", err))
		h.bot.Send(msg)
	} else {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID,
			"‚úÖ –í—Ä–∞—á —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
		h.bot.Send(msg)
	}

	// –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
	h.cleanTempData(userID)

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Ä–∞—á–∞–º–∏
	h.adminState[userID] = "vet_management"
	h.showVetManagement(update)
}

// showVetList –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Ä–∞—á–µ–π —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤—ã–±–æ—Ä–∞
func (h *AdminHandlers) showVetList(update tgbotapi.Update) {
	userID := update.Message.From.ID
	h.adminState[userID] = "vet_list"

	InfoLog.Printf("üîÑ –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –≤—Ä–∞—á–µ–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d", userID)

	vets, err := h.db.GetAllVeterinarians()
	if err != nil {
		ErrorLog.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤—Ä–∞—á–µ–π: %v", err)
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤—Ä–∞—á–µ–π")
		h.bot.Send(msg)
		return
	}

	InfoLog.Printf("‚úÖ –ü–æ–ª—É—á–µ–Ω–æ %d –≤—Ä–∞—á–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", len(vets))

	if len(vets) == 0 {
		InfoLog.Printf("üì≠ –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –≤—Ä–∞—á–µ–π")
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "üì≠ –í—Ä–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
		h.bot.Send(msg)
		return
	}

	InfoLog.Printf("üìã –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑ %d –≤—Ä–∞—á–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è", len(vets))

	var sb strings.Builder
	sb.WriteString("üë• *–°–ø–∏—Å–æ–∫ –≤—Ä–∞—á–µ–π:*\n\n")

	for i, vet := range vets {
		status := "‚úÖ"
		if !vet.IsActive {
			status = "‚ùå"
		}

		// –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏
		firstName := vet.FirstName
		if firstName == "" {
			firstName = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
		}

		lastName := vet.LastName
		if lastName == "" {
			lastName = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
		}

		phone := vet.Phone
		if phone == "" {
			phone = "–ù–µ —É–∫–∞–∑–∞–Ω"
		}

		sb.WriteString(fmt.Sprintf("%s %d. %s %s - %s\n", status, i+1, firstName, lastName, phone))

		// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–æ–ª—è—Ö
		if !h.hasCompleteRequiredData(vet) {
			sb.WriteString("   ‚ö†Ô∏è *–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–∞–≤—Ç–æ-–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω)*\n")
		} else if vet.FirstName == "–û–®–ò–ë–ö–ê_–î–ê–ù–ù–´–•" {
			sb.WriteString("   üö® *–û–®–ò–ë–ö–ê –î–ê–ù–ù–´–• - —Ç—Ä–µ–±—É–µ—Ç —Å—Ä–æ—á–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è*\n")
		}
	}

	sb.WriteString("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤—Ä–∞—á–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")

	keyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üîô –ù–∞–∑–∞–¥"),
		),
	)

	msg := tgbotapi.NewMessage(update.Message.Chat.ID, sb.String())
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = keyboard

	h.bot.Send(msg)
	InfoLog.Printf("‚úÖ –°–ø–∏—Å–æ–∫ –≤—Ä–∞—á–µ–π —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d", userID)
}

// hasCompleteRequiredData –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤—Ä–∞—á–∞
func (h *AdminHandlers) hasCompleteRequiredData(vet *models.Veterinarian) bool {
	// –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: –∏–º—è, —Ñ–∞–º–∏–ª–∏—è, —Ç–µ–ª–µ—Ñ–æ–Ω
	if strings.TrimSpace(vet.FirstName) == "" {
		return false
	}
	if strings.TrimSpace(vet.LastName) == "" {
		return false
	}
	if strings.TrimSpace(vet.Phone) == "" {
		return false
	}
	// –ò—Å–∫–ª—é—á–∞–µ–º –≤—Ä–∞—á–µ–π —Å –æ—à–∏–±–∫–æ–π –¥–∞–Ω–Ω—ã—Ö
	if vet.FirstName == "–û–®–ò–ë–ö–ê_–î–ê–ù–ù–´–•" {
		return false
	}

	return true
}

// showVetEditMenu –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–∞—á–∞
func (h *AdminHandlers) showVetEditMenu(update tgbotapi.Update, vet *models.Veterinarian) {
	userID := update.Message.From.ID
	h.adminState[userID] = "vet_edit_menu"

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤—Ä–∞—á–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
	userIDStr := strconv.FormatInt(userID, 10)
	h.tempData[userIDStr+"_vet_edit"] = &models.VetEditData{
		VetID: models.GetVetIDAsIntOrZero(vet),
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Ä–∞—á–∞
	specs, err := h.db.GetSpecializationsByVetID(models.GetVetIDAsIntOrZero(vet))
	specsText := ""
	if err == nil && len(specs) > 0 {
		var specIDs []string
		for _, spec := range specs {
			specIDs = append(specIDs, strconv.Itoa(spec.ID))
		}
		specsText = strings.Join(specIDs, ",")
	}

	var sb strings.Builder
	sb.WriteString(fmt.Sprintf("üë®‚Äç‚öïÔ∏è *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–∞—á–æ–º:* %s %s\n\n", vet.FirstName, vet.LastName))
	sb.WriteString(fmt.Sprintf("üìû –¢–µ–ª–µ—Ñ–æ–Ω: %s\n", vet.Phone))

	if vet.Email.Valid {
		sb.WriteString(fmt.Sprintf("üìß Email: %s\n", vet.Email.String))
	}

	if vet.ExperienceYears.Valid {
		sb.WriteString(fmt.Sprintf("üíº –û–ø—ã—Ç: %d –ª–µ—Ç\n", vet.ExperienceYears.Int64))
	}

	sb.WriteString("üìä –°—Ç–∞—Ç—É—Å: ")
	if vet.IsActive {
		sb.WriteString("‚úÖ –ê–∫—Ç–∏–≤–µ–Ω\n")
	} else {
		sb.WriteString("‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω\n")
	}

	sb.WriteString(fmt.Sprintf("üéØ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: %s\n\n", specsText))
	sb.WriteString("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")

	keyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–º—è"),
			tgbotapi.NewKeyboardButton("üìû –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üéØ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"),
			tgbotapi.NewKeyboardButton("üìß –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å email"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üíº –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø—ã—Ç"),
			tgbotapi.NewKeyboardButton("üèôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚ö° –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å"),
			tgbotapi.NewKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Ä–∞—á–∞"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üîô –ù–∞–∑–∞–¥"),
		),
	)

	msg := tgbotapi.NewMessage(update.Message.Chat.ID, sb.String())
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = keyboard

	h.bot.Send(msg)
}

// handleVetEditMenu –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –≤—Ä–∞—á–∞
func (h *AdminHandlers) handleVetEditMenu(update tgbotapi.Update, text string) {
	userID := update.Message.From.ID
	userIDStr := strconv.FormatInt(userID, 10)

	vetData, ok := h.tempData[userIDStr+"_vet_edit"].(*models.VetEditData)
	if !ok || vetData == nil {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –≤—Ä–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
		h.bot.Send(msg)
		h.showVetList(update)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—Ä–∞—á–∞
	vet, err := h.db.GetVeterinarianByID(vetData.VetID)
	if err != nil {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤—Ä–∞—á–∞")
		h.bot.Send(msg)
		h.showVetList(update)
		return
	}

	switch text {
	case "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–º—è":
		h.adminState[userID] = "vet_edit_field"
		vetData.Field = "first_name"
		vetData.CurrentValue = vet.FirstName
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –≤—Ä–∞—á–∞:")
		h.bot.Send(msg)

	case "üìû –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω":
		h.adminState[userID] = "vet_edit_field"
		vetData.Field = "phone"
		vetData.CurrentValue = vet.Phone
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –≤—Ä–∞—á–∞:")
		h.bot.Send(msg)

	case "üìß –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å email":
		h.adminState[userID] = "vet_edit_field"
		vetData.Field = "email"
		if vet.Email.Valid {
			vetData.CurrentValue = vet.Email.String
		}
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π email –≤—Ä–∞—á–∞ (–∏–ª–∏ '-' –¥–ª—è –æ—á–∏—Å—Ç–∫–∏):")
		h.bot.Send(msg)

	case "üíº –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø—ã—Ç":
		h.adminState[userID] = "vet_edit_field"
		vetData.Field = "experience_years"
		if vet.ExperienceYears.Valid {
			vetData.CurrentValue = strconv.FormatInt(vet.ExperienceYears.Int64, 10)
		}
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –≤ –≥–æ–¥–∞—Ö (–∏–ª–∏ '-' –¥–ª—è –æ—á–∏—Å—Ç–∫–∏):")
		h.bot.Send(msg)

	case "üéØ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏":
		h.adminState[userID] = "vet_edit_specializations"
		specs, err := h.db.GetSpecializationsByVetID(models.GetVetIDAsIntOrZero(vet))
		if err == nil && len(specs) > 0 {
			var specIDs []string
			for _, spec := range specs {
				specIDs = append(specIDs, strconv.Itoa(spec.ID))
			}
			vetData.Specializations = strings.Join(specIDs, ",")
		}

		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π
		specializations, err := h.db.GetAllSpecializations()
		if err != nil {
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π")
			h.bot.Send(msg)
			return
		}

		var sb strings.Builder
		sb.WriteString("üéØ –¢–µ–∫—É—â–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ")
		if vetData.Specializations != "" {
			sb.WriteString(vetData.Specializations)
		} else {
			sb.WriteString("–Ω–µ —É–∫–∞–∑–∞–Ω—ã")
		}
		sb.WriteString("\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:\n")

		for _, spec := range specializations {
			sb.WriteString(fmt.Sprintf("ID %d: %s\n", spec.ID, spec.Name))
		}

		sb.WriteString("\n–í–≤–µ–¥–∏—Ç–µ ID —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1,3,5):")

		msg := tgbotapi.NewMessage(update.Message.Chat.ID, sb.String())
		h.bot.Send(msg)

	case "üèôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥":
		h.startChangeVetCity(update, vet)

	case "‚ö° –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å":
		h.adminState[userID] = "vet_toggle_active"
		newStatus := !vet.IsActive
		statusText := "–∞–∫—Ç–∏–≤–µ–Ω"
		if !newStatus {
			statusText = "–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω"
		}

		keyboard := tgbotapi.NewReplyKeyboard(
			tgbotapi.NewKeyboardButtonRow(
				tgbotapi.NewKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"),
				tgbotapi.NewKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"),
			),
		)

		msg := tgbotapi.NewMessage(update.Message.Chat.ID,
			fmt.Sprintf("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –≤—Ä–∞—á–∞ %s %s?", vet.FirstName, statusText))
		msg.ReplyMarkup = keyboard
		h.bot.Send(msg)

	case "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Ä–∞—á–∞":
		h.adminState[userID] = "vet_confirm_delete"
		keyboard := tgbotapi.NewReplyKeyboard(
			tgbotapi.NewKeyboardButtonRow(
				tgbotapi.NewKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ"),
				tgbotapi.NewKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"),
			),
		)

		msg := tgbotapi.NewMessage(update.Message.Chat.ID,
			fmt.Sprintf("‚ö†Ô∏è *–í–ù–ò–ú–ê–ù–ò–ï!* \n\n–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–∞—á–∞ %s %s.\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ:", vet.FirstName, vet.LastName))
		msg.ParseMode = "Markdown"
		msg.ReplyMarkup = keyboard
		h.bot.Send(msg)

	case "üîô –ù–∞–∑–∞–¥":
		h.handleBackButton(update)

	default:
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
		h.bot.Send(msg)
	}
}

// handleVetEditField –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—è –≤—Ä–∞—á–∞
func (h *AdminHandlers) handleVetEditField(update tgbotapi.Update, text string) {
	userID := update.Message.From.ID
	userIDStr := strconv.FormatInt(userID, 10)

	vetData, ok := h.tempData[userIDStr+"_vet_edit"].(*models.VetEditData)
	if !ok || vetData == nil {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –≤—Ä–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
		h.bot.Send(msg)
		h.showVetList(update)
		return
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
	if text == "-" {
		text = "" // –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—è
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	err := h.updateVeterinarianField(vetData.VetID, vetData.Field, text)
	if err != nil {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID,
			fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: %v", err))
		h.bot.Send(msg)
	} else {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
		h.bot.Send(msg)
	}

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–∞—á–∞
	vet, err := h.db.GetVeterinarianByID(vetData.VetID)
	if err == nil {
		h.showVetEditMenu(update, vet)
	} else {
		h.showVetList(update)
	}
}

// handleVetEditSpecializations –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π –≤—Ä–∞—á–∞
func (h *AdminHandlers) handleVetEditSpecializations(update tgbotapi.Update, text string) {
	userID := update.Message.From.ID
	userIDStr := strconv.FormatInt(userID, 10)

	vetData, ok := h.tempData[userIDStr+"_vet_edit"].(*models.VetEditData)
	if !ok || vetData == nil {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –≤—Ä–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
		h.bot.Send(msg)
		h.showVetList(update)
		return
	}

	// –í–∞–ª–∏–¥–∞—Ü–∏—è ID —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π
	if text != "" && !h.isValidSpecializationIDs(text) {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID,
			"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π. –í–≤–µ–¥–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ ID —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é")
		h.bot.Send(msg)
		return
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Ä–∞—á–∞
	err := h.updateVeterinarianSpecializations(vetData.VetID, text)
	if err != nil {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID,
			fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π: %v", err))
		h.bot.Send(msg)
	} else {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "‚úÖ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
		h.bot.Send(msg)
	}

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–∞—á–∞
	vet, err := h.db.GetVeterinarianByID(vetData.VetID)
	if err == nil {
		h.showVetEditMenu(update, vet)
	} else {
		h.showVetList(update)
	}
}

// handleVetConfirmDelete –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–∞—á–∞
func (h *AdminHandlers) handleVetConfirmDelete(update tgbotapi.Update, text string) {
	userID := update.Message.From.ID
	userIDStr := strconv.FormatInt(userID, 10)

	vetData, ok := h.tempData[userIDStr+"_vet_edit"].(*models.VetEditData)
	if !ok || vetData == nil {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –≤—Ä–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
		h.bot.Send(msg)
		h.showVetList(update)
		return
	}

	if text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ" {
		err := h.deleteVeterinarian(vetData.VetID)
		if err != nil {
			msg := tgbotapi.NewMessage(update.Message.Chat.ID,
				fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–∞—á–∞: %v", err))
			h.bot.Send(msg)
		} else {
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, "‚úÖ –í—Ä–∞—á —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
			h.bot.Send(msg)
		}
	} else {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
		h.bot.Send(msg)
	}

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ —Å–ø–∏—Å–∫—É –≤—Ä–∞—á–µ–π
	h.showVetList(update)
}

// handleVetToggleActive –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Ä–∞—á–∞
func (h *AdminHandlers) handleVetToggleActive(update tgbotapi.Update, text string) {
	userID := update.Message.From.ID
	userIDStr := strconv.FormatInt(userID, 10)

	vetData, ok := h.tempData[userIDStr+"_vet_edit"].(*models.VetEditData)
	if !ok || vetData == nil {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –≤—Ä–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
		h.bot.Send(msg)
		h.showVetList(update)
		return
	}

	if text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å" {
		// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–∞—á–∞
		vet, err := h.db.GetVeterinarianByID(vetData.VetID)
		if err != nil {
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤—Ä–∞—á–∞")
			h.bot.Send(msg)
			h.showVetList(update)
			return
		}

		// –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å
		newStatus := !vet.IsActive
		err = h.updateVeterinarianField(vetData.VetID, "is_active", strconv.FormatBool(newStatus))
		if err != nil {
			msg := tgbotapi.NewMessage(update.Message.Chat.ID,
				fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: %v", err))
			h.bot.Send(msg)
		} else {
			statusText := "–∞–∫—Ç–∏–≤–µ–Ω"
			if !newStatus {
				statusText = "–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω"
			}
			msg := tgbotapi.NewMessage(update.Message.Chat.ID,
				fmt.Sprintf("‚úÖ –°—Ç–∞—Ç—É—Å –≤—Ä–∞—á–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: %s", statusText))
			h.bot.Send(msg)
		}
	} else {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
		h.bot.Send(msg)
	}

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–∞—á–∞
	vet, err := h.db.GetVeterinarianByID(vetData.VetID)
	if err == nil {
		h.showVetEditMenu(update, vet)
	} else {
		h.showVetList(update)
	}
}

// showClinicList –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–ª–∏–Ω–∏–∫ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤—ã–±–æ—Ä–∞
func (h *AdminHandlers) showClinicList(update tgbotapi.Update) {
	userID := update.Message.From.ID
	h.adminState[userID] = "clinic_list"

	clinics, err := h.db.GetAllClinics()
	if err != nil {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–ª–∏–Ω–∏–∫")
		h.bot.Send(msg)
		return
	}

	if len(clinics) == 0 {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ö–ª–∏–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
		h.bot.Send(msg)
		return
	}

	var sb strings.Builder
	sb.WriteString("üè• *–°–ø–∏—Å–æ–∫ –∫–ª–∏–Ω–∏–∫:*\n\n")

	for i, clinic := range clinics {
		status := "‚úÖ"
		if !clinic.IsActive {
			status = "‚ùå"
		}
		sb.WriteString(fmt.Sprintf("%s %d. %s - %s\n", status, i+1, clinic.Name, clinic.Address))
	}

	sb.WriteString("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–ª–∏–Ω–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")

	keyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üîô –ù–∞–∑–∞–¥"),
		),
	)

	msg := tgbotapi.NewMessage(update.Message.Chat.ID, sb.String())
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = keyboard

	h.bot.Send(msg)
}

// handleClinicListSelection –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–ª–∏–Ω–∏–∫–∏ –∏–∑ —Å–ø–∏—Å–∫–∞
func (h *AdminHandlers) handleClinicListSelection(update tgbotapi.Update, text string) {
	// –ü–∞—Ä—Å–∏–º –Ω–æ–º–µ—Ä –∫–ª–∏–Ω–∏–∫–∏
	index, err := strconv.Atoi(text)
	if err != nil || index < 1 {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–ª–∏–Ω–∏–∫–∏")
		h.bot.Send(msg)
		return
	}

	clinics, err := h.db.GetAllClinics()
	if err != nil {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–ª–∏–Ω–∏–∫")
		h.bot.Send(msg)
		return
	}

	if index > len(clinics) {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ö–ª–∏–Ω–∏–∫–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
		h.bot.Send(msg)
		return
	}

	clinic := clinics[index-1]
	h.showClinicEditMenu(update, clinic)
}

// showClinicEditMenu –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∏–Ω–∏–∫–∏
func (h *AdminHandlers) showClinicEditMenu(update tgbotapi.Update, clinic *models.Clinic) {
	userID := update.Message.From.ID
	h.adminState[userID] = "clinic_edit_menu"

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–ª–∏–Ω–∏–∫–∏ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
	userIDStr := strconv.FormatInt(userID, 10)
	h.tempData[userIDStr+"_clinic_edit"] = &models.ClinicEditData{
		ClinicID: clinic.ID,
	}

	var sb strings.Builder
	sb.WriteString(fmt.Sprintf("üè• *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–Ω–∏–∫–æ–π:* %s\n\n", clinic.Name))
	sb.WriteString(fmt.Sprintf("üìç –ê–¥—Ä–µ—Å: %s\n", clinic.Address))

	if clinic.Phone.Valid {
		sb.WriteString(fmt.Sprintf("üìû –¢–µ–ª–µ—Ñ–æ–Ω: %s\n", clinic.Phone.String))
	}

	if clinic.WorkingHours.Valid {
		sb.WriteString(fmt.Sprintf("üïê –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: %s\n", clinic.WorkingHours.String))
	}

	sb.WriteString("üìä –°—Ç–∞—Ç—É—Å: ")
	if clinic.IsActive {
		sb.WriteString("‚úÖ –ê–∫—Ç–∏–≤–Ω–∞\n")
	} else {
		sb.WriteString("‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞\n")
	}

	sb.WriteString("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")

	keyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ"),
			tgbotapi.NewKeyboardButton("üìç –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üìû –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω"),
			tgbotapi.NewKeyboardButton("üïê –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —á–∞—Å—ã —Ä–∞–±–æ—Ç—ã"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚ö° –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å"),
			tgbotapi.NewKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–ª–∏–Ω–∏–∫—É"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üîô –ù–∞–∑–∞–¥"),
		),
	)

	msg := tgbotapi.NewMessage(update.Message.Chat.ID, sb.String())
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = keyboard

	h.bot.Send(msg)
}

// handleClinicEditMenu –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∫–ª–∏–Ω–∏–∫–∏
func (h *AdminHandlers) handleClinicEditMenu(update tgbotapi.Update, text string) {
	userID := update.Message.From.ID
	userIDStr := strconv.FormatInt(userID, 10)

	clinicData, ok := h.tempData[userIDStr+"_clinic_edit"].(*models.ClinicEditData)
	if !ok || clinicData == nil {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
		h.bot.Send(msg)
		h.showClinicList(update)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–Ω–∏–∫–∏
	clinic, err := h.db.GetClinicByID(clinicData.ClinicID)
	if err != nil {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–Ω–∏–∫–∏")
		h.bot.Send(msg)
		h.showClinicList(update)
		return
	}

	switch text {
	case "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ":
		h.adminState[userID] = "clinic_edit_field"
		clinicData.Field = "name"
		clinicData.CurrentValue = clinic.Name
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∏–Ω–∏–∫–∏:")
		h.bot.Send(msg)

	case "üìç –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å":
		h.adminState[userID] = "clinic_edit_field"
		clinicData.Field = "address"
		clinicData.CurrentValue = clinic.Address
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å –∫–ª–∏–Ω–∏–∫–∏:")
		h.bot.Send(msg)

	case "üìû –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω":
		h.adminState[userID] = "clinic_edit_field"
		clinicData.Field = "phone"
		if clinic.Phone.Valid {
			clinicData.CurrentValue = clinic.Phone.String
		}
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–Ω–∏–∫–∏ (–∏–ª–∏ '-' –¥–ª—è –æ—á–∏—Å—Ç–∫–∏):")
		h.bot.Send(msg)

	case "üïê –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —á–∞—Å—ã —Ä–∞–±–æ—Ç—ã":
		h.adminState[userID] = "clinic_edit_field"
		clinicData.Field = "working_hours"
		if clinic.WorkingHours.Valid {
			clinicData.CurrentValue = clinic.WorkingHours.String
		}
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ —á–∞—Å—ã —Ä–∞–±–æ—Ç—ã –∫–ª–∏–Ω–∏–∫–∏ (–∏–ª–∏ '-' –¥–ª—è –æ—á–∏—Å—Ç–∫–∏):")
		h.bot.Send(msg)

	case "‚ö° –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å":
		h.adminState[userID] = "clinic_toggle_active"
		newStatus := !clinic.IsActive
		statusText := "–∞–∫—Ç–∏–≤–Ω–∞"
		if !newStatus {
			statusText = "–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞"
		}

		keyboard := tgbotapi.NewReplyKeyboard(
			tgbotapi.NewKeyboardButtonRow(
				tgbotapi.NewKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"),
				tgbotapi.NewKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"),
			),
		)

		msg := tgbotapi.NewMessage(update.Message.Chat.ID,
			fmt.Sprintf("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∫–ª–∏–Ω–∏–∫—É %s %s?", clinic.Name, statusText))
		msg.ReplyMarkup = keyboard
		h.bot.Send(msg)

	case "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–ª–∏–Ω–∏–∫—É":
		h.adminState[userID] = "clinic_confirm_delete"
		keyboard := tgbotapi.NewReplyKeyboard(
			tgbotapi.NewKeyboardButtonRow(
				tgbotapi.NewKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ"),
				tgbotapi.NewKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"),
			),
		)

		msg := tgbotapi.NewMessage(update.Message.Chat.ID,
			fmt.Sprintf("‚ö†Ô∏è *–í–ù–ò–ú–ê–ù–ò–ï!* \n\n–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–ª–∏–Ω–∏–∫—É %s.\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ:", clinic.Name))
		msg.ParseMode = "Markdown"
		msg.ReplyMarkup = keyboard
		h.bot.Send(msg)

	case "üîô –ù–∞–∑–∞–¥":
		h.handleBackButton(update)

	default:
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
		h.bot.Send(msg)
	}
}

// handleClinicEditField –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—è –∫–ª–∏–Ω–∏–∫–∏
func (h *AdminHandlers) handleClinicEditField(update tgbotapi.Update, text string) {
	userID := update.Message.From.ID
	userIDStr := strconv.FormatInt(userID, 10)

	clinicData, ok := h.tempData[userIDStr+"_clinic_edit"].(*models.ClinicEditData)
	if !ok || clinicData == nil {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
		h.bot.Send(msg)
		h.showClinicList(update)
		return
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
	if text == "-" {
		text = "" // –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—è
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	err := h.updateClinicField(clinicData.ClinicID, clinicData.Field, text)
	if err != nil {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID,
			fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: %v", err))
		h.bot.Send(msg)
	} else {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
		h.bot.Send(msg)
	}

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∏–Ω–∏–∫–∏
	clinic, err := h.db.GetClinicByID(clinicData.ClinicID)
	if err == nil {
		h.showClinicEditMenu(update, clinic)
	} else {
		h.showClinicList(update)
	}
}

// handleClinicConfirmDelete –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∏–Ω–∏–∫–∏
func (h *AdminHandlers) handleClinicConfirmDelete(update tgbotapi.Update, text string) {
	userID := update.Message.From.ID
	userIDStr := strconv.FormatInt(userID, 10)

	clinicData, ok := h.tempData[userIDStr+"_clinic_edit"].(*models.ClinicEditData)
	if !ok || clinicData == nil {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
		h.bot.Send(msg)
		h.showClinicList(update)
		return
	}

	if text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ" {
		err := h.deleteClinic(clinicData.ClinicID)
		if err != nil {
			msg := tgbotapi.NewMessage(update.Message.Chat.ID,
				fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª–∏–Ω–∏–∫–∏: %v", err))
			h.bot.Send(msg)
		} else {
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, "‚úÖ –ö–ª–∏–Ω–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
			h.bot.Send(msg)
		}
	} else {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
		h.bot.Send(msg)
	}

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ —Å–ø–∏—Å–∫—É –∫–ª–∏–Ω–∏–∫
	h.showClinicList(update)
}

// handleClinicToggleActive –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–ª–∏–Ω–∏–∫–∏
func (h *AdminHandlers) handleClinicToggleActive(update tgbotapi.Update, text string) {
	userID := update.Message.From.ID
	userIDStr := strconv.FormatInt(userID, 10)

	clinicData, ok := h.tempData[userIDStr+"_clinic_edit"].(*models.ClinicEditData)
	if !ok || clinicData == nil {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
		h.bot.Send(msg)
		h.showClinicList(update)
		return
	}

	if text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å" {
		// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–ª–∏–Ω–∏–∫—É
		clinic, err := h.db.GetClinicByID(clinicData.ClinicID)
		if err != nil {
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–Ω–∏–∫–∏")
			h.bot.Send(msg)
			h.showClinicList(update)
			return
		}

		// –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å
		newStatus := !clinic.IsActive
		err = h.updateClinicField(clinicData.ClinicID, "is_active", strconv.FormatBool(newStatus))
		if err != nil {
			msg := tgbotapi.NewMessage(update.Message.Chat.ID,
				fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: %v", err))
			h.bot.Send(msg)
		} else {
			statusText := "–∞–∫—Ç–∏–≤–Ω–∞"
			if !newStatus {
				statusText = "–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞"
			}
			msg := tgbotapi.NewMessage(update.Message.Chat.ID,
				fmt.Sprintf("‚úÖ –°—Ç–∞—Ç—É—Å –∫–ª–∏–Ω–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: %s", statusText))
			h.bot.Send(msg)
		}
	} else {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
		h.bot.Send(msg)
	}

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∏–Ω–∏–∫–∏
	clinic, err := h.db.GetClinicByID(clinicData.ClinicID)
	if err == nil {
		h.showClinicEditMenu(update, clinic)
	} else {
		h.showClinicList(update)
	}
}

// startAddClinic –Ω–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–Ω–∏–∫–∏
func (h *AdminHandlers) startAddClinic(update tgbotapi.Update) {
	// TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–Ω–∏–∫–∏
	msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–Ω–∏–∫–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
	h.bot.Send(msg)
}

// showSettings –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
func (h *AdminHandlers) showSettings(update tgbotapi.Update) {
	userCount, _ := h.getUserCount()
	activeVets, _ := h.getActiveVetCount()
	totalVets, _ := h.getTotalVetCount()
	activeClinics, _ := h.getActiveClinicCount()
	totalClinics, _ := h.getTotalClinicCount()

	msg := tgbotapi.NewMessage(update.Message.Chat.ID,
		fmt.Sprintf(`‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã*

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %d
‚Ä¢ –í—Ä–∞—á–µ–π: %d/%d –∞–∫—Ç–∏–≤–Ω—ã—Ö
‚Ä¢ –ö–ª–∏–Ω–∏–∫: %d/%d –∞–∫—Ç–∏–≤–Ω—ã—Ö

–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–ª–∏ –ø—Ä—è–º—ã–µ SQL-–∑–∞–ø—Ä–æ—Å—ã –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.`,
			userCount, activeVets, totalVets, activeClinics, totalClinics))
	msg.ParseMode = "Markdown"
	h.bot.Send(msg)
}

// HandleStats –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞
func (h *AdminHandlers) HandleStats(update tgbotapi.Update) {
	userCount, _ := h.getUserCount()
	activeVets, _ := h.getActiveVetCount()
	totalVets, _ := h.getTotalVetCount()
	activeClinics, _ := h.getActiveClinicCount()
	totalClinics, _ := h.getTotalClinicCount()
	requestCount, _ := h.getRequestCount()

	statsMsg := fmt.Sprintf(`üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞*

üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %d
üë®‚Äç‚öïÔ∏è –í—Ä–∞—á–µ–π: %d/%d –∞–∫—Ç–∏–≤–Ω—ã—Ö
üè• –ö–ª–∏–Ω–∏–∫: %d/%d –∞–∫—Ç–∏–≤–Ω—ã—Ö
üìû –ó–∞–ø—Ä–æ—Å–æ–≤: %d

–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ ‚úÖ`, userCount, activeVets, totalVets, activeClinics, totalClinics, requestCount)

	msg := tgbotapi.NewMessage(update.Message.Chat.ID, statsMsg)
	msg.ParseMode = "Markdown"
	h.bot.Send(msg)
}

// closeAdmin –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω—Å–∫—É—é –ø–∞–Ω–µ–ª—å
func (h *AdminHandlers) closeAdmin(update tgbotapi.Update) {
	userID := update.Message.From.ID

	// –û—á–∏—â–∞–µ–º –≤—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	h.cleanTempData(userID)
	delete(h.adminState, userID)

	removeKeyboard := tgbotapi.NewRemoveKeyboard(true)
	msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å –∑–∞–∫—Ä—ã—Ç–∞")
	msg.ReplyMarkup = removeKeyboard
	h.bot.Send(msg)
}

// ========== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–• ==========

// isValidSpecializationIDs –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö ID —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π
func (h *AdminHandlers) isValidSpecializationIDs(input string) bool {
	if input == "" {
		return true // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–æ–ø—É—Å—Ç–∏–º–∞ (–æ—á–∏—Å—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π)
	}

	// –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π ID —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
	maxID, err := h.getMaxSpecializationID()
	if err != nil {
		ErrorLog.Printf("Error getting max specialization ID: %v", err)
		return false
	}

	ids := strings.Split(input, ",")
	for _, idStr := range ids {
		id, err := strconv.Atoi(strings.TrimSpace(idStr))
		if err != nil || id <= 0 || id > maxID {
			return false
		}

		// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ –ë–î
		exists, err := h.db.SpecializationExists(id)
		if err != nil || !exists {
			return false
		}
	}
	return true
}

// getMaxSpecializationID –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π ID —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
func (h *AdminHandlers) getMaxSpecializationID() (int, error) {
	var maxID int
	err := h.db.GetDB().QueryRow("SELECT COALESCE(MAX(id), 0) FROM specializations").Scan(&maxID)
	return maxID, err
}

// addVeterinarian –¥–æ–±–∞–≤–ª—è–µ—Ç –≤—Ä–∞—á–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
func (h *AdminHandlers) addVeterinarian(vet *models.Veterinarian, specsText string) error {
	// –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–∞—á–∞ –≤ –±–∞–∑—É —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	err := h.db.CreateVeterinarian(vet)
	if err != nil {
		ErrorLog.Printf("Error creating veterinarian: %v", err)
		return err
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
	if specsText != "" {
		specIDs := strings.Split(specsText, ",")
		InfoLog.Printf("Adding vet ID %d with specializations: %v", models.GetVetIDAsIntOrZero(vet), specIDs)

		for _, specIDStr := range specIDs {
			specID, err := strconv.Atoi(strings.TrimSpace(specIDStr))
			if err == nil && specID > 0 {
				// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
				exists, err := h.db.SpecializationExists(specID)
				if err != nil {
					ErrorLog.Printf("Error checking specialization %d: %v", specID, err)
					continue
				}

				if exists {
					// –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑—å –≤—Ä–∞—á-—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
					_, err = h.db.GetDB().Exec(
						"INSERT INTO vet_specializations (vet_id, specialization_id) VALUES ($1, $2)",
						vet.ID, specID,
					)
					if err != nil {
						ErrorLog.Printf("Error adding specialization %d: %v", specID, err)
					} else {
						InfoLog.Printf("Adding vet ID %d with specializations: %v", models.GetVetIDAsIntOrZero(vet), specIDs)
					}
				} else {
					InfoLog.Printf("Specialization %d does not exist", specID)
				}
			}
		}
	}

	return nil
}

// updateVeterinarianField –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª–µ –≤—Ä–∞—á–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
func (h *AdminHandlers) updateVeterinarianField(vetID int, field string, value string) error {
	var query string
	var err error

	switch field {
	case "first_name":
		query = "UPDATE veterinarians SET first_name = $1 WHERE id = $2"
		_, err = h.db.GetDB().Exec(query, value, vetID)
	case "phone":
		query = "UPDATE veterinarians SET phone = $1 WHERE id = $2"
		_, err = h.db.GetDB().Exec(query, value, vetID)
	case "email":
		if value == "" {
			query = "UPDATE veterinarians SET email = NULL WHERE id = $1"
			_, err = h.db.GetDB().Exec(query, vetID)
		} else {
			query = "UPDATE veterinarians SET email = $1 WHERE id = $2"
			_, err = h.db.GetDB().Exec(query, value, vetID)
		}
	case "experience_years":
		if value == "" {
			query = "UPDATE veterinarians SET experience_years = NULL WHERE id = $1"
			_, err = h.db.GetDB().Exec(query, vetID)
		} else {
			exp, convErr := strconv.ParseInt(value, 10, 64)
			if convErr != nil {
				return convErr
			}
			query = "UPDATE veterinarians SET experience_years = $1 WHERE id = $2"
			_, err = h.db.GetDB().Exec(query, exp, vetID)
		}
	case "is_active":
		active, convErr := strconv.ParseBool(value)
		if convErr != nil {
			return convErr
		}
		query = "UPDATE veterinarians SET is_active = $1 WHERE id = $2"
		_, err = h.db.GetDB().Exec(query, active, vetID)
	default:
		return fmt.Errorf("unknown field: %s", field)
	}

	return err
}

// updateVeterinarianSpecializations –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Ä–∞—á–∞
func (h *AdminHandlers) updateVeterinarianSpecializations(vetID int, specsText string) error {
	// –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–µ–∫—É—â–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Ä–∞—á–∞
	_, err := h.db.GetDB().Exec("DELETE FROM vet_specializations WHERE vet_id = $1", vetID)
	if err != nil {
		return err
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ —É–∫–∞–∑–∞–Ω—ã
	if specsText != "" {
		specIDs := strings.Split(specsText, ",")
		for _, specIDStr := range specIDs {
			specID, err := strconv.Atoi(strings.TrimSpace(specIDStr))
			if err == nil && specID > 0 {
				// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
				exists, err := h.db.SpecializationExists(specID)
				if err == nil && exists {
					_, err = h.db.GetDB().Exec(
						"INSERT INTO vet_specializations (vet_id, specialization_id) VALUES ($1, $2)",
						vetID, specID,
					)
					if err != nil {
						ErrorLog.Printf("Error adding specialization %d: %v", specID, err)
					}
				}
			}
		}
	}

	return nil
}

// deleteVeterinarian —É–¥–∞–ª—è–µ—Ç –≤—Ä–∞—á–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
func (h *AdminHandlers) deleteVeterinarian(vetID int) error {
	// –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∏ —Å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–º–∏
	_, err := h.db.GetDB().Exec("DELETE FROM vet_specializations WHERE vet_id = $1", vetID)
	if err != nil {
		return err
	}

	// –£–¥–∞–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Ä–∞—á–∞
	_, err = h.db.GetDB().Exec("DELETE FROM schedules WHERE vet_id = $1", vetID)
	if err != nil {
		return err
	}

	// –£–¥–∞–ª—è–µ–º –≤—Ä–∞—á–∞
	_, err = h.db.GetDB().Exec("DELETE FROM veterinarians WHERE id = $1", vetID)
	return err
}

// updateClinicField –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª–µ –∫–ª–∏–Ω–∏–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
func (h *AdminHandlers) updateClinicField(clinicID int, field string, value string) error {
	var query string
	var err error

	switch field {
	case "name":
		query = "UPDATE clinics SET name = $1 WHERE id = $2"
		_, err = h.db.GetDB().Exec(query, value, clinicID)
	case "address":
		query = "UPDATE clinics SET address = $1 WHERE id = $2"
		_, err = h.db.GetDB().Exec(query, value, clinicID)
	case "phone":
		if value == "" {
			query = "UPDATE clinics SET phone = NULL WHERE id = $1"
			_, err = h.db.GetDB().Exec(query, clinicID)
		} else {
			query = "UPDATE clinics SET phone = $1 WHERE id = $2"
			_, err = h.db.GetDB().Exec(query, value, clinicID)
		}
	case "working_hours":
		if value == "" {
			query = "UPDATE clinics SET working_hours = NULL WHERE id = $1"
			_, err = h.db.GetDB().Exec(query, clinicID)
		} else {
			query = "UPDATE clinics SET working_hours = $1 WHERE id = $2"
			_, err = h.db.GetDB().Exec(query, value, clinicID)
		}
	case "is_active":
		active, convErr := strconv.ParseBool(value)
		if convErr != nil {
			return convErr
		}
		query = "UPDATE clinics SET is_active = $1 WHERE id = $2"
		_, err = h.db.GetDB().Exec(query, active, clinicID)
	default:
		return fmt.Errorf("unknown field: %s", field)
	}

	return err
}

// deleteClinic —É–¥–∞–ª—è–µ—Ç –∫–ª–∏–Ω–∏–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
func (h *AdminHandlers) deleteClinic(clinicID int) error {
	// –£–¥–∞–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, —Å–≤—è–∑–∞–Ω–Ω–æ–µ —Å –∫–ª–∏–Ω–∏–∫–æ–π
	_, err := h.db.GetDB().Exec("DELETE FROM schedules WHERE clinic_id = $1", clinicID)
	if err != nil {
		return err
	}

	// –£–¥–∞–ª—è–µ–º –∫–ª–∏–Ω–∏–∫—É
	_, err = h.db.GetDB().Exec("DELETE FROM clinics WHERE id = $1", clinicID)
	return err
}

// getStringTempData –ø–æ–ª—É—á–∞–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
func (h *AdminHandlers) getStringTempData(key string) string {
	if value, exists := h.tempData[key]; exists {
		if str, ok := value.(string); ok {
			return str
		}
	}
	return ""
}

// ========== –ú–ï–¢–û–î–´ –î–õ–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò ==========

func (h *AdminHandlers) getUserCount() (int, error) {
	query := "SELECT COUNT(*) FROM users"
	var count int
	err := h.db.GetDB().QueryRow(query).Scan(&count)
	return count, err
}

func (h *AdminHandlers) getActiveVetCount() (int, error) {
	query := "SELECT COUNT(*) FROM veterinarians WHERE is_active = true"
	var count int
	err := h.db.GetDB().QueryRow(query).Scan(&count)
	return count, err
}

func (h *AdminHandlers) getTotalVetCount() (int, error) {
	query := "SELECT COUNT(*) FROM veterinarians"
	var count int
	err := h.db.GetDB().QueryRow(query).Scan(&count)
	return count, err
}

func (h *AdminHandlers) getActiveClinicCount() (int, error) {
	query := "SELECT COUNT(*) FROM clinics WHERE is_active = true"
	var count int
	err := h.db.GetDB().QueryRow(query).Scan(&count)
	return count, err
}

func (h *AdminHandlers) getTotalClinicCount() (int, error) {
	query := "SELECT COUNT(*) FROM clinics"
	var count int
	err := h.db.GetDB().QueryRow(query).Scan(&count)
	return count, err
}

func (h *AdminHandlers) getRequestCount() (int, error) {
	query := "SELECT COUNT(*) FROM user_requests"
	var count int
	err := h.db.GetDB().QueryRow(query).Scan(&count)
	return count, err
}

// ========== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ì–û–†–û–î–ê–ú–ò ==========

// showCityManagement –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞–º–∏
func (h *AdminHandlers) showCityManagement(update tgbotapi.Update) {
	userID := update.Message.From.ID
	h.adminState[userID] = "city_management"

	// –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥–æ—Ä–æ–¥–æ–≤
	citiesCount, _ := h.getCitiesCount()

	keyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥"),
			tgbotapi.NewKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ —Ä–µ–≥–∏–æ–Ω—É"),
			tgbotapi.NewKeyboardButton("üîô –ù–∞–∑–∞–¥"),
		),
	)

	msg := tgbotapi.NewMessage(update.Message.Chat.ID,
		fmt.Sprintf("üèôÔ∏è *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞–º–∏*\n\n–í—Å–µ–≥–æ –≥–æ—Ä–æ–¥–æ–≤: %d\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", citiesCount))
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = keyboard

	h.bot.Send(msg)
}

// handleCityManagement –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞–º–∏
func (h *AdminHandlers) handleCityManagement(update tgbotapi.Update, text string) {
	switch text {
	case "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥":
		h.startAddCity(update)
	case "üìã –°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤":
		h.showCityList(update)
	case "üîç –ü–æ–∏—Å–∫ –ø–æ —Ä–µ–≥–∏–æ–Ω—É":
		h.startSearchByRegion(update)
	case "üîô –ù–∞–∑–∞–¥":
		h.handleBackButton(update)
	default:
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞–º–∏")
		h.bot.Send(msg)
	}
}

// startAddCity –Ω–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞
func (h *AdminHandlers) startAddCity(update tgbotapi.Update) {
	userID := update.Message.From.ID
	h.adminState[userID] = "add_city_name"

	removeKeyboard := tgbotapi.NewRemoveKeyboard(true)
	msg := tgbotapi.NewMessage(update.Message.Chat.ID,
		"üèôÔ∏è *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞*\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = removeKeyboard

	h.bot.Send(msg)
}

// handleAddCityName –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞
func (h *AdminHandlers) handleAddCityName(update tgbotapi.Update, name string) {
	userID := update.Message.From.ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –≥–æ—Ä–æ–¥ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
	existingCity, err := h.db.GetCityByName(name)
	if err == nil && existingCity != nil {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID,
			fmt.Sprintf("‚ùå –ì–æ—Ä–æ–¥ *%s* —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ä–µ–≥–∏–æ–Ω–µ *%s*!\n\n–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:", existingCity.Name, existingCity.Region))
		msg.ParseMode = "Markdown"
		h.bot.Send(msg)
		return
	}

	h.adminState[userID] = "add_city_region"

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
	userIDStr := strconv.FormatInt(userID, 10)
	h.tempData[userIDStr+"_new_city"] = &models.City{
		Name: strings.TrimSpace(name),
	}

	msg := tgbotapi.NewMessage(update.Message.Chat.ID,
		"üèôÔ∏è –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω (–æ–±–ª–∞—Å—Ç—å) –¥–ª—è –≥–æ—Ä–æ–¥–∞ *"+name+"*:")
	msg.ParseMode = "Markdown"
	h.bot.Send(msg)
}

// handleAddCityRegion –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ä–µ–≥–∏–æ–Ω–∞ –≥–æ—Ä–æ–¥–∞
func (h *AdminHandlers) handleAddCityRegion(update tgbotapi.Update, region string) {
	userID := update.Message.From.ID
	userIDStr := strconv.FormatInt(userID, 10)

	// –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
	cityInterface, exists := h.tempData[userIDStr+"_new_city"]
	if !exists {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ –≥–æ—Ä–æ–¥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
		h.bot.Send(msg)
		return
	}

	city := cityInterface.(*models.City)
	city.Region = strings.TrimSpace(region)

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥ –≤ –±–∞–∑—É
	err := h.db.CreateCity(city)
	if err != nil {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID,
			fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞: %s", err.Error()))
		h.bot.Send(msg)
		return
	}

	// –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
	delete(h.tempData, userIDStr+"_new_city")

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞–º–∏
	h.showCityManagement(update)

	msg := tgbotapi.NewMessage(update.Message.Chat.ID,
		fmt.Sprintf("‚úÖ –ì–æ—Ä–æ–¥ *%s* (%s) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! üèôÔ∏è", city.Name, city.Region))
	msg.ParseMode = "Markdown"
	h.bot.Send(msg)
}

// showCityList –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥–æ—Ä–æ–¥–æ–≤
func (h *AdminHandlers) showCityList(update tgbotapi.Update) {
	userID := update.Message.From.ID
	h.adminState[userID] = "city_list"

	cities, err := h.db.GetAllCities()
	if err != nil {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤")
		h.bot.Send(msg)
		return
	}

	if len(cities) == 0 {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "üì≠ –°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –ø—É—Å—Ç")
		h.bot.Send(msg)
		return
	}

	// –°–æ—Ä—Ç–∏—Ä—É–µ–º –≥–æ—Ä–æ–¥–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
	sort.Slice(cities, func(i, j int) bool {
		return cities[i].Name < cities[j].Name
	})

	var sb strings.Builder
	sb.WriteString("üèôÔ∏è *–°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤:*\n\n")

	for i, city := range cities {
		sb.WriteString(fmt.Sprintf("%d. *%s*\n", i+1, city.Name))
		sb.WriteString(fmt.Sprintf("   üìç –†–µ–≥–∏–æ–Ω: %s\n", city.Region))
		sb.WriteString(fmt.Sprintf("   üÜî ID: %d\n\n", city.ID))
	}

	sb.WriteString("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥–æ—Ä–æ–¥–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")

	keyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üîô –ù–∞–∑–∞–¥"),
		),
	)

	msg := tgbotapi.NewMessage(update.Message.Chat.ID, sb.String())
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = keyboard

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
	userIDStr := strconv.FormatInt(userID, 10)
	h.tempData[userIDStr+"_cities"] = cities

	h.bot.Send(msg)
}

// handleCityListSelection –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
func (h *AdminHandlers) handleCityListSelection(update tgbotapi.Update, text string) {
	userID := update.Message.From.ID
	userIDStr := strconv.FormatInt(userID, 10)

	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
	citiesInterface, exists := h.tempData[userIDStr+"_cities"]
	if !exists {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ –≥–æ—Ä–æ–¥–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
		h.bot.Send(msg)
		return
	}

	cities := citiesInterface.([]*models.City)

	// –ü–∞—Ä—Å–∏–º –Ω–æ–º–µ—Ä –≥–æ—Ä–æ–¥–∞
	cityNum, err := strconv.Atoi(text)
	if err != nil || cityNum < 1 || cityNum > len(cities) {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –≥–æ—Ä–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
		h.bot.Send(msg)
		return
	}

	selectedCity := cities[cityNum-1]
	h.showCityEditMenu(update, selectedCity)
}

// showCityEditMenu –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞
func (h *AdminHandlers) showCityEditMenu(update tgbotapi.Update, city *models.City) {
	userID := update.Message.From.ID
	h.adminState[userID] = "city_edit_menu"

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≥–æ—Ä–æ–¥–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
	userIDStr := strconv.FormatInt(userID, 10)
	h.tempData[userIDStr+"_city_edit"] = &models.CityEditData{
		CityID: city.ID,
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≥–æ—Ä–æ–¥—É
	vetsInCity, _ := h.getVetsCountByCity(city.ID)
	clinicsInCity, _ := h.getClinicsCountByCity(city.ID)

	var sb strings.Builder
	sb.WriteString(fmt.Sprintf("üèôÔ∏è *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–æ–º:* %s\n\n", city.Name))
	sb.WriteString(fmt.Sprintf("üìç –†–µ–≥–∏–æ–Ω: %s\n", city.Region))
	sb.WriteString(fmt.Sprintf("üÜî ID: %d\n", city.ID))
	sb.WriteString(fmt.Sprintf("üìÖ –î–æ–±–∞–≤–ª–µ–Ω: %s\n", city.CreatedAt.Format("02.01.2006")))
	sb.WriteString(fmt.Sprintf("üë• –í—Ä–∞—á–µ–π –≤ –≥–æ—Ä–æ–¥–µ: %d\n", vetsInCity))
	sb.WriteString(fmt.Sprintf("üè• –ö–ª–∏–Ω–∏–∫ –≤ –≥–æ—Ä–æ–¥–µ: %d\n\n", clinicsInCity))
	sb.WriteString("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")

	keyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ"),
			tgbotapi.NewKeyboardButton("üìç –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–≥–∏–æ–Ω"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üë• –ü–æ–∫–∞–∑–∞—Ç—å –≤—Ä–∞—á–µ–π"),
			tgbotapi.NewKeyboardButton("üè• –ü–æ–∫–∞–∑–∞—Ç—å –∫–ª–∏–Ω–∏–∫–∏"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≥–æ—Ä–æ–¥"),
			tgbotapi.NewKeyboardButton("üîô –ù–∞–∑–∞–¥"),
		),
	)

	msg := tgbotapi.NewMessage(update.Message.Chat.ID, sb.String())
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = keyboard

	h.bot.Send(msg)
}

// handleCityEditMenu –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –≥–æ—Ä–æ–¥–∞
func (h *AdminHandlers) handleCityEditMenu(update tgbotapi.Update, text string) {
	userID := update.Message.From.ID
	userIDStr := strconv.FormatInt(userID, 10)

	cityData, ok := h.tempData[userIDStr+"_city_edit"].(*models.CityEditData)
	if !ok || cityData == nil {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
		h.bot.Send(msg)
		h.showCityList(update)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞
	city, err := h.db.GetCityByID(cityData.CityID)
	if err != nil {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–∞")
		h.bot.Send(msg)
		h.showCityList(update)
		return
	}

	switch text {
	case "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ":
		h.adminState[userID] = "city_edit_name"
		cityData.Field = "name"
		cityData.CurrentValue = city.Name
		msg := tgbotapi.NewMessage(update.Message.Chat.ID,
			fmt.Sprintf("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞ *%s*:", city.Name))
		msg.ParseMode = "Markdown"
		h.bot.Send(msg)

	case "üìç –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–≥–∏–æ–Ω":
		h.adminState[userID] = "city_edit_region"
		cityData.Field = "region"
		cityData.CurrentValue = city.Region
		msg := tgbotapi.NewMessage(update.Message.Chat.ID,
			fmt.Sprintf("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–µ–≥–∏–æ–Ω –¥–ª—è –≥–æ—Ä–æ–¥–∞ *%s*:\n\n–¢–µ–∫—É—â–∏–π —Ä–µ–≥–∏–æ–Ω: %s", city.Name, city.Region))
		msg.ParseMode = "Markdown"
		h.bot.Send(msg)

	case "üë• –ü–æ–∫–∞–∑–∞—Ç—å –≤—Ä–∞—á–µ–π":
		h.showVetsInCity(update, city)

	case "üè• –ü–æ–∫–∞–∑–∞—Ç—å –∫–ª–∏–Ω–∏–∫–∏":
		h.showClinicsInCity(update, city)

	case "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≥–æ—Ä–æ–¥":
		h.startDeleteCity(update, city)

	case "üîô –ù–∞–∑–∞–¥":
		h.handleBackButton(update)

	default:
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
		h.bot.Send(msg)
	}
}

// handleCityEditName –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞
func (h *AdminHandlers) handleCityEditName(update tgbotapi.Update, text string) {
	userID := update.Message.From.ID
	userIDStr := strconv.FormatInt(userID, 10)

	cityData, ok := h.tempData[userIDStr+"_city_edit"].(*models.CityEditData)
	if !ok || cityData == nil {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
		h.bot.Send(msg)
		h.showCityList(update)
		return
	}

	newName := strings.TrimSpace(text)
	if newName == "" {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
		h.bot.Send(msg)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –≥–æ—Ä–æ–¥ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
	existingCity, err := h.db.GetCityByName(newName)
	if err == nil && existingCity != nil && existingCity.ID != cityData.CityID {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID,
			fmt.Sprintf("‚ùå –ì–æ—Ä–æ–¥ *%s* —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ä–µ–≥–∏–æ–Ω–µ *%s*!\n\n–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:", existingCity.Name, existingCity.Region))
		msg.ParseMode = "Markdown"
		h.bot.Send(msg)
		return
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
	err = h.updateCityField(cityData.CityID, "name", newName)
	if err != nil {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID,
			fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è: %s", err.Error()))
		h.bot.Send(msg)
	} else {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID,
			fmt.Sprintf("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: *%s*", newName))
		msg.ParseMode = "Markdown"
		h.bot.Send(msg)
	}

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞
	city, err := h.db.GetCityByID(cityData.CityID)
	if err == nil {
		h.showCityEditMenu(update, city)
	} else {
		h.showCityList(update)
	}
}

// handleCityEditRegion –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ –≥–æ—Ä–æ–¥–∞
func (h *AdminHandlers) handleCityEditRegion(update tgbotapi.Update, text string) {
	userID := update.Message.From.ID
	userIDStr := strconv.FormatInt(userID, 10)

	cityData, ok := h.tempData[userIDStr+"_city_edit"].(*models.CityEditData)
	if !ok || cityData == nil {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
		h.bot.Send(msg)
		h.showCityList(update)
		return
	}

	newRegion := strings.TrimSpace(text)
	if newRegion == "" {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "‚ùå –†–µ–≥–∏–æ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
		h.bot.Send(msg)
		return
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–≥–∏–æ–Ω –≥–æ—Ä–æ–¥–∞
	err := h.updateCityField(cityData.CityID, "region", newRegion)
	if err != nil {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID,
			fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–µ–≥–∏–æ–Ω–∞: %s", err.Error()))
		h.bot.Send(msg)
	} else {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID,
			fmt.Sprintf("‚úÖ –†–µ–≥–∏–æ–Ω –≥–æ—Ä–æ–¥–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: *%s*", newRegion))
		msg.ParseMode = "Markdown"
		h.bot.Send(msg)
	}

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞
	city, err := h.db.GetCityByID(cityData.CityID)
	if err == nil {
		h.showCityEditMenu(update, city)
	} else {
		h.showCityList(update)
	}
}

// startDeleteCity –Ω–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞
func (h *AdminHandlers) startDeleteCity(update tgbotapi.Update, city *models.City) {
	userID := update.Message.From.ID
	h.adminState[userID] = "city_confirm_delete"

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
	vetsCount, _ := h.getVetsCountByCity(city.ID)
	clinicsCount, _ := h.getClinicsCountByCity(city.ID)

	var warningText string
	if vetsCount > 0 || clinicsCount > 0 {
		warningText = fmt.Sprintf("\n\n‚ö†Ô∏è *–í–ù–ò–ú–ê–ù–ò–ï!* –í —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ –µ—Å—Ç—å:\n‚Ä¢ –í—Ä–∞—á–µ–π: %d\n‚Ä¢ –ö–ª–∏–Ω–∏–∫: %d\n\n–≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã!", vetsCount, clinicsCount)
	}

	keyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ"),
			tgbotapi.NewKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"),
		),
	)

	msg := tgbotapi.NewMessage(update.Message.Chat.ID,
		fmt.Sprintf("üóëÔ∏è *–£–¥–∞–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞*\n\n–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å –≥–æ—Ä–æ–¥:\n*%s* (%s)%s\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
			city.Name, city.Region, warningText))
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = keyboard

	h.bot.Send(msg)
}

// handleCityConfirmDelete –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞
func (h *AdminHandlers) handleCityConfirmDelete(update tgbotapi.Update, text string) {
	userID := update.Message.From.ID
	userIDStr := strconv.FormatInt(userID, 10)

	cityData, ok := h.tempData[userIDStr+"_city_edit"].(*models.CityEditData)
	if !ok || cityData == nil {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
		h.bot.Send(msg)
		h.showCityList(update)
		return
	}

	if text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ" {
		// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
		city, err := h.db.GetCityByID(cityData.CityID)
		if err != nil {
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–∞")
			h.bot.Send(msg)
			h.showCityList(update)
			return
		}

		err = h.deleteCity(cityData.CityID)
		if err != nil {
			msg := tgbotapi.NewMessage(update.Message.Chat.ID,
				fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞: %s", err.Error()))
			h.bot.Send(msg)
		} else {
			msg := tgbotapi.NewMessage(update.Message.Chat.ID,
				fmt.Sprintf("‚úÖ –ì–æ—Ä–æ–¥ *%s* —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω! üóëÔ∏è", city.Name))
			msg.ParseMode = "Markdown"
			h.bot.Send(msg)
		}
	} else {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
		h.bot.Send(msg)
	}

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ —Å–ø–∏—Å–∫—É –≥–æ—Ä–æ–¥–æ–≤
	h.showCityList(update)
}

// startSearchByRegion –Ω–∞—á–∏–Ω–∞–µ—Ç –ø–æ–∏—Å–∫ –ø–æ —Ä–µ–≥–∏–æ–Ω—É
func (h *AdminHandlers) startSearchByRegion(update tgbotapi.Update) {
	userID := update.Message.From.ID
	h.adminState[userID] = "city_search_region"

	removeKeyboard := tgbotapi.NewRemoveKeyboard(true)
	msg := tgbotapi.NewMessage(update.Message.Chat.ID,
		"üîç *–ü–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–æ–≤ –ø–æ —Ä–µ–≥–∏–æ–Ω—É*\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ –∏–ª–∏ –µ–≥–æ —á–∞—Å—Ç—å:")
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = removeKeyboard

	h.bot.Send(msg)
}

// handleVetSearchCity –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Ä–∞—á–µ–π
func (h *AdminHandlers) handleVetSearchCity(update tgbotapi.Update, text string) {
	userID := update.Message.From.ID
	userIDStr := strconv.FormatInt(userID, 10)

	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
	citiesInterface, exists := h.tempData[userIDStr+"_cities"]
	if !exists {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ –≥–æ—Ä–æ–¥–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
		h.bot.Send(msg)
		return
	}

	cities := citiesInterface.([]*models.City)

	// –ü–∞—Ä—Å–∏–º –Ω–æ–º–µ—Ä –≥–æ—Ä–æ–¥–∞
	cityNum, err := strconv.Atoi(text)
	if err != nil || cityNum < 1 || cityNum > len(cities) {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –≥–æ—Ä–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
		h.bot.Send(msg)
		return
	}

	selectedCity := cities[cityNum-1]

	// –ò—â–µ–º –≤—Ä–∞—á–µ–π –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ
	criteria := &models.SearchCriteria{
		CityID: selectedCity.ID,
	}

	vets, err := h.db.FindVetsByCity(criteria)
	if err != nil {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID,
			fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤—Ä–∞—á–µ–π –≤ –≥–æ—Ä–æ–¥–µ %s", selectedCity.Name))
		h.bot.Send(msg)
		return
	}

	if len(vets) == 0 {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID,
			fmt.Sprintf("üì≠ –í –≥–æ—Ä–æ–¥–µ *%s* –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤—Ä–∞—á–µ–π", selectedCity.Name))
		msg.ParseMode = "Markdown"
		h.bot.Send(msg)
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤—Ä–∞—á–µ–π
	var sb strings.Builder
	sb.WriteString(fmt.Sprintf("üë• *–í—Ä–∞—á–∏ –≤ –≥–æ—Ä–æ–¥–µ %s:*\n\n", selectedCity.Name))

	for i, vet := range vets {
		status := "‚úÖ"
		if !vet.IsActive {
			status = "‚ùå"
		}
		sb.WriteString(fmt.Sprintf("%s %d. %s %s\n", status, i+1, vet.FirstName, vet.LastName))
		sb.WriteString(fmt.Sprintf("   üìû %s\n", vet.Phone))

		// –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
		if len(vet.Specializations) > 0 {
			var specNames []string
			for _, spec := range vet.Specializations {
				specNames = append(specNames, spec.Name)
			}
			sb.WriteString(fmt.Sprintf("   üéØ %s\n", strings.Join(specNames, ", ")))
		}

		if vet.ExperienceYears.Valid {
			sb.WriteString(fmt.Sprintf("   üíº –û–ø—ã—Ç: %d –ª–µ—Ç\n", vet.ExperienceYears.Int64))
		}
		sb.WriteString("\n")
	}

	// –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
	delete(h.tempData, userIDStr+"_cities")

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Ä–∞—á–∞–º–∏
	h.adminState[userID] = "vet_management"

	keyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üîô –ù–∞–∑–∞–¥"),
		),
	)

	msg := tgbotapi.NewMessage(update.Message.Chat.ID, sb.String())
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = keyboard

	h.bot.Send(msg)
}

// showVetsInCity –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Ä–∞—á–µ–π –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ
func (h *AdminHandlers) showVetsInCity(update tgbotapi.Update, city *models.City) {
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∏—Å–∫ –≤—Ä–∞—á–µ–π –ø–æ –≥–æ—Ä–æ–¥—É
	criteria := &models.SearchCriteria{
		CityID: city.ID,
	}

	vets, err := h.db.FindVetsByCity(criteria)
	if err != nil {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID,
			fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤—Ä–∞—á–µ–π –≤ –≥–æ—Ä–æ–¥–µ %s", city.Name))
		h.bot.Send(msg)
		return
	}

	if len(vets) == 0 {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID,
			fmt.Sprintf("üì≠ –í –≥–æ—Ä–æ–¥–µ *%s* –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤—Ä–∞—á–µ–π", city.Name))
		msg.ParseMode = "Markdown"
		h.bot.Send(msg)
		return
	}

	var sb strings.Builder
	sb.WriteString(fmt.Sprintf("üë• *–í—Ä–∞—á–∏ –≤ –≥–æ—Ä–æ–¥–µ %s:*\n\n", city.Name))

	for i, vet := range vets {
		status := "‚úÖ"
		if !vet.IsActive {
			status = "‚ùå"
		}
		sb.WriteString(fmt.Sprintf("%s %d. %s %s\n", status, i+1, vet.FirstName, vet.LastName))
		sb.WriteString(fmt.Sprintf("   üìû %s\n", vet.Phone))

		// –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
		if len(vet.Specializations) > 0 {
			var specNames []string
			for _, spec := range vet.Specializations {
				specNames = append(specNames, spec.Name)
			}
			sb.WriteString(fmt.Sprintf("   üéØ %s\n", strings.Join(specNames, ", ")))
		}

		if vet.ExperienceYears.Valid {
			sb.WriteString(fmt.Sprintf("   üíº –û–ø—ã—Ç: %d –ª–µ—Ç\n", vet.ExperienceYears.Int64))
		}
		sb.WriteString("\n")
	}

	keyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –≥–æ—Ä–æ–¥—É"),
			tgbotapi.NewKeyboardButton("üîô –í –º–µ–Ω—é"),
		),
	)

	msg := tgbotapi.NewMessage(update.Message.Chat.ID, sb.String())
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = keyboard

	h.bot.Send(msg)
}

// showClinicsInCity –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–∏–Ω–∏–∫–∏ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ
func (h *AdminHandlers) showClinicsInCity(update tgbotapi.Update, city *models.City) {
	clinics, err := h.db.GetClinicsByCity(city.ID)
	if err != nil {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID,
			fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–ª–∏–Ω–∏–∫ –≤ –≥–æ—Ä–æ–¥–µ %s", city.Name))
		h.bot.Send(msg)
		return
	}

	if len(clinics) == 0 {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID,
			fmt.Sprintf("üì≠ –í –≥–æ—Ä–æ–¥–µ *%s* –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∫–ª–∏–Ω–∏–∫", city.Name))
		msg.ParseMode = "Markdown"
		h.bot.Send(msg)
		return
	}

	var sb strings.Builder
	sb.WriteString(fmt.Sprintf("üè• *–ö–ª–∏–Ω–∏–∫–∏ –≤ –≥–æ—Ä–æ–¥–µ %s:*\n\n", city.Name))

	for i, clinic := range clinics {
		status := "‚úÖ"
		if !clinic.IsActive {
			status = "‚ùå"
		}
		sb.WriteString(fmt.Sprintf("%s %d. %s\n", status, i+1, clinic.Name))
		sb.WriteString(fmt.Sprintf("   üìç %s\n", clinic.Address))

		if clinic.Phone.Valid {
			sb.WriteString(fmt.Sprintf("   üìû %s\n", clinic.Phone.String))
		}

		if clinic.WorkingHours.Valid {
			sb.WriteString(fmt.Sprintf("   üïê %s\n", clinic.WorkingHours.String))
		}
		sb.WriteString("\n")
	}

	keyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –≥–æ—Ä–æ–¥—É"),
			tgbotapi.NewKeyboardButton("üîô –í –º–µ–Ω—é"),
		),
	)

	msg := tgbotapi.NewMessage(update.Message.Chat.ID, sb.String())
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = keyboard

	h.bot.Send(msg)
}

// ========== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –ì–û–†–û–î–û–í ==========

// updateCityField –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª–µ –≥–æ—Ä–æ–¥–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
func (h *AdminHandlers) updateCityField(cityID int, field string, value string) error {
	var query string
	var err error

	switch field {
	case "name":
		query = "UPDATE cities SET name = $1 WHERE id = $2"
		_, err = h.db.GetDB().Exec(query, value, cityID)
	case "region":
		query = "UPDATE cities SET region = $1 WHERE id = $2"
		_, err = h.db.GetDB().Exec(query, value, cityID)
	default:
		return fmt.Errorf("unknown field: %s", field)
	}

	return err
}

// deleteCity —É–¥–∞–ª—è–µ—Ç –≥–æ—Ä–æ–¥ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
func (h *AdminHandlers) deleteCity(cityID int) error {
	// –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω—É–ª—è–µ–º city_id —É –≤—Ä–∞—á–µ–π
	_, err := h.db.GetDB().Exec("UPDATE veterinarians SET city_id = NULL WHERE city_id = $1", cityID)
	if err != nil {
		return err
	}

	// –û–±–Ω—É–ª—è–µ–º city_id —É –∫–ª–∏–Ω–∏–∫
	_, err = h.db.GetDB().Exec("UPDATE clinics SET city_id = NULL WHERE city_id = $1", cityID)
	if err != nil {
		return err
	}

	// –£–¥–∞–ª—è–µ–º –≥–æ—Ä–æ–¥
	_, err = h.db.GetDB().Exec("DELETE FROM cities WHERE id = $1", cityID)
	return err
}

// getCitiesCount –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Ä–æ–¥–æ–≤
func (h *AdminHandlers) getCitiesCount() (int, error) {
	query := "SELECT COUNT(*) FROM cities"
	var count int
	err := h.db.GetDB().QueryRow(query).Scan(&count)
	return count, err
}

// getVetsCountByCity –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ä–∞—á–µ–π –≤ –≥–æ—Ä–æ–¥–µ
func (h *AdminHandlers) getVetsCountByCity(cityID int) (int, error) {
	query := "SELECT COUNT(*) FROM veterinarians WHERE city_id = $1"
	var count int
	err := h.db.GetDB().QueryRow(query, cityID).Scan(&count)
	return count, err
}

// getClinicsCountByCity –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–Ω–∏–∫ –≤ –≥–æ—Ä–æ–¥–µ
func (h *AdminHandlers) getClinicsCountByCity(cityID int) (int, error) {
	query := "SELECT COUNT(*) FROM clinics WHERE city_id = $1"
	var count int
	err := h.db.GetDB().QueryRow(query, cityID).Scan(&count)
	return count, err
}

// handleVetEditCity –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –≤—Ä–∞—á–∞
func (h *AdminHandlers) handleVetEditCity(update tgbotapi.Update, text string) {
	userID := update.Message.From.ID
	userIDStr := strconv.FormatInt(userID, 10)

	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
	citiesInterface, exists := h.tempData[userIDStr+"_cities"]
	if !exists {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ –≥–æ—Ä–æ–¥–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
		h.bot.Send(msg)
		return
	}

	cities := citiesInterface.([]*models.City)

	// –ü–æ–ª—É—á–∞–µ–º ID –≤—Ä–∞—á–∞
	vetEditData, exists := h.tempData[userIDStr+"_vet_edit"]
	if !exists {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ –≤—Ä–∞—á–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
		h.bot.Send(msg)
		return
	}

	vetID := vetEditData.(*models.VetEditData).VetID

	// –ü–∞—Ä—Å–∏–º –Ω–æ–º–µ—Ä –≥–æ—Ä–æ–¥–∞
	cityNum, err := strconv.Atoi(text)
	if err != nil || cityNum < 1 || cityNum > len(cities) {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –≥–æ—Ä–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
		h.bot.Send(msg)
		return
	}

	selectedCity := cities[cityNum-1]

	// –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–∞—á–∞
	vet, err := h.db.GetVeterinarianByID(vetID)
	if err != nil {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤—Ä–∞—á–∞")
		h.bot.Send(msg)
		return
	}

	vet.CityID.Int64 = int64(selectedCity.ID)
	vet.CityID.Valid = true
	vet.City = selectedCity

	err = h.db.UpdateVeterinarian(vet)
	if err != nil {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞ –≤—Ä–∞—á–∞")
		h.bot.Send(msg)
		return
	}

	// –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
	delete(h.tempData, userIDStr+"_cities")

	msg := tgbotapi.NewMessage(update.Message.Chat.ID,
		fmt.Sprintf("‚úÖ –ì–æ—Ä–æ–¥ –≤—Ä–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: *%s* (%s) üèôÔ∏è", selectedCity.Name, selectedCity.Region))
	msg.ParseMode = "Markdown"
	h.bot.Send(msg)

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–Ω–æ–≤–∞
	h.showVetEditMenu(update, vet)
}

func (h *AdminHandlers) startChangeVetCity(update tgbotapi.Update, vet *models.Veterinarian) {
	userID := update.Message.From.ID
	h.adminState[userID] = "vet_edit_city"

	cities, err := h.db.GetAllCities()
	if err != nil {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤")
		h.bot.Send(msg)
		return
	}

	if len(cities) == 0 {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "üì≠ –ì–æ—Ä–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –≥–æ—Ä–æ–¥–∞.")
		h.bot.Send(msg)
		return
	}

	var sb strings.Builder
	sb.WriteString(fmt.Sprintf("üèôÔ∏è *–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥ –¥–ª—è –≤—Ä–∞—á–∞ %s %s:*\n\n", vet.FirstName, vet.LastName))

	for i, city := range cities {
		sb.WriteString(fmt.Sprintf("%d. %s (%s)\n", i+1, city.Name, city.Region))
	}

	sb.WriteString("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥–æ—Ä–æ–¥–∞:")

	keyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üîô –ù–∞–∑–∞–¥"),
		),
	)

	msg := tgbotapi.NewMessage(update.Message.Chat.ID, sb.String())
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = keyboard

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –∏ ID –≤—Ä–∞—á–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
	userIDStr := strconv.FormatInt(userID, 10)
	h.tempData[userIDStr+"_cities"] = cities
	h.tempData[userIDStr+"_vet_edit"] = &models.VetEditData{
		VetID: models.GetVetIDAsIntOrZero(vet),
	}

	h.bot.Send(msg)
}

func (h *AdminHandlers) handleCitySearchRegion(update tgbotapi.Update, region string) {
	cities, err := h.db.SearchCitiesByRegion(region)
	if err != nil {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≥–æ—Ä–æ–¥–æ–≤")
		h.bot.Send(msg)
		return
	}

	if len(cities) == 0 {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID,
			fmt.Sprintf("üì≠ –ì–æ—Ä–æ–¥–∞ –≤ —Ä–µ–≥–∏–æ–Ω–µ '*%s*' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", region))
		msg.ParseMode = "Markdown"
		h.bot.Send(msg)
		return
	}

	var sb strings.Builder
	sb.WriteString(fmt.Sprintf("üèôÔ∏è *–ì–æ—Ä–æ–¥–∞ –≤ —Ä–µ–≥–∏–æ–Ω–µ '%s':*\n\n", region))

	for i, city := range cities {
		sb.WriteString(fmt.Sprintf("%d. *%s*\n", i+1, city.Name))
		sb.WriteString(fmt.Sprintf("   üìç –†–µ–≥–∏–æ–Ω: %s\n", city.Region))
		sb.WriteString(fmt.Sprintf("   üÜî ID: %d\n\n", city.ID))
	}

	keyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üîô –ù–∞–∑–∞–¥"),
		),
	)

	msg := tgbotapi.NewMessage(update.Message.Chat.ID, sb.String())
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = keyboard

	h.bot.Send(msg)
}

func (h *AdminHandlers) GenerateImportTemplate(w http.ResponseWriter, r *http.Request) {
	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
	filename := fmt.Sprintf("vet_import_template_%s.xlsx", time.Now().Format("20060102_150405"))
	filepath := filepath.Join(os.TempDir(), filename)

	// –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ type assertion
	dbImpl, ok := h.db.(*database.Database)
	if !ok {
		http.Error(w, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", http.StatusInternalServerError)
		return
	}

	// –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω
	generator := imports.NewTemplateGenerator(dbImpl)
	err := generator.GenerateTemplate(filepath)
	if err != nil {
		http.Error(w, "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–∞: "+err.Error(), http.StatusInternalServerError)
		return
	}

	// –û—Ç–¥–∞–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	w.Header().Set("Content-Disposition", "attachment; filename="+filename)
	w.Header().Set("Content-Type", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
	http.ServeFile(w, r, filepath)

	// –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
	defer os.Remove(filepath)
}

func (h *AdminHandlers) HandleAdminDocument(update tgbotapi.Update) {
	userID := update.Message.From.ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏–º–ø–æ—Ä—Ç–∞
	state := h.adminState[userID]
	if state != "import_menu" && !strings.Contains(state, "import") {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID,
			"–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–º–ø–æ—Ä—Ç–∞ –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏")
		h.bot.Send(msg)
		return
	}

	fileID := update.Message.Document.FileID
	fileName := update.Message.Document.FileName

	InfoLog.Printf("üì• –§–∞–π–ª '%s' –ø–æ–ª—É—á–µ–Ω –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ (state: %s)", fileName, state)

	// –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
	fileConfig := tgbotapi.FileConfig{FileID: fileID}
	file, err := h.bot.GetFile(fileConfig)
	if err != nil {
		ErrorLog.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞: %v", err)
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞")
		h.bot.Send(msg)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª
	fileURL := file.Link(h.config.TelegramToken)
	resp, err := http.Get(fileURL)
	if err != nil {
		ErrorLog.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: %v", err)
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞")
		h.bot.Send(msg)
		return
	}
	defer resp.Body.Close()

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏–º–ø–æ—Ä—Ç–∞ –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é –∏ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
	if strings.Contains(strings.ToLower(fileName), "–≤—Ä–∞—á") || state == "import_veterinarians" {
		h.importVeterinarians(update, resp.Body, fileName)
	} else if strings.Contains(strings.ToLower(fileName), "–≥–æ—Ä–æ–¥") || state == "import_cities" {
		h.importCities(update, resp.Body, fileName)
	} else if strings.Contains(strings.ToLower(fileName), "–∫–ª–∏–Ω–∏–∫") || state == "import_clinics" {
		h.importClinics(update, resp.Body, fileName)
	} else {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID,
			"–ù–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞. –£—Ç–æ—á–Ω–∏—Ç–µ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ (–≤—Ä–∞—á/–≥–æ—Ä–æ–¥/–∫–ª–∏–Ω–∏–∫–∞)")
		h.bot.Send(msg)
	}
}

// –ú–µ—Ç–æ–¥ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤—Ä–∞—á–µ–π
func (h *AdminHandlers) importVeterinarians(update tgbotapi.Update, file io.Reader, fileName string) {
	msg := tgbotapi.NewMessage(update.Message.Chat.ID, "üîÑ –ù–∞—á–∏–Ω–∞—é –∏–º–ø–æ—Ä—Ç –≤—Ä–∞—á–µ–π...")
	h.bot.Send(msg)

	// –°–æ–∑–¥–∞–µ–º –∏–º–ø–æ—Ä—Ç–µ—Ä
	importer := imports.NewCSVImporter(h.db.(*database.Database))

	// –í—ã–ø–æ–ª–Ω—è–µ–º –∏–º–ø–æ—Ä—Ç
	result, err := importer.ImportVeterinarians(file, fileName, InfoLog, ErrorLog)
	if err != nil {
		ErrorLog.Printf("‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –≤—Ä–∞—á–µ–π: %v", err)
		msg := tgbotapi.NewMessage(update.Message.Chat.ID,
			fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: %v", err))
		h.bot.Send(msg)
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
	report := fmt.Sprintf("üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–º–ø–æ—Ä—Ç–∞ –≤—Ä–∞—á–µ–π:*\n\n"+
		"üìÅ –§–∞–π–ª: %s\n"+
		"üìä –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: %d\n"+
		"‚úÖ –£—Å–ø–µ—à–Ω–æ: %d\n"+
		"‚ùå –û—à–∏–±–æ–∫: %d\n\n",
		fileName, result.TotalRows, result.SuccessCount, result.ErrorCount)

	if result.ErrorCount > 0 {
		report += "*–û—à–∏–±–∫–∏:*\n"
		for _, importError := range result.Errors {
			report += fmt.Sprintf("–°—Ç—Ä–æ–∫–∞ %d: %s\n", importError.RowNumber, importError.Message)
		}
	}

	msg = tgbotapi.NewMessage(update.Message.Chat.ID, report)
	msg.ParseMode = "Markdown"
	h.bot.Send(msg)

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏
	h.adminState[update.Message.From.ID] = "main_menu"
	h.HandleAdmin(update)
}

// –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –∏–º–ø–æ—Ä—Ç–∞
func (h *AdminHandlers) importCities(update tgbotapi.Update, _ io.Reader, _ string) {
	msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ò–º–ø–æ—Ä—Ç –≥–æ—Ä–æ–¥–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
	h.bot.Send(msg)
}

func (h *AdminHandlers) importClinics(update tgbotapi.Update, _ io.Reader, _ string) {
	msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ò–º–ø–æ—Ä—Ç –∫–ª–∏–Ω–∏–∫ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
	h.bot.Send(msg)
}

// IsAdmin –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
func (h *AdminHandlers) IsAdmin(userID int64) bool {
	// –ó–∞—â–∏—Ç–∞ –æ—Ç nil pointer
	if h == nil {
		log.Printf("DEBUG: AdminHandlers is nil for user %d", userID)
		return false
	}
	if h.config == nil {
		log.Printf("DEBUG: config is nil for user %d", userID)
		return false
	}
	if h.config.AdminIDs == nil {
		log.Printf("DEBUG: AdminIDs is nil for user %d", userID)
		return false
	}

	log.Printf("DEBUG: Checking admin for user %d, AdminIDs: %v", userID, h.config.AdminIDs)

	for _, adminID := range h.config.AdminIDs {
		if adminID == userID {
			log.Printf("DEBUG: User %d found in admin list", userID)
			return true
		}
	}

	log.Printf("DEBUG: User %d not found in admin list: %v", userID, h.config.AdminIDs)
	return false
}

// handleVetListSelection –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤—Ä–∞—á–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
func (h *AdminHandlers) handleVetListSelection(update tgbotapi.Update, text string) {
	// –ü–∞—Ä—Å–∏–º –Ω–æ–º–µ—Ä –≤—Ä–∞—á–∞
	index, err := strconv.Atoi(text)
	if err != nil || index < 1 {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –≤—Ä–∞—á–∞")
		h.bot.Send(msg)
		return
	}

	vets, err := h.db.GetAllVeterinarians()
	if err != nil {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤—Ä–∞—á–µ–π")
		h.bot.Send(msg)
		return
	}

	if index > len(vets) {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í—Ä–∞—á —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω")
		h.bot.Send(msg)
		return
	}

	vet := vets[index-1]
	h.showVetEditMenu(update, vet)
}
