package handlers

import (
	"fmt"
	"log"
	"strconv"
	"strings"

	"github.com/drerr0r/vetbot/internal/database"
	"github.com/drerr0r/vetbot/internal/models"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// AdminHandlers —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
type AdminHandlers struct {
	bot        *tgbotapi.BotAPI
	db         *database.Database
	adminState map[int64]string  // –•—Ä–∞–Ω–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω—Å–∫–æ–π —Å–µ—Å—Å–∏–∏
	tempData   map[string]string // –•—Ä–∞–Ω–∏—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–∫–ª—é—á: "userID_field", –∑–Ω–∞—á–µ–Ω–∏–µ: –¥–∞–Ω–Ω—ã–µ)
}

// NewAdminHandlers —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä AdminHandlers
func NewAdminHandlers(bot *tgbotapi.BotAPI, db *database.Database) *AdminHandlers {
	return &AdminHandlers{
		bot:        bot,
		db:         db,
		adminState: make(map[int64]string),
		tempData:   make(map[string]string),
	}
}

// HandleAdmin –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω—Å–∫—É—é –ø–∞–Ω–µ–ª—å
func (h *AdminHandlers) HandleAdmin(update tgbotapi.Update) {
	userID := update.Message.From.ID
	h.adminState[userID] = "main_menu"

	keyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–∞—á–∞–º–∏"),
			tgbotapi.NewKeyboardButton("üè• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–Ω–∏–∫–∞–º–∏"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
			tgbotapi.NewKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚ùå –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏"),
		),
	)
	keyboard.OneTimeKeyboard = true

	msg := tgbotapi.NewMessage(update.Message.Chat.ID,
		"üîß *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = keyboard

	h.bot.Send(msg)
}

// HandleAdminMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω—Å–∫–æ–º —Ä–µ–∂–∏–º–µ
func (h *AdminHandlers) HandleAdminMessage(update tgbotapi.Update) {
	userID := update.Message.From.ID
	text := update.Message.Text
	state := h.adminState[userID]

	log.Printf("Admin message from %d: %s (state: %s)", userID, text, state)

	switch state {
	case "main_menu":
		h.handleMainMenu(update, text)
	case "add_vet_name":
		h.handleAddVetName(update, text)
	case "add_vet_phone":
		h.handleAddVetPhone(update, text)
	case "add_vet_specializations":
		h.handleAddVetSpecializations(update, text)
	default:
		h.handleMainMenu(update, text)
	}
}

// handleMainMenu –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏
func (h *AdminHandlers) handleMainMenu(update tgbotapi.Update, text string) {
	switch text {
	case "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–∞—á–∞–º–∏":
		h.showVetManagement(update)
	case "üè• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–Ω–∏–∫–∞–º–∏":
		h.showClinicManagement(update)
	case "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
		h.HandleStats(update)
	case "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
		h.showSettings(update)
	case "‚ùå –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏":
		h.closeAdmin(update)
	case "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤—Ä–∞—á–∞":
		h.startAddVet(update)
	case "üìã –°–ø–∏—Å–æ–∫ –≤—Ä–∞—á–µ–π":
		h.showVetList(update)
	default:
		msg := tgbotapi.NewMessage(update.Message.Chat.ID,
			"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏")
		h.bot.Send(msg)
	}
}

// showVetManagement –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Ä–∞—á–∞–º–∏
func (h *AdminHandlers) showVetManagement(update tgbotapi.Update) {
	userID := update.Message.From.ID
	h.adminState[userID] = "vet_management"

	keyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤—Ä–∞—á–∞"),
			tgbotapi.NewKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –≤—Ä–∞—á–µ–π"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üîô –ù–∞–∑–∞–¥"),
		),
	)

	msg := tgbotapi.NewMessage(update.Message.Chat.ID,
		"üë• *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–∞—á–∞–º–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = keyboard

	h.bot.Send(msg)
}

// startAddVet –Ω–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Ä–∞—á–∞
func (h *AdminHandlers) startAddVet(update tgbotapi.Update) {
	userID := update.Message.From.ID
	h.adminState[userID] = "add_vet_name"

	removeKeyboard := tgbotapi.NewRemoveKeyboard(true)
	msg := tgbotapi.NewMessage(update.Message.Chat.ID,
		"üë®‚Äç‚öïÔ∏è *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤—Ä–∞—á–∞*\n\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤—Ä–∞—á–∞:")
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = removeKeyboard

	h.bot.Send(msg)
}

// handleAddVetName –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∏–º–µ–Ω–∏ –≤—Ä–∞—á–∞
func (h *AdminHandlers) handleAddVetName(update tgbotapi.Update, name string) {
	userID := update.Message.From.ID
	h.adminState[userID] = "add_vet_phone"

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
	userIDStr := strconv.FormatInt(userID, 10)
	h.tempData[userIDStr+"_name"] = name

	msg := tgbotapi.NewMessage(update.Message.Chat.ID,
		"üìû –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –≤—Ä–∞—á–∞:")
	msg.ParseMode = "Markdown"

	h.bot.Send(msg)
}

// handleAddVetPhone –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤—Ä–∞—á–∞
func (h *AdminHandlers) handleAddVetPhone(update tgbotapi.Update, phone string) {
	userID := update.Message.From.ID
	h.adminState[userID] = "add_vet_specializations"

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
	userIDStr := strconv.FormatInt(userID, 10)
	h.tempData[userIDStr+"_phone"] = phone

	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞
	specializations, err := h.db.GetAllSpecializations()
	if err != nil {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID,
			"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π")
		h.bot.Send(msg)
		return
	}

	var sb strings.Builder
	sb.WriteString("üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Ä–∞—á–∞ (–≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):\n\n")

	for i, spec := range specializations {
		sb.WriteString(fmt.Sprintf("%d. %s\n", i+1, spec.Name))
	}

	msg := tgbotapi.NewMessage(update.Message.Chat.ID, sb.String())
	h.bot.Send(msg)
}

// handleAddVetSpecializations –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π
func (h *AdminHandlers) handleAddVetSpecializations(update tgbotapi.Update, specsText string) {
	userID := update.Message.From.ID

	// –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
	userIDStr := strconv.FormatInt(userID, 10)
	name := h.tempData[userIDStr+"_name"]
	phone := h.tempData[userIDStr+"_phone"]

	if name == "" || phone == "" {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID,
			"–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –≤—Ä–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
		h.bot.Send(msg)
		h.startAddVet(update)
		return
	}

	// –°–æ–∑–¥–∞–µ–º –≤—Ä–∞—á–∞
	vet := &models.Veterinarian{
		FirstName: name,
		LastName:  "", // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ –¥–ª—è —Ñ–∞–º–∏–ª–∏–∏
		Phone:     phone,
		IsActive:  true,
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–∞—á–∞ –≤ –±–∞–∑—É
	err := h.addVeterinarian(vet, specsText)
	if err != nil {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID,
			fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤—Ä–∞—á–∞: %v", err))
		h.bot.Send(msg)
	} else {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID,
			"‚úÖ –í—Ä–∞—á —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
		h.bot.Send(msg)
	}

	// –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
	delete(h.tempData, userIDStr+"_name")
	delete(h.tempData, userIDStr+"_phone")

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
	h.adminState[userID] = "main_menu"
	h.showVetManagement(update)
}

// addVeterinarian –¥–æ–±–∞–≤–ª—è–µ—Ç –≤—Ä–∞—á–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
func (h *AdminHandlers) addVeterinarian(vet *models.Veterinarian, specsText string) error {
	// –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–∞—á–∞ –≤ –±–∞–∑—É
	query := `INSERT INTO veterinarians (first_name, last_name, phone, is_active) 
	          VALUES ($1, $2, $3, $4) RETURNING id`

	err := h.db.GetDB().QueryRow(query, vet.FirstName, vet.LastName, vet.Phone, vet.IsActive).
		Scan(&vet.ID)
	if err != nil {
		return err
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
	specIDs := strings.Split(specsText, ",")
	for _, specIDStr := range specIDs {
		specID, err := strconv.Atoi(strings.TrimSpace(specIDStr))
		if err == nil && specID > 0 {
			// –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑—å –≤—Ä–∞—á-—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
			_, err = h.db.GetDB().Exec(
				"INSERT INTO vet_specializations (vet_id, specialization_id) VALUES ($1, $2)",
				vet.ID, specID,
			)
			if err != nil {
				log.Printf("Error adding specialization %d: %v", specID, err)
			}
		}
	}

	return nil
}

// showVetList –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Ä–∞—á–µ–π
func (h *AdminHandlers) showVetList(update tgbotapi.Update) {
	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –≤—Ä–∞—á–µ–π —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã
	specializations, err := h.db.GetAllSpecializations()
	if err != nil {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
		h.bot.Send(msg)
		return
	}

	var sb strings.Builder
	sb.WriteString("üë• *–°–ø–∏—Å–æ–∫ –≤—Ä–∞—á–µ–π:*\n\n")

	for _, spec := range specializations {
		vets, err := h.db.GetVeterinariansBySpecialization(spec.ID)
		if err != nil {
			continue
		}

		if len(vets) > 0 {
			sb.WriteString(fmt.Sprintf("üè• *%s:*\n", spec.Name))
			for _, vet := range vets {
				sb.WriteString(fmt.Sprintf("‚Ä¢ %s %s - %s\n", vet.FirstName, vet.LastName, vet.Phone))
			}
			sb.WriteString("\n")
		}
	}

	msg := tgbotapi.NewMessage(update.Message.Chat.ID, sb.String())
	msg.ParseMode = "Markdown"
	h.bot.Send(msg)
}

// showClinicManagement –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–Ω–∏–∫–∞–º–∏
func (h *AdminHandlers) showClinicManagement(update tgbotapi.Update) {
	userID := update.Message.From.ID
	h.adminState[userID] = "clinic_management"

	keyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–Ω–∏–∫"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üîô –ù–∞–∑–∞–¥"),
		),
	)

	clinics, err := h.db.GetAllClinics()
	if err != nil {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–ª–∏–Ω–∏–∫")
		h.bot.Send(msg)
		return
	}

	var sb strings.Builder
	sb.WriteString("üè• *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–Ω–∏–∫–∞–º–∏*\n\n")
	sb.WriteString(fmt.Sprintf("–í—Å–µ–≥–æ –∫–ª–∏–Ω–∏–∫: %d\n\n", len(clinics)))
	sb.WriteString("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")

	msg := tgbotapi.NewMessage(update.Message.Chat.ID, sb.String())
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = keyboard

	h.bot.Send(msg)
}

// showSettings –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
func (h *AdminHandlers) showSettings(update tgbotapi.Update) {
	userCount, _ := h.getUserCount()
	vetCount, _ := h.getVetCount()
	clinicCount, _ := h.getClinicCount()

	msg := tgbotapi.NewMessage(update.Message.Chat.ID,
		fmt.Sprintf(`‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã*

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %d
‚Ä¢ –í—Ä–∞—á–µ–π: %d
‚Ä¢ –ö–ª–∏–Ω–∏–∫: %d

–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä—è–º—ã–µ SQL-–∑–∞–ø—Ä–æ—Å—ã –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.`, userCount, vetCount, clinicCount))
	msg.ParseMode = "Markdown"
	h.bot.Send(msg)
}

// HandleStats –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞
func (h *AdminHandlers) HandleStats(update tgbotapi.Update) {
	userCount, _ := h.getUserCount()
	vetCount, _ := h.getVetCount()
	requestCount, _ := h.getRequestCount()

	statsMsg := fmt.Sprintf(`üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞*

üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %d
üë®‚Äç‚öïÔ∏è –í—Ä–∞—á–µ–π –≤ –±–∞–∑–µ: %d
üìû –ó–∞–ø—Ä–æ—Å–æ–≤: %d

–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ ‚úÖ`, userCount, vetCount, requestCount)

	msg := tgbotapi.NewMessage(update.Message.Chat.ID, statsMsg)
	msg.ParseMode = "Markdown"
	h.bot.Send(msg)
}

// closeAdmin –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω—Å–∫—É—é –ø–∞–Ω–µ–ª—å
func (h *AdminHandlers) closeAdmin(update tgbotapi.Update) {
	userID := update.Message.From.ID

	// –û—á–∏—â–∞–µ–º –≤—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	userIDStr := strconv.FormatInt(userID, 10)
	delete(h.adminState, userID)
	delete(h.tempData, userIDStr+"_name")
	delete(h.tempData, userIDStr+"_phone")

	removeKeyboard := tgbotapi.NewRemoveKeyboard(true)
	msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å –∑–∞–∫—Ä—ã—Ç–∞")
	msg.ReplyMarkup = removeKeyboard
	h.bot.Send(msg)
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
func (h *AdminHandlers) getUserCount() (int, error) {
	query := "SELECT COUNT(*) FROM users"
	var count int
	err := h.db.GetDB().QueryRow(query).Scan(&count)
	return count, err
}

func (h *AdminHandlers) getVetCount() (int, error) {
	query := "SELECT COUNT(*) FROM veterinarians WHERE is_active = true"
	var count int
	err := h.db.GetDB().QueryRow(query).Scan(&count)
	return count, err
}

func (h *AdminHandlers) getClinicCount() (int, error) {
	query := "SELECT COUNT(*) FROM clinics"
	var count int
	err := h.db.GetDB().QueryRow(query).Scan(&count)
	return count, err
}

func (h *AdminHandlers) getRequestCount() (int, error) {
	query := "SELECT COUNT(*) FROM user_requests"
	var count int
	err := h.db.GetDB().QueryRow(query).Scan(&count)
	return count, err
}
