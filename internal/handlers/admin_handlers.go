package handlers

import (
	"fmt"
	"log"
	"strings"

	"github.com/drerr0r/vetbot/internal/database"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// AdminHandlers —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
type AdminHandlers struct {
	bot *tgbotapi.BotAPI
	db  *database.Database
}

// NewAdminHandlers —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä AdminHandlers
func NewAdminHandlers(bot *tgbotapi.BotAPI, db *database.Database) *AdminHandlers {
	return &AdminHandlers{
		bot: bot,
		db:  db,
	}
}

// HandleAdmin –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω—Å–∫—É—é –ø–∞–Ω–µ–ª—å
func (h *AdminHandlers) HandleAdmin(update tgbotapi.Update) {
	keyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
			tgbotapi.NewKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üè• –ö–ª–∏–Ω–∏–∫–∏"),
			tgbotapi.NewKeyboardButton("üë®‚Äç‚öïÔ∏è –í—Ä–∞—á–∏"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω–∫—É"),
		),
	)
	keyboard.OneTimeKeyboard = true

	msg := tgbotapi.NewMessage(update.Message.Chat.ID,
		"üîß *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = keyboard

	h.bot.Send(msg)
}

// HandleStats –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞
func (h *AdminHandlers) HandleStats(update tgbotapi.Update) {
	// –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
	userCount, err := h.getUserCount()
	if err != nil {
		log.Printf("Error getting user count: %v", err)
		userCount = 0
	}

	requestCount, err := h.getRequestCount()
	if err != nil {
		log.Printf("Error getting request count: %v", err)
		requestCount = 0
	}

	vetCount, err := h.getVetCount()
	if err != nil {
		log.Printf("Error getting vet count: %v", err)
		vetCount = 0
	}

	statsMsg := fmt.Sprintf(`üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞*

üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %d
üìû –ó–∞–ø—Ä–æ—Å–æ–≤: %d
üë®‚Äç‚öïÔ∏è –í—Ä–∞—á–µ–π –≤ –±–∞–∑–µ: %d

*–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:*
- –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ
- –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –≤ –Ω–æ—Ä–º–µ`, userCount, requestCount, vetCount)

	msg := tgbotapi.NewMessage(update.Message.Chat.ID, statsMsg)
	msg.ParseMode = "Markdown"
	h.bot.Send(msg)
}

// HandleAdminMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω—Å–∫–æ–º —Ä–µ–∂–∏–º–µ
func (h *AdminHandlers) HandleAdminMessage(update tgbotapi.Update) {
	text := update.Message.Text

	switch text {
	case "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
		h.HandleStats(update)
	case "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏":
		h.handleUsers(update)
	case "üè• –ö–ª–∏–Ω–∏–∫–∏":
		h.handleClinicsAdmin(update)
	case "üë®‚Äç‚öïÔ∏è –í—Ä–∞—á–∏":
		h.handleVetsAdmin(update)
	case "‚ùå –ó–∞–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω–∫—É":
		h.closeAdmin(update)
	default:
		msg := tgbotapi.NewMessage(update.Message.Chat.ID,
			"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /admin –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞")
		h.bot.Send(msg)
	}
}

// handleUsers –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
func (h *AdminHandlers) handleUsers(update tgbotapi.Update) {
	userCount, err := h.getUserCount()
	if err != nil {
		log.Printf("Error getting user count: %v", err)
		userCount = 0
	}

	msg := tgbotapi.NewMessage(update.Message.Chat.ID,
		fmt.Sprintf("üë• *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏*\n\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %d\n\n–î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.", userCount))
	msg.ParseMode = "Markdown"
	h.bot.Send(msg)
}

// handleClinicsAdmin –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–Ω–∏–∫–∞–º–∏
func (h *AdminHandlers) handleClinicsAdmin(update tgbotapi.Update) {
	clinics, err := h.db.GetAllClinics()
	if err != nil {
		log.Printf("Error getting clinics: %v", err)
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–ª–∏–Ω–∏–∫")
		h.bot.Send(msg)
		return
	}

	var sb strings.Builder
	sb.WriteString("üè• *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–Ω–∏–∫–∞–º–∏*\n\n")

	for i, clinic := range clinics {
		sb.WriteString(fmt.Sprintf("*%d. %s*\n", i+1, clinic.Name))
		sb.WriteString(fmt.Sprintf("üìç %s\n", clinic.Address))
		sb.WriteString(fmt.Sprintf("üìû %s\n", clinic.Phone))
		sb.WriteString("---\n")
	}

	sb.WriteString("\n–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–Ω–∏–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä—è–º—ã–µ SQL-–∑–∞–ø—Ä–æ—Å—ã –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")

	msg := tgbotapi.NewMessage(update.Message.Chat.ID, sb.String())
	msg.ParseMode = "Markdown"
	h.bot.Send(msg)
}

// handleVetsAdmin –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–∞—á–∞–º–∏
func (h *AdminHandlers) handleVetsAdmin(update tgbotapi.Update) {
	specializations, err := h.db.GetAllSpecializations()
	if err != nil {
		log.Printf("Error getting specializations: %v", err)
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π")
		h.bot.Send(msg)
		return
	}

	var sb strings.Builder
	sb.WriteString("üë®‚Äç‚öïÔ∏è *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–∞—á–∞–º–∏*\n\n")
	sb.WriteString("*–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:*\n")

	for _, spec := range specializations {
		vets, err := h.db.GetVeterinariansBySpecialization(spec.ID)
		if err != nil {
			continue
		}
		sb.WriteString(fmt.Sprintf("‚Ä¢ %s: %d –≤—Ä–∞—á–µ–π\n", spec.Name, len(vets)))
	}

	sb.WriteString("\n–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/–∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤—Ä–∞—á–µ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä—è–º—ã–µ SQL-–∑–∞–ø—Ä–æ—Å—ã –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")

	msg := tgbotapi.NewMessage(update.Message.Chat.ID, sb.String())
	msg.ParseMode = "Markdown"
	h.bot.Send(msg)
}

// closeAdmin –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω—Å–∫—É—é –ø–∞–Ω–µ–ª—å
func (h *AdminHandlers) closeAdmin(update tgbotapi.Update) {
	removeKeyboard := tgbotapi.NewRemoveKeyboard(true)
	msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å –∑–∞–∫—Ä—ã—Ç–∞")
	msg.ReplyMarkup = removeKeyboard
	h.bot.Send(msg)
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
func (h *AdminHandlers) getUserCount() (int, error) {
	query := "SELECT COUNT(*) FROM users"
	var count int
	err := h.db.GetDB().QueryRow(query).Scan(&count)
	return count, err
}

func (h *AdminHandlers) getRequestCount() (int, error) {
	query := "SELECT COUNT(*) FROM user_requests"
	var count int
	err := h.db.GetDB().QueryRow(query).Scan(&count)
	return count, err
}

func (h *AdminHandlers) getVetCount() (int, error) {
	query := "SELECT COUNT(*) FROM veterinarians WHERE is_active = true"
	var count int
	err := h.db.GetDB().QueryRow(query).Scan(&count)
	return count, err
}
