package handlers

import (
	"fmt"
	"html"
	"strings"
	"time"

	"github.com/drerr0r/vetbot/internal/models"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// ReviewHandlers —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –æ—Ç–∑—ã–≤–æ–≤
type ReviewHandlers struct {
	bot          BotAPI
	db           Database
	adminIDs     []int64
	stateManager *StateManager
}

// NewReviewHandlers —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä ReviewHandlers
func NewReviewHandlers(bot BotAPI, db Database, adminIDs []int64, stateManager *StateManager) *ReviewHandlers {
	return &ReviewHandlers{
		bot:          bot,
		db:           db,
		adminIDs:     adminIDs,
		stateManager: stateManager,
	}
}

// HandleReviewCancel –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞
func (h *ReviewHandlers) HandleReviewCancel(update tgbotapi.Update) {
	userID := update.CallbackQuery.From.ID

	// –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –¥–∞–Ω–Ω—ã–µ
	h.stateManager.ClearUserState(userID)
	h.stateManager.ClearUserData(userID)

	msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
	h.bot.Send(msg)

	// –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
	callbackConfig := tgbotapi.NewCallback(update.CallbackQuery.ID, "")
	h.bot.Request(callbackConfig)
}

// HandleAddReview –Ω–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞
func (h *ReviewHandlers) HandleAddReview(update tgbotapi.Update, vetID int) {
	if update.CallbackQuery == nil || update.CallbackQuery.Message == nil {
		ErrorLog.Printf("HandleAddReview: CallbackQuery or Message is nil")
		return
	}

	chatID := update.CallbackQuery.Message.Chat.ID
	userID := update.CallbackQuery.From.ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–≤–ª—è–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –æ—Ç–∑—ã–≤ —ç—Ç–æ–º—É –≤—Ä–∞—á—É
	hasReview, err := h.db.HasUserReviewForVet(int(userID), vetID)
	if err != nil {
		h.sendErrorMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–∑—ã–≤–æ–≤")
		return
	}

	if hasReview {
		msg := tgbotapi.NewMessage(chatID,
			"‚ùå –í—ã —É–∂–µ –æ—Å—Ç–∞–≤–ª—è–ª–∏ –æ—Ç–∑—ã–≤ —ç—Ç–æ–º—É –≤—Ä–∞—á—É. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ—Ç–∑—ã–≤.")
		h.bot.Send(msg)
		return
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞
	h.stateManager.SetUserData(userID, "review_vet_id", vetID)
	h.stateManager.SetUserState(userID, "review_rating")

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ä–µ–π—Ç–∏–Ω–≥–∞
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚≠ê", "review_rate_1"),
			tgbotapi.NewInlineKeyboardButtonData("‚≠ê‚≠ê", "review_rate_2"),
			tgbotapi.NewInlineKeyboardButtonData("‚≠ê‚≠ê‚≠ê", "review_rate_3"),
			tgbotapi.NewInlineKeyboardButtonData("‚≠ê‚≠ê‚≠ê‚≠ê", "review_rate_4"),
			tgbotapi.NewInlineKeyboardButtonData("‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê", "review_rate_5"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—Ç–º–µ–Ω–∞", "review_cancel"),
		),
	)

	msg := tgbotapi.NewMessage(chatID,
		"üìù *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –≤—Ä–∞—á—É (1-5 –∑–≤–µ–∑–¥):")
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = keyboard
	h.bot.Send(msg)
}

// –í HandleReviewRating –¥–æ–±–∞–≤—å—Ç–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ:
func (h *ReviewHandlers) HandleReviewRating(update tgbotapi.Update, rating int) {
	callback := update.CallbackQuery
	chatID := callback.Message.Chat.ID
	userID := callback.From.ID

	InfoLog.Printf("HandleReviewRating: user %d selected rating %d", userID, rating)

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
	h.stateManager.SetUserData(userID, "review_rating", rating)
	h.stateManager.SetUserState(userID, "review_comment")

	InfoLog.Printf("HandleReviewRating: user %d state set to 'review_comment'", userID)

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	editMsg := tgbotapi.NewEditMessageText(chatID, callback.Message.MessageID,
		fmt.Sprintf("üìù *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞*\n\n‚úÖ –û—Ü–µ–Ω–∫–∞: %d/5 ‚≠ê\n\n–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ (–º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤):", rating))
	editMsg.ParseMode = "Markdown"

	// –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
	emptyKeyboard := tgbotapi.NewInlineKeyboardMarkup()
	editMsg.ReplyMarkup = &emptyKeyboard

	_, err := h.bot.Send(editMsg)
	if err != nil {
		ErrorLog.Printf("Error editing message in HandleReviewRating: %v", err)
	}

	// –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
	callbackConfig := tgbotapi.NewCallback(callback.ID, fmt.Sprintf("‚úÖ –í—ã–±—Ä–∞–Ω–æ %d –∑–≤–µ–∑–¥", rating))
	h.bot.Request(callbackConfig)
}

// –í HandleReviewComment –¥–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:
func (h *ReviewHandlers) HandleReviewComment(update tgbotapi.Update, comment string) {
	userID := update.Message.From.ID
	chatID := update.Message.Chat.ID

	InfoLog.Printf("HandleReviewComment: user %d submitted comment: %s", userID, comment)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
	if len(comment) > 500 {
		msg := tgbotapi.NewMessage(chatID, "‚ùå –û—Ç–∑—ã–≤ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤). –°–æ–∫—Ä–∞—Ç–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–Ω–æ–≤–∞.")
		h.bot.Send(msg)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
	vetID, ok := h.stateManager.GetUserDataInt(userID, "review_vet_id")
	if !ok {
		ErrorLog.Printf("HandleReviewComment: review_vet_id not found for user %d", userID)
		h.sendErrorMessage(chatID, "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ –≤—Ä–∞—á–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
		h.stateManager.ClearUserState(userID)
		return
	}

	rating, ok := h.stateManager.GetUserDataInt(userID, "review_rating")
	if !ok {
		ErrorLog.Printf("HandleReviewComment: review_rating not found for user %d", userID)
		h.sendErrorMessage(chatID, "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–π—Ç–∏–Ω–≥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
		h.stateManager.ClearUserState(userID)
		return
	}

	InfoLog.Printf("HandleReviewComment: user %d, vetID %d, rating %d, comment length %d",
		userID, vetID, rating, len(comment))

	// –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
	user, err := h.db.GetUserByTelegramID(userID)
	if err != nil {
		ErrorLog.Printf("HandleReviewComment: user not found in database: %v", err)
		h.sendErrorMessage(chatID, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
		h.stateManager.ClearUserState(userID)
		return
	}

	// –°–æ–∑–¥–∞–µ–º –æ—Ç–∑—ã–≤
	review := &models.Review{
		VeterinarianID: vetID,
		UserID:         user.ID,
		Rating:         rating,
		Comment:        strings.TrimSpace(comment),
		Status:         "pending", // –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
		CreatedAt:      time.Now(),
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
	err = h.db.CreateReview(review)
	if err != nil {
		ErrorLog.Printf("HandleReviewComment: error saving review: %v", err)
		h.sendErrorMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞")
		h.stateManager.ClearUserState(userID)
		return
	}

	// –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –¥–∞–Ω–Ω—ã–µ
	h.stateManager.ClearUserState(userID)
	h.stateManager.ClearUserData(userID)

	InfoLog.Printf("HandleReviewComment: review saved successfully for user %d", userID)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
	msg := tgbotapi.NewMessage(chatID,
		"‚úÖ *–û—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!*\n\n–í–∞—à –æ—Ç–∑—ã–≤ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º. –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–∫–ª–∞–¥!")
	msg.ParseMode = "Markdown"
	h.bot.Send(msg)

	// –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–º –æ—Ç–∑—ã–≤–µ
	h.notifyAdminsAboutNewReview(review)
}

// HandleShowReviews –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–∑—ã–≤—ã –æ –≤—Ä–∞—á–µ
func (h *ReviewHandlers) HandleShowReviews(update tgbotapi.Update, vetID int) {
	chatID := update.CallbackQuery.Message.Chat.ID

	// –ü–æ–ª—É—á–∞–µ–º –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã
	reviews, err := h.db.GetApprovedReviewsByVet(vetID)
	if err != nil {
		h.sendErrorMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç–∑—ã–≤–æ–≤")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
	stats, err := h.db.GetReviewStats(vetID)
	if err != nil {
		h.sendErrorMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
		return
	}

	var message strings.Builder

	if len(reviews) == 0 {
		message.WriteString("üìù *–û—Ç–∑—ã–≤—ã –æ –≤—Ä–∞—á–µ*\n\n")
		message.WriteString("–ü–æ–∫–∞ –Ω–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤.\n\n")
	} else {
		message.WriteString(fmt.Sprintf("üìù *–û—Ç–∑—ã–≤—ã –æ –≤—Ä–∞—á–µ*\n\n‚≠ê –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: %.1f/5\nüìä –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: %d\n\n",
			stats.AverageRating, stats.ApprovedReviews))

		for i, review := range reviews {
			if i >= 10 { // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–∫–∞–∑ 10 –æ—Ç–∑—ã–≤–∞–º–∏
				message.WriteString(fmt.Sprintf("\n... –∏ –µ—â–µ %d –æ—Ç–∑—ã–≤–æ–≤", len(reviews)-10))
				break
			}

			message.WriteString(fmt.Sprintf("**%d. %s** ‚≠ê\n", i+1, strings.Repeat("‚≠ê", review.Rating)))
			message.WriteString(fmt.Sprintf("üí¨ %s\n", html.EscapeString(review.Comment)))
			if review.User != nil {
				message.WriteString(fmt.Sprintf("üë§ %s\n", html.EscapeString(review.User.FirstName)))
			}
			message.WriteString(fmt.Sprintf("üìÖ %s\n\n", review.CreatedAt.Format("02.01.2006")))
		}
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìù –î–æ–±–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", fmt.Sprintf("add_review_%d", vetID)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥ –∫ –≤—Ä–∞—á—É", fmt.Sprintf("vet_details_%d", vetID)),
		),
	)

	msg := tgbotapi.NewMessage(chatID, message.String())
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = keyboard
	h.bot.Send(msg)

	// –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
	if update.CallbackQuery != nil {
		callbackConfig := tgbotapi.NewCallback(update.CallbackQuery.ID, "")
		h.bot.Request(callbackConfig)
	}
}

// HandleReviewModeration –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
func (h *ReviewHandlers) HandleReviewModeration(update tgbotapi.Update) {
	userID := update.Message.From.ID
	chatID := update.Message.Chat.ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
	if !h.isAdmin(userID) {
		msg := tgbotapi.NewMessage(chatID, "‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
		h.bot.Send(msg)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∑—ã–≤—ã –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
	pendingReviews, err := h.db.GetPendingReviews()
	if err != nil {
		h.sendErrorMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç–∑—ã–≤–æ–≤")
		return
	}

	if len(pendingReviews) == 0 {
		msg := tgbotapi.NewMessage(chatID, "‚úÖ –ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤, –æ–∂–∏–¥–∞—é—â–∏—Ö –º–æ–¥–µ—Ä–∞—Ü–∏–∏.")
		h.bot.Send(msg)
		return
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
	h.stateManager.SetUserData(userID, "pending_reviews", pendingReviews)
	h.stateManager.SetUserState(userID, "review_moderation")

	var message strings.Builder
	message.WriteString("‚ö° *–ú–æ–¥–µ—Ä–∞—Ü–∏—è –æ—Ç–∑—ã–≤–æ–≤*\n\n")
	message.WriteString(fmt.Sprintf("–û—Ç–∑—ã–≤–æ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: %d\n\n", len(pendingReviews)))

	for i, review := range pendingReviews {
		if i >= 5 { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
			message.WriteString(fmt.Sprintf("\n... –∏ –µ—â–µ %d –æ—Ç–∑—ã–≤–æ–≤", len(pendingReviews)-5))
			break
		}

		message.WriteString(fmt.Sprintf("**%d. %s %s**\n", i+1,
			html.EscapeString(review.Veterinarian.FirstName),
			html.EscapeString(review.Veterinarian.LastName)))
		message.WriteString(fmt.Sprintf("‚≠ê –û—Ü–µ–Ω–∫–∞: %d/5\n", review.Rating))
		message.WriteString(fmt.Sprintf("üí¨ –û—Ç–∑—ã–≤: %s\n", html.EscapeString(review.Comment)))
		if review.User != nil {
			message.WriteString(fmt.Sprintf("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %s\n", html.EscapeString(review.User.FirstName)))
		}
		message.WriteString(fmt.Sprintf("üìÖ –î–∞—Ç–∞: %s\n", review.CreatedAt.Format("02.01.2006")))
		message.WriteString(fmt.Sprintf("üÜî ID –æ—Ç–∑—ã–≤–∞: %d\n\n", review.ID))
	}

	message.WriteString("–í–≤–µ–¥–∏—Ç–µ ID –æ—Ç–∑—ã–≤–∞ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏:")

	keyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É"),
		),
	)

	msg := tgbotapi.NewMessage(chatID, message.String())
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = keyboard
	h.bot.Send(msg)
}

// HandleReviewModerationAction –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
func (h *ReviewHandlers) HandleReviewModerationAction(update tgbotapi.Update, reviewID int) {
	userID := update.Message.From.ID
	chatID := update.Message.Chat.ID

	// –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∑—ã–≤
	review, err := h.db.GetReviewByID(reviewID)
	if err != nil {
		h.sendErrorMessage(chatID, "–û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")
		return
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
	h.stateManager.SetUserData(userID, "moderation_review", review)
	h.stateManager.SetUserState(userID, "review_moderation_confirm")

	var message strings.Builder
	message.WriteString("‚ö° *–ú–æ–¥–µ—Ä–∞—Ü–∏—è –æ—Ç–∑—ã–≤–∞*\n\n")
	message.WriteString(fmt.Sprintf("**–í—Ä–∞—á:** %s %s\n",
		html.EscapeString(review.Veterinarian.FirstName),
		html.EscapeString(review.Veterinarian.LastName)))
	message.WriteString(fmt.Sprintf("**–û—Ü–µ–Ω–∫–∞:** %d/5 ‚≠ê\n", review.Rating))
	message.WriteString(fmt.Sprintf("**–û—Ç–∑—ã–≤:** %s\n", html.EscapeString(review.Comment)))
	if review.User != nil {
		message.WriteString(fmt.Sprintf("**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** %s\n", html.EscapeString(review.User.FirstName)))
	}
	message.WriteString(fmt.Sprintf("**–î–∞—Ç–∞:** %s\n\n", review.CreatedAt.Format("02.01.2006")))

	message.WriteString("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")

	keyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å –æ—Ç–∑—ã–≤"),
			tgbotapi.NewKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –æ—Ç–∑—ã–≤"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É"),
		),
	)

	msg := tgbotapi.NewMessage(chatID, message.String())
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = keyboard
	h.bot.Send(msg)
}

// HandleReviewModerationConfirm –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
func (h *ReviewHandlers) HandleReviewModerationConfirm(update tgbotapi.Update, action string) {
	userID := update.Message.From.ID
	chatID := update.Message.Chat.ID

	// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤–∞
	reviewInterface := h.stateManager.GetUserData(userID, "moderation_review")
	review, ok := reviewInterface.(*models.Review)
	if !ok {
		h.sendErrorMessage(chatID, "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º ID –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –±–∞–∑—ã
	moderator, err := h.db.GetUserByTelegramID(userID)
	if err != nil {
		h.sendErrorMessage(chatID, "–û—à–∏–±–∫–∞: –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
		return
	}

	var status string
	var message string

	switch action {
	case "‚úÖ –û–¥–æ–±—Ä–∏—Ç—å –æ—Ç–∑—ã–≤":
		status = "approved"
		message = "‚úÖ –û—Ç–∑—ã–≤ –æ–¥–æ–±—Ä–µ–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!"
	case "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –æ—Ç–∑—ã–≤":
		status = "rejected"
		message = "‚ùå –û—Ç–∑—ã–≤ –æ—Ç–∫–ª–æ–Ω–µ–Ω."
	default:
		h.sendErrorMessage(chatID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
		return
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–∑—ã–≤–∞
	err = h.db.UpdateReviewStatus(review.ID, status, moderator.ID)
	if err != nil {
		h.sendErrorMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–∑—ã–≤–∞")
		return
	}

	// –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
	h.stateManager.ClearUserData(userID)
	h.stateManager.SetUserState(userID, "review_moderation")

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
	msg := tgbotapi.NewMessage(chatID, message)
	h.bot.Send(msg)

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –æ—Ç–∑—ã–≤ –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é
	h.HandleReviewModeration(update)
}

// ========== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ==========

func (h *ReviewHandlers) notifyAdminsAboutNewReview(review *models.Review) {
	// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
	for _, adminID := range h.adminIDs {
		msg := tgbotapi.NewMessage(adminID,
			fmt.Sprintf("‚ö° *–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!*\n\n–í—Ä–∞—á: %s %s\n–û—Ü–µ–Ω–∫–∞: %d/5 ‚≠ê\n–û—Ç–∑—ã–≤: %s",
				html.EscapeString(review.Veterinarian.FirstName),
				html.EscapeString(review.Veterinarian.LastName),
				review.Rating,
				html.EscapeString(review.Comment)))
		msg.ParseMode = "Markdown"
		h.bot.Send(msg)
	}
}

func (h *ReviewHandlers) isAdmin(userID int64) bool {
	for _, adminID := range h.adminIDs {
		if userID == adminID {
			return true
		}
	}
	return false
}

func (h *ReviewHandlers) sendErrorMessage(chatID int64, message string) {
	msg := tgbotapi.NewMessage(chatID, "‚ùå "+message)
	h.bot.Send(msg)
}
