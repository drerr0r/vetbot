package handlers

import (
	"fmt"
	"strings"
	"testing"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/stretchr/testify/assert"
)

// ============================================================================
// –¢–ï–°–¢–´ –î–õ–Ø –ö–û–ù–°–¢–†–£–ö–¢–û–†–ê
// ============================================================================

func TestBotHandlers_NewBotHandlers(t *testing.T) {
	// Arrange
	mockBot := NewMockBot() // –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫ –≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞

	// Act
	handler := NewBotHandlers(mockBot)

	// Assert
	assert.NotNil(t, handler)
	assert.Equal(t, mockBot, handler.bot) // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
}

// ============================================================================
// –¢–ï–°–¢–´ –î–õ–Ø –õ–û–ì–ò–ö–ò –°–û–û–ë–©–ï–ù–ò–ô (–±–µ–∑ –≤—ã–∑–æ–≤–æ–≤ –±–æ—Ç–∞)
// ============================================================================

func TestBotHandlers_MessageContentLogic(t *testing.T) {
	tests := []struct {
		name            string
		method          string
		expectedPhrases []string
	}{
		{
			name:   "Unknown command message content",
			method: "unknown",
			expectedPhrases: []string{
				"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞",
				"/help",
				"‚ùå",
			},
		},
		{
			name:   "Error message content",
			method: "error",
			expectedPhrases: []string{
				"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞",
				"–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
				"‚ö†Ô∏è",
			},
		},
		{
			name:   "Welcome message content",
			method: "welcome",
			expectedPhrases: []string{
				"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å",
				"VetBot",
				"–≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã—Ö –≤—Ä–∞—á–µ–π",
				"—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏",
				"—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
				"/help",
				"üêæ",
			},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			// Arrange
			var messageText string

			// –ò–º–∏—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ BotHandlers
			switch tt.method {
			case "unknown":
				messageText = "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
			case "error":
				messageText = "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
			case "welcome":
				messageText = `üêæ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VetBot! üêæ

–Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ –ø–æ–∏—Å–∫–µ –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã—Ö –≤—Ä–∞—á–µ–π. –Ø –º–æ–≥—É:

‚Ä¢ –ü–æ–∫–∞–∑–∞—Ç—å –≤—Ä–∞—á–µ–π –ø–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
‚Ä¢ –ù–∞–π—Ç–∏ –≤—Ä–∞—á–µ–π –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å
‚Ä¢ –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –∫–ª–∏–Ω–∏–∫
‚Ä¢ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–µ–º–∞

–ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /help —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏!`
			}

			// Assert - –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –æ–∂–∏–¥–∞–µ–º—ã–µ —Ñ—Ä–∞–∑—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
			for _, phrase := range tt.expectedPhrases {
				assert.True(t, contains(messageText, phrase),
					"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ñ—Ä–∞–∑—É: '%s'. –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç: %s", phrase, messageText)
			}
		})
	}
}

// ============================================================================
// –¢–ï–°–¢–´ –î–õ–Ø –°–¢–†–£–ö–¢–£–†–´ –ò –ü–û–í–ï–î–ï–ù–ò–Ø
// ============================================================================

func TestBotHandlers_Structure(t *testing.T) {
	t.Run("BotHandlers has required fields", func(t *testing.T) {
		mockBot := NewMockBot()
		handler := NewBotHandlers(mockBot)

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏–º–µ–µ—Ç –æ–∂–∏–¥–∞–µ–º—ã–µ –ø–æ–ª—è
		assert.NotNil(t, handler)
		assert.Equal(t, mockBot, handler.bot)
	})

	t.Run("Multiple handler instances are independent", func(t *testing.T) {
		mockBot1 := NewMockBot()
		mockBot2 := NewMockBot()

		handler1 := NewBotHandlers(mockBot1)
		handler2 := NewBotHandlers(mockBot2)

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —Ä–∞–∑–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã (—Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ, –∞ –Ω–µ —É–∫–∞–∑–∞—Ç–µ–ª–∏)
		assert.NotEqual(t, fmt.Sprintf("%p", handler1), fmt.Sprintf("%p", handler2), "Handler instances should be different")

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–±–∞ –∏–º–µ—é—Ç —Å–≤–æ–∏—Ö –±–æ—Ç–æ–≤
		assert.Equal(t, mockBot1, handler1.bot)
		assert.Equal(t, mockBot2, handler2.bot)
	})
}

// ============================================================================
// –¢–ï–°–¢–´ –î–õ–Ø –û–ë–†–ê–ë–û–¢–ö–ò –î–ê–ù–ù–´–•
// ============================================================================

func TestBotHandlers_UpdateHandlingLogic(t *testing.T) {
	tests := []struct {
		name           string
		update         tgbotapi.Update
		expectedAction string
	}{
		{
			name: "Update with message for unknown command",
			update: tgbotapi.Update{
				Message: &tgbotapi.Message{
					Text: "/unknowncommand",
					Chat: &tgbotapi.Chat{ID: 12345},
				},
			},
			expectedAction: "unknown_command",
		},
		{
			name: "Update with different chat ID",
			update: tgbotapi.Update{
				Message: &tgbotapi.Message{
					Text: "/invalid",
					Chat: &tgbotapi.Chat{ID: 67890},
				},
			},
			expectedAction: "unknown_command",
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			// Arrange
			var action string
			var chatID int64

			// –ò–º–∏—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
			if tt.update.Message != nil {
				chatID = tt.update.Message.Chat.ID
				action = "unknown_command"
			}

			// Assert
			assert.Equal(t, tt.expectedAction, action)
			if tt.update.Message != nil {
				assert.Equal(t, tt.update.Message.Chat.ID, chatID)
			}
		})
	}
}

// ============================================================================
// –¢–ï–°–¢–´ –î–õ–Ø –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö
// ============================================================================

func TestBotHandlers_ErrorHandlingLogic(t *testing.T) {
	tests := []struct {
		name        string
		chatID      int64
		errorMsg    string
		expectedLog string
	}{
		{
			name:        "Database error",
			chatID:      12345,
			errorMsg:    "database connection failed",
			expectedLog: "database connection failed",
		},
		{
			name:        "Network error",
			chatID:      67890,
			errorMsg:    "network timeout",
			expectedLog: "network timeout",
		},
		{
			name:        "Empty error message",
			chatID:      12345,
			errorMsg:    "",
			expectedLog: "",
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			// Arrange
			var (
				action string
				chatID int64
			)

			// –ò–º–∏—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
			chatID = tt.chatID
			action = tt.errorMsg

			// Assert
			assert.Equal(t, tt.chatID, chatID)
			assert.Equal(t, tt.expectedLog, action)
		})
	}
}

// ============================================================================
// –¢–ï–°–¢–´ –î–õ–Ø –ü–†–ò–í–ï–¢–°–¢–í–ï–ù–ù–´–• –°–û–û–ë–©–ï–ù–ò–ô
// ============================================================================

func TestBotHandlers_WelcomeMessageLogic(t *testing.T) {
	tests := []struct {
		name           string
		chatID         int64
		expectedAction string
	}{
		{
			name:           "Welcome message for new user",
			chatID:         12345,
			expectedAction: "send_welcome",
		},
		{
			name:           "Welcome message for different user",
			chatID:         67890,
			expectedAction: "send_welcome",
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			// Arrange
			var (
				action       string
				targetChatID int64
			)

			// –ò–º–∏—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
			targetChatID = tt.chatID
			action = "send_welcome"

			// Assert
			assert.Equal(t, tt.expectedAction, action)
			assert.Equal(t, tt.chatID, targetChatID)
		})
	}
}

// ============================================================================
// –¢–ï–°–¢–´ –î–õ–Ø –ö–†–ê–ô–ù–ò–• –°–õ–£–ß–ê–ï–í
// ============================================================================

func TestBotHandlers_EdgeCases(t *testing.T) {
	t.Run("Nil bot in constructor", func(t *testing.T) {
		// Act
		handler := NewBotHandlers(nil)

		// Assert
		assert.NotNil(t, handler)
		assert.Nil(t, handler.bot)
	})

	t.Run("Zero chat ID for error message", func(t *testing.T) {
		// Arrange
		mockBot := NewMockBot() // –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫
		handler := NewBotHandlers(mockBot)

		// Act & Assert - –Ω–µ –¥–æ–ª–∂–Ω–æ –ø–∞–Ω–∏–∫–æ–≤–∞—Ç—å
		assert.NotPanics(t, func() {
			_ = handler
		})
	})

	t.Run("Negative chat ID for welcome message", func(t *testing.T) {
		// Arrange
		mockBot := NewMockBot() // –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫
		handler := NewBotHandlers(mockBot)

		// Act & Assert - –Ω–µ –¥–æ–ª–∂–Ω–æ –ø–∞–Ω–∏–∫–æ–≤–∞—Ç—å
		assert.NotPanics(t, func() {
			_ = handler
		})
	})

	t.Run("Empty update for unknown command", func(t *testing.T) {
		// Arrange
		mockBot := NewMockBot() // –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫
		handler := NewBotHandlers(mockBot)
		emptyUpdate := tgbotapi.Update{}

		// Act & Assert - –Ω–µ –¥–æ–ª–∂–Ω–æ –ø–∞–Ω–∏–∫–æ–≤–∞—Ç—å
		assert.NotPanics(t, func() {
			_ = handler
			_ = emptyUpdate
		})
	})
}

// ============================================================================
// –¢–ï–°–¢–´ –î–õ–Ø –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø –¢–ï–ö–°–¢–ê
// ============================================================================

func TestBotHandlers_TextFormatting(t *testing.T) {
	tests := []struct {
		name   string
		text   string
		checks []func(string) bool
	}{
		{
			name: "Unknown command formatting",
			text: "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.",
			checks: []func(string) bool{
				func(s string) bool { return strings.Contains(s, "‚ùå") },
				func(s string) bool { return strings.Contains(s, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞") },
				func(s string) bool { return strings.Contains(s, "/help") },
				func(s string) bool { return strings.Count(s, "\n") >= 1 }, // –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏
			},
		},
		{
			name: "Error message formatting",
			text: "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
			checks: []func(string) bool{
				func(s string) bool { return strings.Contains(s, "‚ö†Ô∏è") },
				func(s string) bool { return strings.Contains(s, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞") },
				func(s string) bool { return strings.Contains(s, "–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ") },
			},
		},
		{
			name: "Welcome message formatting",
			text: `üêæ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VetBot! üêæ

–Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ –ø–æ–∏—Å–∫–µ –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã—Ö –≤—Ä–∞—á–µ–π. –Ø –º–æ–≥—É:

‚Ä¢ –ü–æ–∫–∞–∑–∞—Ç—å –≤—Ä–∞—á–µ–π –ø–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
‚Ä¢ –ù–∞–π—Ç–∏ –≤—Ä–∞—á–µ–π –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å
‚Ä¢ –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –∫–ª–∏–Ω–∏–∫
‚Ä¢ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–µ–º–∞

–ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /help —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏!`,
			checks: []func(string) bool{
				func(s string) bool { return strings.Contains(s, "üêæ") },
				func(s string) bool { return strings.Contains(s, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å") },
				func(s string) bool { return strings.Contains(s, "‚Ä¢") }, // –°–ø–∏—Å–æ–∫
				func(s string) bool { return strings.Contains(s, "/help") },
				func(s string) bool { return strings.Count(s, "\n") >= 5 }, // –ú–Ω–æ–≥–æ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫
			},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			for i, check := range tt.checks {
				assert.True(t, check(tt.text), "Check %d failed for text: %s", i, tt.text)
			}
		})
	}
}

// ============================================================================
// –¢–ï–°–¢–´ –î–õ–Ø –°–û–î–ï–†–ñ–ê–ù–ò–Ø –°–û–û–ë–©–ï–ù–ò–ô
// ============================================================================

func TestBotHandlers_MessageCompleteness(t *testing.T) {
	t.Run("Unknown command message has all required elements", func(t *testing.T) {
		message := "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –∫–ª—é—á–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
		assert.Contains(t, message, "‚ùå", "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–Ω–∞—á–æ–∫ –æ—à–∏–±–∫–∏")
		assert.Contains(t, message, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã")
		assert.Contains(t, message, "/help", "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∞ –ø–æ–º–æ—â—å")
		assert.True(t, len(message) > 20, "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω—ã–º")
	})

	t.Run("Error message has user-friendly content", func(t *testing.T) {
		message := "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

		assert.Contains(t, message, "‚ö†Ô∏è", "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–Ω–∞—á–æ–∫ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è")
		assert.Contains(t, message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–∫–∞–∑–∞–Ω–æ –Ω–∞ –æ—à–∏–±–∫—É")
		assert.Contains(t, message, "–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å")
	})

	t.Run("Welcome message is comprehensive and helpful", func(t *testing.T) {
		message := `üêæ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VetBot! üêæ

–Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ –ø–æ–∏—Å–∫–µ –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã—Ö –≤—Ä–∞—á–µ–π. –Ø –º–æ–≥—É:

‚Ä¢ –ü–æ–∫–∞–∑–∞—Ç—å –≤—Ä–∞—á–µ–π –ø–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
‚Ä¢ –ù–∞–π—Ç–∏ –≤—Ä–∞—á–µ–π –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å
‚Ä¢ –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –∫–ª–∏–Ω–∏–∫
‚Ä¢ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–µ–º–∞

–ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /help —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏!`

		assert.Contains(t, message, "üêæ", "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã")
		assert.Contains(t, message, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å", "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ")
		assert.Contains(t, message, "–≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã—Ö –≤—Ä–∞—á–µ–π", "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è")
		assert.Contains(t, message, "‚Ä¢", "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π")
		assert.Contains(t, message, "/help", "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É–∫–∞–∑–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏")
		assert.True(t, strings.Count(message, "‚Ä¢") >= 4, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—É–Ω–∫—Ç–æ–≤ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π")
	})
}

// ============================================================================
// –¢–ï–°–¢–´ –î–õ–Ø –†–ï–ê–õ–¨–ù–û–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò
// ============================================================================

func TestBotHandlers_RealFunctionality(t *testing.T) {
	t.Run("HandleUnknownCommand sends message", func(t *testing.T) {
		// Arrange
		mockBot := NewMockBot()
		handler := NewBotHandlers(mockBot)

		update := tgbotapi.Update{
			Message: &tgbotapi.Message{
				Text: "/unknown",
				Chat: &tgbotapi.Chat{ID: 12345},
			},
		}

		// Act
		handler.HandleUnknownCommand(update)

		// Assert
		assert.Len(t, mockBot.SentMessages, 1)
		message := mockBot.GetLastMessage()
		assert.Contains(t, message.Text, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
		assert.Equal(t, int64(12345), message.ChatID)
	})

	t.Run("HandleErrorMessage sends error message", func(t *testing.T) {
		// Arrange
		mockBot := NewMockBot()
		handler := NewBotHandlers(mockBot)

		// Act
		handler.HandleErrorMessage(12345, "test error")

		// Assert
		assert.Len(t, mockBot.SentMessages, 1)
		message := mockBot.GetLastMessage()
		assert.Contains(t, message.Text, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
		assert.Equal(t, int64(12345), message.ChatID)
	})

	t.Run("SendWelcomeMessage sends welcome", func(t *testing.T) {
		// Arrange
		mockBot := NewMockBot()
		handler := NewBotHandlers(mockBot)

		// Act
		handler.SendWelcomeMessage(12345)

		// Assert
		assert.Len(t, mockBot.SentMessages, 1)
		message := mockBot.GetLastMessage()
		assert.Contains(t, message.Text, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å")
		assert.Contains(t, message.Text, "VetBot")
		assert.Equal(t, int64(12345), message.ChatID)
	})
}

// ============================================================================
// –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
// ============================================================================

// contains –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø–æ–¥—Å—Ç—Ä–æ–∫—É (–¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
func contains(s, substr string) bool {
	if substr == "" {
		return true
	}
	return strings.Contains(s, substr)
}

// ============================================================================
// –¢–ï–°–¢–´ –î–õ–Ø –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–• –§–£–ù–ö–¶–ò–ô
// ============================================================================

func TestContainsHelper(t *testing.T) {
	tests := []struct {
		name     string
		str      string
		substr   string
		expected bool
	}{
		{
			name:     "String contains substring",
			str:      "Hello world",
			substr:   "world",
			expected: true,
		},
		{
			name:     "String does not contain substring",
			str:      "Hello world",
			substr:   "test",
			expected: false,
		},
		{
			name:     "Empty string",
			str:      "",
			substr:   "test",
			expected: false,
		},
		{
			name:     "Empty substring",
			str:      "Hello world",
			substr:   "",
			expected: true,
		},
		{
			name:     "Both empty",
			str:      "",
			substr:   "",
			expected: true,
		},
		{
			name:     "Case sensitive",
			str:      "Hello World",
			substr:   "world",
			expected: false,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			result := contains(tt.str, tt.substr)
			assert.Equal(t, tt.expected, result)
		})
	}
}
