package handlers

import (
	"fmt"
	"log"
	"strings"

	"vetbot/internal/database"
	"vetbot/pkg/utils"

	telegram "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// BotHandlers —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ Telegram –±–æ—Ç–∞
type BotHandlers struct {
	bot    *telegram.BotAPI
	db     *database.Database
	config *utils.Config
}

// NewBotHandlers —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–æ—Ç–∞
func NewBotHandlers(bot *telegram.BotAPI, db *database.Database, config *utils.Config) *BotHandlers {
	return &BotHandlers{
		bot:    bot,
		db:     db,
		config: config,
	}
}

// HandleUpdate –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
func (h *BotHandlers) HandleUpdate(update telegram.Update) {
	// –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–π
	if update.Message == nil {
		return
	}

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –æ–Ω –Ω–æ–≤—ã–π
	h.RegisterUser(update.Message.From.UserName, update.Message.Chat.ID)

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
	switch {
	case update.Message.IsCommand():
		h.HandleCommand(update)
	case strings.HasPrefix(update.Message.Text, "/find"):
		h.HandleFindCommand(update)
	default:
		h.HandleDefaultMessage(update)
	}
}

// HandleCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
func (h *BotHandlers) HandleCommand(update telegram.Update) {
	command := update.Message.Command()
	chatID := update.Message.Chat.ID

	log.Printf("Received command: %s from chat ID: %d", command, chatID)

	switch command {
	case "start":
		h.HandleStartCommand(chatID)
	case "help":
		h.HandleHelpCommand(chatID)
	case "list":
		h.HandleListCommand(chatID)
	case "find":
		h.HandleFindWithEmptyQuery(chatID)
	case "admin":
		// –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
		h.SendMessage(chatID, "‚öôÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ /admin")
	default:
		h.HandleUnknownCommand(chatID)
	}
}

// HandleStartCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start
func (h *BotHandlers) HandleStartCommand(chatID int64) {
	message := `üêæ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VetBot!

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã—Ö –≤—Ä–∞—á–µ–π.

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
/find - –Ω–∞–π—Ç–∏ –≤—Ä–∞—á–∞ –ø–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
/list - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –≤—Ä–∞—á–µ–π

üí° –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
/find —Ç–µ—Ä–∞–ø–µ–≤—Ç - –Ω–∞–π—Ç–∏ –≤—Å–µ—Ö —Ç–µ—Ä–∞–ø–µ–≤—Ç–æ–≤
/find —Ö–∏—Ä—É—Ä–≥ - –Ω–∞–π—Ç–∏ —Ö–∏—Ä—É—Ä–≥–æ–≤`

	h.SendMessage(chatID, message)
}

// HandleHelpCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help
func (h *BotHandlers) HandleHelpCommand(chatID int64) {
	message := `üìã –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º VetBot:

üîç –ü–æ–∏—Å–∫ –≤—Ä–∞—á–µ–π:
/find [—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è] - –ø–æ–∏—Å–∫ –≤—Ä–∞—á–µ–π –ø–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
–ü—Ä–∏–º–µ—Ä: /find —Ç–µ—Ä–∞–ø–µ–≤—Ç

üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö:
/list - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –≤—Ä–∞—á–µ–π –≤ –±–∞–∑–µ

üí° –°–æ–≤–µ—Ç—ã:
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∞—Å—Ç–∏—á–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π
‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä –Ω–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏ –ø–æ–∏—Å–∫–µ`

	h.SendMessage(chatID, message)
}

// HandleListCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /list
func (h *BotHandlers) HandleListCommand(chatID int64) {
	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –≤—Ä–∞—á–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	veterinarians, err := h.db.GetAllVeterinarians()
	if err != nil {
		log.Printf("Error getting veterinarians: %v", err)
		h.SendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã")
		return
	}

	if len(veterinarians) == 0 {
		h.SendMessage(chatID, "üì≠ –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –≤—Ä–∞—á–µ–π")
		return
	}

	// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤—Ä–∞—á–µ–π
	var message strings.Builder
	message.WriteString("üë®‚Äç‚öïÔ∏è –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã—Ö –≤—Ä–∞—á–µ–π:\n\n")

	for i, vet := range veterinarians {
		message.WriteString(fmt.Sprintf("%d. %s (%s)\n", i+1, vet.Name, vet.Specialty))
		message.WriteString(fmt.Sprintf("   üìç –ê–¥—Ä–µ—Å: %s\n", vet.Address))
		message.WriteString(fmt.Sprintf("   üìû –¢–µ–ª–µ—Ñ–æ–Ω: %s\n", vet.Phone))
		message.WriteString(fmt.Sprintf("   üïê –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: %s\n\n", vet.WorkHours))
	}

	h.SendMessage(chatID, message.String())
}

// HandleFindCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –ø–æ–∏—Å–∫–∞ /find
func (h *BotHandlers) HandleFindCommand(update telegram.Update) {
	chatID := update.Message.Chat.ID
	text := update.Message.Text

	// –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–∑ –∫–æ–º–∞–Ω–¥—ã
	query := strings.TrimSpace(strings.TrimPrefix(text, "/find"))
	if query == "" {
		h.HandleFindWithEmptyQuery(chatID)
		return
	}

	// –ò—â–µ–º –≤—Ä–∞—á–µ–π –ø–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
	veterinarians, err := h.db.FindVeterinariansBySpecialty(query)
	if err != nil {
		log.Printf("Error searching veterinarians: %v", err)
		h.SendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
		return
	}

	if len(veterinarians) == 0 {
		message := fmt.Sprintf("üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É \"%s\" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /list –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –≤—Ä–∞—á–µ–π", query)
		h.SendMessage(chatID, message)
		return
	}

	// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
	var message strings.Builder
	message.WriteString(fmt.Sprintf("üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É \"%s\":\n\n", query))

	for i, vet := range veterinarians {
		message.WriteString(fmt.Sprintf("%d. %s (%s)\n", i+1, vet.Name, vet.Specialty))
		message.WriteString(fmt.Sprintf("   üìç –ê–¥—Ä–µ—Å: %s\n", vet.Address))
		message.WriteString(fmt.Sprintf("   üìû –¢–µ–ª–µ—Ñ–æ–Ω: %s\n", vet.Phone))
		message.WriteString(fmt.Sprintf("   üïê –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: %s\n\n", vet.WorkHours))
	}

	h.SendMessage(chatID, message.String())
}

// HandleFindWithEmptyQuery –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /find –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
func (h *BotHandlers) HandleFindWithEmptyQuery(chatID int64) {
	message := `üîç –ü–æ–∏—Å–∫ –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã—Ö –≤—Ä–∞—á–µ–π

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
/find [—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è]

–ü—Ä–∏–º–µ—Ä—ã:
/find —Ç–µ—Ä–∞–ø–µ–≤—Ç - –ø–æ–∏—Å–∫ —Ç–µ—Ä–∞–ø–µ–≤—Ç–æ–≤
/find —Ö–∏—Ä—É—Ä–≥ - –ø–æ–∏—Å–∫ —Ö–∏—Ä—É—Ä–≥–æ–≤
/find —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥ - –ø–æ–∏—Å–∫ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–æ–≤

üí° –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è:
/find —Ç–µ—Ä - –Ω–∞–π–¥–µ—Ç —Ç–µ—Ä–∞–ø–µ–≤—Ç–æ–≤
/find —Ö–∏—Ä - –Ω–∞–π–¥–µ—Ç —Ö–∏—Ä—É—Ä–≥–æ–≤`

	h.SendMessage(chatID, message)
}

// HandleUnknownCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
func (h *BotHandlers) HandleUnknownCommand(chatID int64) {
	message := `‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - –ø–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
/find - –ø–æ–∏—Å–∫ –≤—Ä–∞—á–µ–π
/list - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤—Ä–∞—á–µ–π

–í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å–ø—Ä–∞–≤–∫–∏`

	h.SendMessage(chatID, message)
}

// HandleDefaultMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–µ –∫–æ–º–∞–Ω–¥—ã)
func (h *BotHandlers) HandleDefaultMessage(update telegram.Update) {
	chatID := update.Message.Chat.ID
	message := `üí¨ –Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - –ø–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
/find - –ø–æ–∏—Å–∫ –≤—Ä–∞—á–µ–π
/list - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤—Ä–∞—á–µ–π

–í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å–ø—Ä–∞–≤–∫–∏`

	h.SendMessage(chatID, message)
}

// RegisterUser —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ
func (h *BotHandlers) RegisterUser(username string, chatID int64) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
	exists, err := h.db.UserExists(chatID)
	if err != nil {
		log.Printf("Error checking user existence: %v", err)
		return
	}

	if !exists {
		// –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
		isAdmin := chatID == h.config.AdminChatID

		// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		err := h.db.CreateUser(username, chatID, isAdmin)
		if err != nil {
			log.Printf("Error creating user: %v", err)
		} else {
			log.Printf("New user registered: %s (chat ID: %d, admin: %v)", username, chatID, isAdmin)
		}
	}
}

// SendMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram —á–∞—Ç
func (h *BotHandlers) SendMessage(chatID int64, text string) {
	msg := telegram.NewMessage(chatID, text)
	msg.ParseMode = "HTML"

	_, err := h.bot.Send(msg)
	if err != nil {
		log.Printf("Error sending message: %v", err)
	}
}
