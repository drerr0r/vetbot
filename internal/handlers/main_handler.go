package handlers

import (
	"database/sql"
	"encoding/csv"
	"fmt"
	"io"
	"net/http"
	"os"
	"path/filepath"
	"regexp"
	"strconv"
	"strings"
	"time"

	"github.com/drerr0r/vetbot/internal/models"
	"github.com/drerr0r/vetbot/pkg/utils"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/xuri/excelize/v2"
)

// MainHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
type MainHandler struct {
	bot            BotAPI
	db             Database
	config         *utils.Config
	stateManager   *StateManager
	vetHandlers    *VetHandlers
	adminHandlers  *AdminHandlers
	reviewHandlers *ReviewHandlers
}

func NewMainHandler(bot BotAPI, db Database, config *utils.Config) *MainHandler {
	stateManager := NewStateManager()

	// –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º ReviewHandlers
	reviewHandlers := NewReviewHandlers(bot, db, config.AdminIDs, stateManager)

	// –ó–∞—Ç–µ–º –ø–µ—Ä–µ–¥–∞–µ–º –∏—Ö –≤ AdminHandlers
	adminHandlers := NewAdminHandlers(bot, db, config, stateManager, reviewHandlers)

	// –°–æ–∑–¥–∞–µ–º VetHandlers
	vetHandlers := NewVetHandlers(bot, db, config.AdminIDs, stateManager)

	return &MainHandler{
		bot:            bot,
		db:             db,
		config:         config,
		stateManager:   stateManager,
		vetHandlers:    vetHandlers,
		adminHandlers:  adminHandlers,
		reviewHandlers: reviewHandlers,
	}
}

// HandleUpdate –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
func (h *MainHandler) HandleUpdate(update tgbotapi.Update) {
	InfoLog.Printf("Received update")

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback queries (–Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline –∫–Ω–æ–ø–∫–∏)
	if update.CallbackQuery != nil {
		InfoLog.Printf("Callback query: %s", update.CallbackQuery.Data)

		// –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ callback –æ—Ç –æ—Ç–∑—ã–≤–æ–≤
		data := update.CallbackQuery.Data
		if strings.HasPrefix(data, "review_") || strings.HasPrefix(data, "add_review_") {
			h.reviewHandlers.HandleReviewCallback(update)
			return
		}

		// –ò–Ω–∞—á–µ –ø–µ—Ä–µ–¥–∞–µ–º –≤ vetHandlers
		h.vetHandlers.HandleCallback(update)
		return
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã (—Ñ–∞–π–ª—ã –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞)
	if update.Message != nil && update.Message.Document != nil {
		InfoLog.Printf("Document received: %s", update.Message.Document.FileName)
		h.handleDocument(update)
		return
	}

	// –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ª—é–±—ã–µ –Ω–µ-text —Å–æ–æ–±—â–µ–Ω–∏—è
	if update.Message == nil {
		InfoLog.Printf("Message is nil")
		return
	}

	if update.Message.Text == "" {
		InfoLog.Printf("Text is empty")
		return
	}

	InfoLog.Printf("Processing message: %s", update.Message.Text)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
	isAdmin := h.isAdmin(update.Message.From.ID)
	InfoLog.Printf("User %d is admin: %t", update.Message.From.ID, isAdmin)

	// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∞–¥–º–∏–Ω—Å–∫–æ–º —Ä–µ–∂–∏–º–µ, –ø–µ—Ä–µ–¥–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–º —Ö–µ–Ω–¥–ª–µ—Ä–∞–º
	if isAdmin && h.isInAdminMode(update.Message.From.ID) {
		InfoLog.Printf("Redirecting to admin handlers")
		h.adminHandlers.HandleAdminMessage(update)
		return
	}

	// –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã –ø–æ–∏—Å–∫–∞ (/search_1, /search_2 –∏ —Ç.–¥.)
	if strings.HasPrefix(update.Message.Text, "/search_") {
		InfoLog.Printf("Is search command: %s", update.Message.Text)
		h.handleSearchCommand(update)
		return
	}

	// –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ã—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
	if update.Message.IsCommand() {
		InfoLog.Printf("Is command: %s", update.Message.Command())
		h.handleCommand(update, isAdmin)
		return
	}

	// –û–±—ã—á–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
	InfoLog.Printf("Is text message: %s", update.Message.Text)
	h.handleTextMessage(update)
}

// handleCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
func (h *MainHandler) handleCommand(update tgbotapi.Update, isAdmin bool) {
	command := update.Message.Command()
	InfoLog.Printf("Handling command: %s", command)

	switch command {
	case "start":
		InfoLog.Printf("Executing /start")
		h.vetHandlers.HandleStart(update)
	case "specializations":
		InfoLog.Printf("Executing /specializations")
		h.vetHandlers.HandleSpecializations(update)
	case "search":
		InfoLog.Printf("Executing /search")
		h.vetHandlers.HandleSearch(update)
	case "clinics":
		InfoLog.Printf("Executing /clinics")
		h.vetHandlers.HandleClinics(update)
	case "cities":
		InfoLog.Printf("Executing /cities")
		h.vetHandlers.HandleSearchByCity(update)
	case "help":
		InfoLog.Printf("Executing /help")
		h.vetHandlers.HandleHelp(update)
	case "test":
		InfoLog.Printf("Executing /test")
		h.vetHandlers.HandleTest(update)
	case "admin":
		if isAdmin {
			InfoLog.Printf("Executing /admin")
			h.adminHandlers.HandleAdmin(update)
		} else {
			InfoLog.Printf("Admin access denied for user %d", update.Message.From.ID)
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
			h.bot.Send(msg)
		}
	case "stats":
		if isAdmin {
			InfoLog.Printf("Executing /stats")
			h.adminHandlers.HandleStats(update)
		}
	case "debug":
		if isAdmin {
			InfoLog.Printf("Executing /debug")
			h.handleDebugCommand(update)
		} else {
			InfoLog.Printf("Debug access denied for user %d", update.Message.From.ID)
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
			h.bot.Send(msg)
		}
	default:
		InfoLog.Printf("Unknown command: %s", command)
		msg := tgbotapi.NewMessage(update.Message.Chat.ID,
			"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥")
		h.bot.Send(msg)
	}
}

// handleSearchCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –ø–æ–∏—Å–∫–∞ –ø–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (/search_1, /search_2 –∏ —Ç.–¥.)
func (h *MainHandler) handleSearchCommand(update tgbotapi.Update) {
	text := update.Message.Text
	InfoLog.Printf("Handling search command: %s", text)

	if strings.HasPrefix(text, "/search_") {
		specIDStr := strings.TrimPrefix(text, "/search_")
		specID, err := strconv.Atoi(specIDStr)
		if err != nil {
			ErrorLog.Printf("Error parsing specialization ID: %v", err)
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã –ø–æ–∏—Å–∫–∞")
			h.bot.Send(msg)
			return
		}
		InfoLog.Printf("Searching for specialization ID: %d", specID)
		h.vetHandlers.HandleSearchBySpecialization(update, specID)
	}
}

func (h *MainHandler) handleTextMessage(update tgbotapi.Update) {
	userID := update.Message.From.ID
	chatID := update.Message.Chat.ID
	text := update.Message.Text
	state := h.stateManager.GetUserState(userID)

	InfoLog.Printf("handleTextMessage: user %d, chat %d, state '%s', text: '%s'",
		userID, chatID, state, text)

	// –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
	h.stateManager.DebugUserState(userID)

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å–∏—Å—Ç–µ–º—ã –æ—Ç–∑—ã–≤–æ–≤
	switch state {
	case "review_comment":
		InfoLog.Printf("Processing review comment for user %d, text length: %d", userID, len(text))
		h.reviewHandlers.HandleReviewComment(update, text)
		return

	case "review_moderation":
		InfoLog.Printf("Processing review moderation for user %d", userID)
		if reviewID, err := strconv.Atoi(strings.TrimSpace(text)); err == nil {
			h.reviewHandlers.HandleReviewModerationAction(update, reviewID)
		} else {
			h.sendErrorMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –æ—Ç–∑—ã–≤–∞")
		}
		return

	case "review_moderation_confirm":
		InfoLog.Printf("Processing review moderation confirmation for user %d", userID)
		h.reviewHandlers.HandleReviewModerationConfirm(update, text)
		return
	}

	// –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É
	msg := tgbotapi.NewMessage(chatID,
		"–Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")
	h.bot.Send(msg)
}

// handleDocument –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∂–∞–µ–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã (CSV/Excel –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞)
func (h *MainHandler) handleDocument(update tgbotapi.Update) {
	fileName := update.Message.Document.FileName
	fileID := update.Message.Document.FileID

	InfoLog.Printf("Received document: %s", fileName)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
	if !strings.HasSuffix(strings.ToLower(fileName), ".csv") &&
		!strings.HasSuffix(strings.ToLower(fileName), ".xlsx") {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID,
			"‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ CSV –∏ Excel —Ñ–∞–π–ª—ã (.csv, .xlsx)")
		h.bot.Send(msg)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
	if !h.isAdmin(update.Message.From.ID) {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID,
			"‚ùå –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
		h.bot.Send(msg)
		return
	}

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏–º–ø–æ—Ä—Ç–∞ –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
	var importType string
	if strings.Contains(strings.ToLower(fileName), "–≥–æ—Ä–æ–¥") {
		importType = "cities"
	} else if strings.Contains(strings.ToLower(fileName), "–≤—Ä–∞—á") {
		importType = "veterinarians"
	} else if strings.Contains(strings.ToLower(fileName), "–∫–ª–∏–Ω–∏–∫") {
		importType = "clinics"
	} else {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID,
			"üì• –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω. –£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –∏–º–ø–æ—Ä—Ç–∞:\n\n"+
				"‚Ä¢ –î–ª—è –≥–æ—Ä–æ–¥–æ–≤: —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å '–≥–æ—Ä–æ–¥' –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏\n"+
				"‚Ä¢ –î–ª—è –≤—Ä–∞—á–µ–π: —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å '–≤—Ä–∞—á' –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏\n"+
				"‚Ä¢ –î–ª—è –∫–ª–∏–Ω–∏–∫: —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å '–∫–ª–∏–Ω–∏–∫' –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏")
		h.bot.Send(msg)
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
	msg := tgbotapi.NewMessage(update.Message.Chat.ID,
		fmt.Sprintf("üì• –§–∞–π–ª '%s' –ø–æ–ª—É—á–µ–Ω. –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...", fileName))
	h.bot.Send(msg)

	// –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
	filePath, err := h.downloadFile(fileID, fileName)
	if err != nil {
		h.sendErrorMessage(update.Message.Chat.ID, fmt.Sprintf("–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: %v", err))
		return
	}
	defer os.Remove(filePath) // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
	var result string
	switch importType {
	case "veterinarians":
		result, err = h.importVeterinarians(filePath, fileName)
	case "cities":
		result, err = h.importCities(filePath, fileName)
	case "clinics":
		result, err = h.importClinics(filePath, fileName)
	}

	if err != nil {
		h.sendErrorMessage(update.Message.Chat.ID, fmt.Sprintf("–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: %v", err))
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	msg = tgbotapi.NewMessage(update.Message.Chat.ID, result)
	h.bot.Send(msg)
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
func (h *MainHandler) downloadFile(fileID string, fileName string) (string, error) {
	fileConfig := tgbotapi.FileConfig{FileID: fileID}
	file, err := h.bot.GetFile(fileConfig)
	if err != nil {
		return "", fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª: %v", err)
	}

	// –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ—Ç
	tempDir := "temp"
	if _, err := os.Stat(tempDir); os.IsNotExist(err) {
		os.Mkdir(tempDir, 0755)
	}

	// –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
	filePath := filepath.Join(tempDir, fileName)

	// –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ GetToken() –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–ª—é
	token := h.bot.GetToken()
	url := fmt.Sprintf("https://api.telegram.org/file/bot%s/%s", token, file.FilePath)

	resp, err := http.Get(url)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: %v", err)
	}
	defer resp.Body.Close()

	out, err := os.Create(filePath)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞: %v", err)
	}
	defer out.Close()

	_, err = io.Copy(out, resp.Body)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: %v", err)
	}

	return filePath, nil
}

// –ò–º–ø–æ—Ä—Ç –≤—Ä–∞—á–µ–π (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
func (h *MainHandler) importVeterinarians(filePath string, fileName string) (string, error) {
	InfoLog.Printf("–ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç –≤—Ä–∞—á–µ–π –∏–∑ —Ñ–∞–π–ª–∞: %s", fileName)

	var vets []models.Veterinarian
	var err error

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –∏ –ø–∞—Ä—Å–∏–º
	if strings.HasSuffix(strings.ToLower(fileName), ".csv") {
		InfoLog.Printf("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º CSV —Ñ–∞–π–ª: %s", filePath)
		vets, err = h.parseVeterinariansCSV(filePath)
	} else if strings.HasSuffix(strings.ToLower(fileName), ".xlsx") {
		InfoLog.Printf("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Excel —Ñ–∞–π–ª: %s", filePath)
		vets, err = h.parseVeterinariansXLSX(filePath)
	} else {
		return "", fmt.Errorf("–Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ CSV –∏–ª–∏ XLSX")
	}

	if err != nil {
		ErrorLog.Printf("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–∞–π–ª–∞ %s: %v", fileName, err)
		return "", err
	}

	if len(vets) == 0 {
		InfoLog.Printf("–í —Ñ–∞–π–ª–µ %s –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞", fileName)
		return "‚ö†Ô∏è –í —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –∏ –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö.", nil
	}

	InfoLog.Printf("–ù–∞–π–¥–µ–Ω–æ %d –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–æ–≤ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞", len(vets))

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
	successCount := 0
	for i, vet := range vets {
		InfoLog.Printf("–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–∞ %d/%d: %s %s", i+1, len(vets), vet.FirstName, vet.LastName)

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–∞—á–µ
		err := h.db.CreateVeterinarian(&vet)
		if err != nil {
			ErrorLog.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–∞—á–∞ %s %s: %v", vet.FirstName, vet.LastName, err)
			continue
		}

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
		for _, spec := range vet.Specializations {
			err := h.db.AddVeterinarianSpecialization(models.GetVetIDAsIntOrZero(&vet), spec.ID)
			if err != nil {
				InfoLog.Printf("Processing vet ID: %d", models.GetVetIDAsIntOrZero(&vet))
			}
		}

		successCount++
		InfoLog.Printf("Processing vet ID: %d", models.GetVetIDAsIntOrZero(&vet))
	}

	result := fmt.Sprintf("‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: %d\n–£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: %d\n–û—à–∏–±–æ–∫: %d",
		len(vets), successCount, len(vets)-successCount)

	InfoLog.Printf("–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–º–ø–æ—Ä—Ç–∞: %s", result)
	return result, nil
}

// –ü–∞—Ä—Å–∏–Ω–≥ CSV —Ñ–∞–π–ª–∞ —Å –≤—Ä–∞—á–∞–º–∏ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
func (h *MainHandler) parseVeterinariansCSV(filePath string) ([]models.Veterinarian, error) {
	file, err := os.Open(filePath)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞: %v", err)
	}
	defer file.Close()

	// –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
	separators := []rune{'\t', ';', ',', '|'}
	var records [][]string
	var parseError error

	for _, separator := range separators {
		file.Seek(0, 0) // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —á—Ç–µ–Ω–∏—è
		reader := csv.NewReader(file)
		reader.Comma = separator
		reader.FieldsPerRecord = -1 // –†–∞–∑—Ä–µ—à–∞–µ–º —Ä–∞–∑–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ–π
		reader.LazyQuotes = true
		reader.TrimLeadingSpace = true

		records, parseError = reader.ReadAll()
		if parseError == nil && len(records) > 1 {
			InfoLog.Printf("–£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω CSV —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º: %q", string(separator))
			break
		}
	}

	if parseError != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è CSV: %v", parseError)
	}

	if len(records) < 2 {
		return nil, fmt.Errorf("—Ñ–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤")
	}

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –∫–æ–ª–æ–Ω–æ–∫ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º
	headers := records[0]
	columnIndexes := make(map[string]int)
	for i, header := range headers {
		cleanHeader := strings.ToLower(strings.TrimSpace(header))
		columnIndexes[cleanHeader] = i
	}

	InfoLog.Printf("–ó–∞–≥–æ–ª–æ–≤–∫–∏ CSV: %v", headers)
	InfoLog.Printf("–ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫: %d", len(records)-1)

	var vets []models.Veterinarian

	for i, record := range records[1:] {
		// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
		if len(record) == 0 || (len(record) == 1 && strings.TrimSpace(record[0]) == "") {
			InfoLog.Printf("–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É %d", i+2)
			continue
		}

		// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º –∫–æ–ª–æ–Ω–æ–∫
		firstName := h.getColumnValue(record, columnIndexes, []string{"–∏–º—è", "firstname", "name"})
		lastName := h.getColumnValue(record, columnIndexes, []string{"—Ñ–∞–º–∏–ª–∏—è", "lastname", "surname"})
		phone := h.getColumnValue(record, columnIndexes, []string{"—Ç–µ–ª–µ—Ñ–æ–Ω", "phone", "—Ç–µ–ª"})
		email := h.getColumnValue(record, columnIndexes, []string{"email", "–ø–æ—á—Ç–∞"})
		experience := h.getColumnValue(record, columnIndexes, []string{"–æ–ø—ã—Ç", "experience", "–æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã"})
		description := h.getColumnValue(record, columnIndexes, []string{"–æ–ø–∏—Å–∞–Ω–∏–µ", "description"})
		specializations := h.getColumnValue(record, columnIndexes, []string{"—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏", "specializations", "—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è"})
		city := h.getColumnValue(record, columnIndexes, []string{"–≥–æ—Ä–æ–¥", "city"})
		region := h.getColumnValue(record, columnIndexes, []string{"—Ä–µ–≥–∏–æ–Ω", "region"})

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
		if firstName == "" || lastName == "" || phone == "" {
			InfoLog.Printf("–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É %d: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (–ò–º—è: %s, –§–∞–º–∏–ª–∏—è: %s, –¢–µ–ª–µ—Ñ–æ–Ω: %s)",
				i+2, firstName, lastName, phone)
			continue
		}

		// –ü–∞—Ä—Å–∏–º –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã
		var experienceYears sql.NullInt64
		if expStr := strings.TrimSpace(experience); expStr != "" {
			if years, err := extractYearsFromExperience(expStr); err == nil {
				experienceYears = sql.NullInt64{Int64: int64(years), Valid: true}
				InfoLog.Printf("–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –¥–ª—è %s %s: %d –ª–µ—Ç", firstName, lastName, years)
			} else {
				InfoLog.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã '%s' –¥–ª—è %s %s: %v", expStr, firstName, lastName, err)
			}
		}

		vet := models.Veterinarian{
			FirstName:       strings.TrimSpace(firstName),
			LastName:        strings.TrimSpace(lastName),
			Phone:           strings.TrimSpace(phone),
			Email:           sql.NullString{String: strings.TrimSpace(email), Valid: email != ""},
			ExperienceYears: experienceYears,
			Description:     sql.NullString{String: strings.TrimSpace(description), Valid: description != ""},
			IsActive:        true,
			CreatedAt:       time.Now(),
		}

		// –ü–æ–ª—É—á–∞–µ–º CityID –ø–æ –∏–º–µ–Ω–∏ –≥–æ—Ä–æ–¥–∞
		if city != "" {
			cityID, err := h.getOrCreateCityID(strings.TrimSpace(city), strings.TrimSpace(region))
			if err != nil {
				InfoLog.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è CityID –¥–ª—è –≥–æ—Ä–æ–¥–∞ %s: %v", city, err)
			} else {
				vet.CityID = sql.NullInt64{Int64: int64(cityID), Valid: true}
				InfoLog.Printf("–ì–æ—Ä–æ–¥ –¥–ª—è %s %s: %s (ID: %d)", firstName, lastName, city, cityID)
			}
		}

		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
		if specStr := strings.TrimSpace(specializations); specStr != "" {
			specializationsList, err := h.processSpecializations(specStr)
			if err != nil {
				InfoLog.Printf("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π –¥–ª—è %s %s: %v", firstName, lastName, err)
			} else {
				vet.Specializations = specializationsList
				InfoLog.Printf("–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è %s %s: %v", firstName, lastName, specStr)
			}
		}

		vets = append(vets, vet)
		InfoLog.Printf("–î–æ–±–∞–≤–ª–µ–Ω –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä: %s %s, —Ç–µ–ª–µ—Ñ–æ–Ω: %s", firstName, lastName, phone)
	}

	InfoLog.Printf("–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–æ–≤: %d –∏–∑ %d", len(vets), len(records)-1)
	return vets, nil
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏
func (h *MainHandler) getColumnValue(record []string, columnIndexes map[string]int, possibleNames []string) string {
	for _, name := range possibleNames {
		if idx, exists := columnIndexes[name]; exists && idx < len(record) {
			return record[idx]
		}
	}
	return ""
}

// –ü–∞—Ä—Å–∏–Ω–≥ XLSX —Ñ–∞–π–ª–∞ —Å –≤—Ä–∞—á–∞–º–∏ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
func (h *MainHandler) parseVeterinariansXLSX(filePath string) ([]models.Veterinarian, error) {
	f, err := excelize.OpenFile(filePath)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è XLSX —Ñ–∞–π–ª–∞: %v", err)
	}
	defer f.Close()

	sheets := f.GetSheetList()
	if len(sheets) == 0 {
		return nil, fmt.Errorf("—Ñ–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏—Å—Ç–æ–≤")
	}

	rows, err := f.GetRows(sheets[0])
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–∏—Å—Ç–∞: %v", err)
	}

	if len(rows) < 2 {
		return nil, fmt.Errorf("—Ñ–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö")
	}

	InfoLog.Printf("–ó–∞–≥–æ–ª–æ–≤–∫–∏ Excel: %v", rows[0])
	InfoLog.Printf("–ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫: %d", len(rows)-1)

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –∫–æ–ª–æ–Ω–æ–∫ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º
	headers := rows[0]
	columnIndexes := make(map[string]int)
	for i, header := range headers {
		cleanHeader := strings.ToLower(strings.TrimSpace(header))
		columnIndexes[cleanHeader] = i
	}

	var vets []models.Veterinarian

	for i, row := range rows[1:] {
		// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
		if len(row) == 0 {
			InfoLog.Printf("–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É %d", i+2)
			continue
		}

		// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º –∫–æ–ª–æ–Ω–æ–∫
		firstName := h.getColumnValue(row, columnIndexes, []string{"–∏–º—è", "firstname", "name"})
		lastName := h.getColumnValue(row, columnIndexes, []string{"—Ñ–∞–º–∏–ª–∏—è", "lastname", "surname"})
		phone := h.getColumnValue(row, columnIndexes, []string{"—Ç–µ–ª–µ—Ñ–æ–Ω", "phone", "—Ç–µ–ª"})
		email := h.getColumnValue(row, columnIndexes, []string{"email", "–ø–æ—á—Ç–∞"})
		experience := h.getColumnValue(row, columnIndexes, []string{"–æ–ø—ã—Ç", "experience", "–æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã"})
		description := h.getColumnValue(row, columnIndexes, []string{"–æ–ø–∏—Å–∞–Ω–∏–µ", "description"})
		specializations := h.getColumnValue(row, columnIndexes, []string{"—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏", "specializations", "—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è"})
		city := h.getColumnValue(row, columnIndexes, []string{"–≥–æ—Ä–æ–¥", "city"})
		region := h.getColumnValue(row, columnIndexes, []string{"—Ä–µ–≥–∏–æ–Ω", "region"})

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
		if firstName == "" || lastName == "" || phone == "" {
			InfoLog.Printf("–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É %d: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (–ò–º—è: %s, –§–∞–º–∏–ª–∏—è: %s, –¢–µ–ª–µ—Ñ–æ–Ω: %s)",
				i+2, firstName, lastName, phone)
			continue
		}

		// –ü–∞—Ä—Å–∏–º –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã
		var experienceYears sql.NullInt64
		if expStr := strings.TrimSpace(experience); expStr != "" {
			if years, err := extractYearsFromExperience(expStr); err == nil {
				experienceYears = sql.NullInt64{Int64: int64(years), Valid: true}
			}
		}

		vet := models.Veterinarian{
			FirstName:       strings.TrimSpace(firstName),
			LastName:        strings.TrimSpace(lastName),
			Phone:           strings.TrimSpace(phone),
			Email:           sql.NullString{String: strings.TrimSpace(email), Valid: email != ""},
			ExperienceYears: experienceYears,
			Description:     sql.NullString{String: strings.TrimSpace(description), Valid: description != ""},
			IsActive:        true,
			CreatedAt:       time.Now(),
		}

		// –ü–æ–ª—É—á–∞–µ–º CityID –ø–æ –∏–º–µ–Ω–∏ –≥–æ—Ä–æ–¥–∞
		if city != "" {
			cityID, err := h.getOrCreateCityID(strings.TrimSpace(city), strings.TrimSpace(region))
			if err != nil {
				InfoLog.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è CityID –¥–ª—è –≥–æ—Ä–æ–¥–∞ %s: %v", city, err)
			} else {
				vet.CityID = sql.NullInt64{Int64: int64(cityID), Valid: true}
			}
		}

		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
		if specStr := strings.TrimSpace(specializations); specStr != "" {
			specializationsList, err := h.processSpecializations(specStr)
			if err != nil {
				InfoLog.Printf("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π –¥–ª—è %s %s: %v", firstName, lastName, err)
			} else {
				vet.Specializations = specializationsList
			}
		}

		vets = append(vets, vet)
		InfoLog.Printf("–î–æ–±–∞–≤–ª–µ–Ω –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä: %s %s, —Ç–µ–ª–µ—Ñ–æ–Ω: %s", firstName, lastName, phone)
	}

	InfoLog.Printf("–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–æ–≤: %d –∏–∑ %d", len(vets), len(rows)-1)
	return vets, nil
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ª–µ—Ç –∏–∑ —Å—Ç—Ä–æ–∫–∏ –æ–ø—ã—Ç–∞
func extractYearsFromExperience(expStr string) (int, error) {
	// –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —á–∏—Å–ª–æ
	re := regexp.MustCompile(`\d+`)
	matches := re.FindStringSubmatch(expStr)
	if len(matches) > 0 {
		return strconv.Atoi(matches[0])
	}
	return 0, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ—Ç –∏–∑: %s", expStr)
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π (—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤)
func (h *MainHandler) processSpecializations(specStr string) ([]*models.Specialization, error) {
	// –†–∞–∑–¥–µ–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ –∑–∞–ø—è—Ç—ã–º, —Ç–æ—á–∫–∞–º —Å –∑–∞–ø—è—Ç–æ–π –∏–ª–∏ –¥—Ä—É–≥–∏–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º
	separators := []string{",", ";", "/", " –∏ "}

	var specs []string
	for _, sep := range separators {
		if strings.Contains(specStr, sep) {
			specs = strings.Split(specStr, sep)
			break
		}
	}

	if len(specs) == 0 {
		specs = []string{specStr}
	}

	var specializations []*models.Specialization

	for _, specName := range specs {
		specName = strings.TrimSpace(specName)
		if specName == "" {
			continue
		}

		// –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
		spec, err := h.getOrCreateSpecialization(specName)
		if err != nil {
			return nil, err
		}
		specializations = append(specializations, spec)
	}

	return specializations, nil
}

// –ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
func (h *MainHandler) getOrCreateSpecialization(name string) (*models.Specialization, error) {
	// –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é
	spec, err := h.db.GetSpecializationByName(name)
	if err == nil && spec != nil {
		return spec, nil
	}

	// –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
	newSpec := &models.Specialization{
		Name:      name,
		CreatedAt: time.Now(),
	}

	err = h.db.CreateSpecialization(newSpec)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ %s: %v", name, err)
	}

	return newSpec, nil
}

// –ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –≥–æ—Ä–æ–¥ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
func (h *MainHandler) getOrCreateCityID(cityName string, region string) (int, error) {
	if cityName == "" {
		return 0, fmt.Errorf("–Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
	}

	// –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≥–æ—Ä–æ–¥
	city, err := h.db.GetCityByName(cityName)
	if err == nil && city != nil {
		return city.ID, nil
	}

	// –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
	newCity := &models.City{
		Name:      cityName,
		Region:    region,
		CreatedAt: time.Now(),
	}

	err = h.db.CreateCity(newCity)
	if err != nil {
		return 0, fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞ %s: %v", cityName, err)
	}

	return newCity.ID, nil
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—à–∏–±–æ–∫
func (h *MainHandler) sendErrorMessage(chatID int64, message string) {
	msg := tgbotapi.NewMessage(chatID, "‚ùå "+message)
	h.bot.Send(msg)
}

// isAdmin –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
func (h *MainHandler) isAdmin(userID int64) bool {
	if h.config == nil || len(h.config.AdminIDs) == 0 {
		InfoLog.Printf("Config or AdminIDs is empty")
		return false
	}

	for _, adminID := range h.config.AdminIDs {
		if userID == adminID {
			InfoLog.Printf("User %d found in admin list", userID)
			return true
		}
	}

	InfoLog.Printf("User %d not found in admin list: %v", userID, h.config.AdminIDs)
	return false
}

// isInAdminMode –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
func (h *MainHandler) isInAdminMode(userID int64) bool {
	// –ó–∞—â–∏—Ç–∞ –æ—Ç nil pointer
	if h.adminHandlers == nil {
		return false
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
	if !h.adminHandlers.IsAdmin(userID) {
		return false
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–µ–Ω –≤ —Ä–µ–∂–∏–º–µ –∞–¥–º–∏–Ω–∞
	state := h.adminHandlers.adminState[userID]
	return state != "" && state != "inactive"
}

// importCities –∏ importClinics - –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–≥–ª—É—à–∫–∏
func (h *MainHandler) importCities(_ string, _ string) (string, error) {
	return "‚úÖ –ò–º–ø–æ—Ä—Ç –≥–æ—Ä–æ–¥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n–§—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞ –≥–æ—Ä–æ–¥–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", nil
}

func (h *MainHandler) importClinics(_ string, _ string) (string, error) {
	return "‚úÖ –ò–º–ø–æ—Ä—Ç –∫–ª–∏–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n–§—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞ –∫–ª–∏–Ω–∏–∫ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", nil
}

// SetUserState —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ StateManager
func (h *MainHandler) SetUserState(userID int64, state string) {
	h.stateManager.SetUserState(userID, state)
}

func (h *MainHandler) handleDebugCommand(update tgbotapi.Update) {
	chatID := update.Message.Chat.ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
	if !h.isAdmin(update.Message.From.ID) {
		msg := tgbotapi.NewMessage(chatID, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
		h.bot.Send(msg)
		return
	}

	// –í—ã–∑—ã–≤–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
	stats, err := h.db.DebugSpecializationVetsCount()
	if err != nil {
		ErrorLog.Printf("Debug error: %v", err)
		msg := tgbotapi.NewMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
		h.bot.Send(msg)
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
	var result strings.Builder
	result.WriteString("üîç *–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤—Ä–∞—á–µ–π –ø–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–º:*\n\n")

	for specID, count := range stats {
		// –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
		spec, err := h.db.GetSpecializationByID(specID)
		specName := "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
		if err == nil && spec != nil {
			specName = spec.Name
		}

		result.WriteString(fmt.Sprintf("‚Ä¢ %s (ID: %d): %d –≤—Ä–∞—á–µ–π\n", specName, specID, count))
	}

	msg := tgbotapi.NewMessage(chatID, result.String())
	msg.ParseMode = "Markdown"
	h.bot.Send(msg)
}
