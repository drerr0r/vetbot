package handlers

import (
	"fmt"
	"log"
	"strconv"
	"strings"

	"github.com/drerr0r/vetbot/pkg/utils"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// MainHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
type MainHandler struct {
	bot           BotAPI   // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
	db            Database // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
	config        *utils.Config
	vetHandlers   *VetHandlers
	adminHandlers *AdminHandlers
}

// NewMainHandler —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä MainHandler
func NewMainHandler(bot BotAPI, db Database, config *utils.Config) *MainHandler {
	return &MainHandler{
		bot:           bot,
		db:            db,
		config:        config,
		vetHandlers:   NewVetHandlers(bot, db),
		adminHandlers: NewAdminHandlers(bot, db, config),
	}
}

// HandleUpdate –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
func (h *MainHandler) HandleUpdate(update tgbotapi.Update) {
	log.Printf("Received update")

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback queries (–Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline –∫–Ω–æ–ø–∫–∏)
	if update.CallbackQuery != nil {
		log.Printf("Callback query: %s", update.CallbackQuery.Data)
		h.vetHandlers.HandleCallback(update)
		return
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã (—Ñ–∞–π–ª—ã –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞)
	if update.Message != nil && update.Message.Document != nil {
		log.Printf("Document received: %s", update.Message.Document.FileName)
		h.handleDocument(update)
		return
	}

	// –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ª—é–±—ã–µ –Ω–µ-text —Å–æ–æ–±—â–µ–Ω–∏—è
	if update.Message == nil {
		log.Printf("Message is nil")
		return
	}

	if update.Message.Text == "" {
		log.Printf("Text is empty")
		return
	}

	log.Printf("Processing message: %s", update.Message.Text)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
	isAdmin := h.isAdmin(update.Message.From.ID)
	log.Printf("User %d is admin: %t", update.Message.From.ID, isAdmin)

	// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∞–¥–º–∏–Ω—Å–∫–æ–º —Ä–µ–∂–∏–º–µ, –ø–µ—Ä–µ–¥–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–º —Ö–µ–Ω–¥–ª–µ—Ä–∞–º
	if isAdmin && h.isInAdminMode(update.Message.From.ID) {
		log.Printf("Redirecting to admin handlers")
		h.adminHandlers.HandleAdminMessage(update)
		return
	}

	// –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã –ø–æ–∏—Å–∫–∞ (/search_1, /search_2 –∏ —Ç.–¥.)
	if strings.HasPrefix(update.Message.Text, "/search_") {
		log.Printf("Is search command: %s", update.Message.Text)
		h.handleSearchCommand(update)
		return
	}

	// –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ã—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
	if update.Message.IsCommand() {
		log.Printf("Is command: %s", update.Message.Command())
		h.handleCommand(update, isAdmin)
		return
	}

	// –û–±—ã—á–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
	log.Printf("Is text message: %s", update.Message.Text)
	h.handleTextMessage(update)
}

// handleCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
func (h *MainHandler) handleCommand(update tgbotapi.Update, isAdmin bool) {
	command := update.Message.Command()
	log.Printf("Handling command: %s", command)

	switch command {
	case "start":
		log.Printf("Executing /start")
		h.vetHandlers.HandleStart(update)
	case "specializations":
		log.Printf("Executing /specializations")
		h.vetHandlers.HandleSpecializations(update)
	case "search":
		log.Printf("Executing /search")
		h.vetHandlers.HandleSearch(update)
	case "clinics":
		log.Printf("Executing /clinics")
		h.vetHandlers.HandleClinics(update)
	case "cities":
		log.Printf("Executing /cities")
		h.vetHandlers.HandleSearchByCity(update)
	case "help":
		log.Printf("Executing /help")
		h.vetHandlers.HandleHelp(update)
	case "test":
		log.Printf("Executing /test")
		h.vetHandlers.HandleTest(update)
	case "admin":
		if isAdmin {
			log.Printf("Executing /admin")
			h.adminHandlers.HandleAdmin(update)
		} else {
			log.Printf("Admin access denied for user %d", update.Message.From.ID)
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
			h.bot.Send(msg)
		}
	case "stats":
		if isAdmin {
			log.Printf("Executing /stats")
			h.adminHandlers.HandleStats(update)
		}
	default:
		log.Printf("Unknown command: %s", command)
		msg := tgbotapi.NewMessage(update.Message.Chat.ID,
			"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥")
		h.bot.Send(msg)
	}
}

// handleSearchCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –ø–æ–∏—Å–∫–∞ –ø–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (/search_1, /search_2 –∏ —Ç.–¥.)
func (h *MainHandler) handleSearchCommand(update tgbotapi.Update) {
	text := update.Message.Text
	log.Printf("Handling search command: %s", text)

	if strings.HasPrefix(text, "/search_") {
		specIDStr := strings.TrimPrefix(text, "/search_")
		specID, err := strconv.Atoi(specIDStr)
		if err != nil {
			log.Printf("Error parsing specialization ID: %v", err)
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã –ø–æ–∏—Å–∫–∞")
			h.bot.Send(msg)
			return
		}
		log.Printf("Searching for specialization ID: %d", specID)
		h.vetHandlers.HandleSearchBySpecialization(update, specID)
	}
}

// handleTextMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—ã—á–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
func (h *MainHandler) handleTextMessage(update tgbotapi.Update) {
	// –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É
	msg := tgbotapi.NewMessage(update.Message.Chat.ID,
		"–Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")
	h.bot.Send(msg)
}

// handleDocument –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∂–∞–µ–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã (CSV/Excel –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞)
func (h *MainHandler) handleDocument(update tgbotapi.Update) {
	fileName := update.Message.Document.FileName

	log.Printf("Received document: %s", fileName)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
	if !strings.HasSuffix(strings.ToLower(fileName), ".csv") &&
		!strings.HasSuffix(strings.ToLower(fileName), ".xlsx") {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID,
			"‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ CSV –∏ Excel —Ñ–∞–π–ª—ã (.csv, .xlsx)")
		h.bot.Send(msg)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
	if !h.isAdmin(update.Message.From.ID) {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID,
			"‚ùå –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
		h.bot.Send(msg)
		return
	}

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏–º–ø–æ—Ä—Ç–∞ –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
	var importType string
	if strings.Contains(strings.ToLower(fileName), "–≥–æ—Ä–æ–¥") {
		importType = "cities"
	} else if strings.Contains(strings.ToLower(fileName), "–≤—Ä–∞—á") {
		importType = "veterinarians"
	} else if strings.Contains(strings.ToLower(fileName), "–∫–ª–∏–Ω–∏–∫") {
		importType = "clinics"
	} else {
		// –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø, –ø—Ä–æ—Å–∏–º —É—Ç–æ—á–Ω–∏—Ç—å
		msg := tgbotapi.NewMessage(update.Message.Chat.ID,
			"üì• –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω. –£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –∏–º–ø–æ—Ä—Ç–∞:\n\n"+
				"‚Ä¢ –î–ª—è –≥–æ—Ä–æ–¥–æ–≤: —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å '–≥–æ—Ä–æ–¥' –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏\n"+
				"‚Ä¢ –î–ª—è –≤—Ä–∞—á–µ–π: —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å '–≤—Ä–∞—á' –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏\n"+
				"‚Ä¢ –î–ª—è –∫–ª–∏–Ω–∏–∫: —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å '–∫–ª–∏–Ω–∏–∫' –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏")
		h.bot.Send(msg)
		return
	}

	// –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞
	// –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞
	msg := tgbotapi.NewMessage(update.Message.Chat.ID,
		fmt.Sprintf("üì• –§–∞–π–ª '%s' –ø–æ–ª—É—á–µ–Ω –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ %s.\n\n–§—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.", fileName, importType))
	h.bot.Send(msg)
}

// isAdmin –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
func (h *MainHandler) isAdmin(userID int64) bool {
	if h.config == nil || len(h.config.AdminIDs) == 0 {
		log.Printf("Config or AdminIDs is empty")
		return false
	}

	for _, adminID := range h.config.AdminIDs {
		if userID == adminID {
			log.Printf("User %d found in admin list", userID)
			return true
		}
	}

	log.Printf("User %d not found in admin list: %v", userID, h.config.AdminIDs)
	return false
}

// isInAdminMode –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∞–¥–º–∏–Ω—Å–∫–æ–º —Ä–µ–∂–∏–º–µ
func (h *MainHandler) isInAdminMode(userID int64) bool {
	// –ó–∞—â–∏—Ç–∞ –æ—Ç nil —É–∫–∞–∑–∞—Ç–µ–ª—è
	if h.adminHandlers == nil {
		log.Printf("Admin handlers is nil for user %d", userID)
		return false
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω—Å–∫–æ–π —Å–µ—Å—Å–∏–∏
	if state, exists := h.adminHandlers.adminState[userID]; exists {
		return state != ""
	}
	return false
}
