package handlers

import (
	"fmt"
	"sort"
	"strings"

	"github.com/drerr0r/vetbot/internal/models"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// HandleVetDetails –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–∞—á–µ
func (h *VetHandlers) HandleVetDetails(chatID int64, vetID int, messageID int) error {
	InfoLog.Printf("HandleVetDetails called for vet ID: %d", vetID)

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–∞—á–µ
	vet, err := h.db.GetVeterinarianWithDetails(vetID)
	if err != nil {
		ErrorLog.Printf("Error getting vet details: %v", err)
		return fmt.Errorf("failed to get vet details: %v", err)
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
	message := h.formatVeterinarianDetails(vet)

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
	replyMarkup := h.createVetDetailsKeyboard(vetID)

	// –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ
	if messageID != 0 {
		editMsg := tgbotapi.NewEditMessageText(chatID, messageID, message)
		editMsg.ParseMode = "Markdown"
		editMsg.ReplyMarkup = &replyMarkup
		_, err = h.bot.Send(editMsg)
	} else {
		msg := tgbotapi.NewMessage(chatID, message)
		msg.ParseMode = "Markdown"
		msg.ReplyMarkup = replyMarkup
		_, err = h.bot.Send(msg)
	}

	return err
}

// formatVeterinarianDetails —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–∞—á–µ
func (h *VetHandlers) formatVeterinarianDetails(vet *models.Veterinarian) string {
	var message strings.Builder

	message.WriteString("üêæ *–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–∞—á–µ*\n\n")

	// –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
	message.WriteString(fmt.Sprintf("üë®‚Äç‚öïÔ∏è *%s %s*\n", vet.FirstName, vet.LastName))

	// –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç–∑—ã–≤–æ–≤
	stats, err := h.db.GetReviewStats(models.GetVetIDAsIntOrZero(vet))
	if err == nil {
		if stats.ApprovedReviews > 0 {
			message.WriteString(fmt.Sprintf("‚≠ê *–†–µ–π—Ç–∏–Ω–≥:* %.1f/5 (%d –æ—Ç–∑—ã–≤–æ–≤)\n", stats.AverageRating, stats.ApprovedReviews))
		} else {
			message.WriteString("‚≠ê *–†–µ–π—Ç–∏–Ω–≥:* –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤\n")
		}
	}

	if vet.Phone != "" {
		message.WriteString(fmt.Sprintf("üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* `%s`\n", vet.Phone))
	}

	if vet.Email.Valid && vet.Email.String != "" {
		message.WriteString(fmt.Sprintf("üìß *Email:* %s\n", vet.Email.String))
	}

	if vet.ExperienceYears.Valid {
		message.WriteString(fmt.Sprintf("‚è≥ *–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:* %d –ª–µ—Ç\n", vet.ExperienceYears.Int64))
	}

	if vet.Description.Valid && vet.Description.String != "" {
		message.WriteString(fmt.Sprintf("üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* %s\n", vet.Description.String))
	}

	// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–æ—Ä–æ–¥–µ
	if vet.City != nil {
		message.WriteString(fmt.Sprintf("üèôÔ∏è *–ì–æ—Ä–æ–¥:* %s", vet.City.Name))
		if vet.City.Region != "" {
			message.WriteString(fmt.Sprintf(" (%s)", vet.City.Region))
		}
		message.WriteString("\n")
	}

	// –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
	if len(vet.Specializations) > 0 {
		message.WriteString("üéØ *–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:* ")
		specs := make([]string, len(vet.Specializations))
		for i, spec := range vet.Specializations {
			specs[i] = spec.Name
		}
		message.WriteString(strings.Join(specs, ", "))
		message.WriteString("\n")
	}

	// –ö–ª–∏–Ω–∏–∫–∏ –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ß–ê–°–¢–¨
	if len(vet.Schedules) > 0 {
		message.WriteString("\nüè• *–ú–µ—Å—Ç–∞ –ø—Ä–∏–µ–º–∞ –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:*\n")

		// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–ª–∏–Ω–∏–∫–∞–º
		clinicSchedules := make(map[string][]*models.Schedule)
		for _, schedule := range vet.Schedules {
			if schedule.Clinic != nil {
				clinicName := schedule.Clinic.Name
				clinicSchedules[clinicName] = append(clinicSchedules[clinicName], schedule)
			}
		}

		for clinicName, schedules := range clinicSchedules {
			message.WriteString(fmt.Sprintf("\n*%s*\n", clinicName))

			// –ê–¥—Ä–µ—Å –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –∫–ª–∏–Ω–∏–∫–∏
			if len(schedules) > 0 && schedules[0].Clinic != nil {
				clinic := schedules[0].Clinic
				message.WriteString(fmt.Sprintf("üìç *–ê–¥—Ä–µ—Å:* %s\n", clinic.Address))

				// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Ç—Ä–æ –∏ —Ä–∞–π–æ–Ω–µ
				if clinic.MetroStation.Valid && clinic.MetroStation.String != "" {
					message.WriteString(fmt.Sprintf("üöá *–ú–µ—Ç—Ä–æ:* %s\n", clinic.MetroStation.String))
				}
				if clinic.District.Valid && clinic.District.String != "" {
					message.WriteString(fmt.Sprintf("üèòÔ∏è *–†–∞–π–æ–Ω:* %s\n", clinic.District.String))
				}

				if clinic.Phone.Valid && clinic.Phone.String != "" {
					message.WriteString(fmt.Sprintf("üìû *–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–Ω–∏–∫–∏:* %s\n", clinic.Phone.String))
				}

				if clinic.WorkingHours.Valid && clinic.WorkingHours.String != "" {
					message.WriteString(fmt.Sprintf("üïê *–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã:* %s\n", clinic.WorkingHours.String))
				}
			}

			// –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –¥–Ω—è–º
			daysMap := make(map[int][]string)

			// –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è
			for _, schedule := range schedules {
				timeSlot := fmt.Sprintf("%s-%s", schedule.StartTime, schedule.EndTime)

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞ –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è
				found := false
				for _, existingSlot := range daysMap[schedule.DayOfWeek] {
					if existingSlot == timeSlot {
						found = true
						break
					}
				}

				if !found {
					daysMap[schedule.DayOfWeek] = append(daysMap[schedule.DayOfWeek], timeSlot)
				}
			}

			if len(daysMap) > 0 {
				message.WriteString("üìÖ *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–µ–º–∞:*\n")
				var scheduleParts []string

				// –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É
				for day := 1; day <= 7; day++ {
					if timeSlots, exists := daysMap[day]; exists && len(timeSlots) > 0 {
						dayName := getDayName(day)

						// –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
						sort.Strings(timeSlots)

						scheduleParts = append(scheduleParts, fmt.Sprintf("   ‚Ä¢ %s: %s", dayName, strings.Join(timeSlots, ", ")))
					}
				}
				message.WriteString(strings.Join(scheduleParts, "\n"))
			}
			message.WriteString("\n")
		}
	} else {
		message.WriteString("\nüìÖ *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:* –Ω–µ —É–∫–∞–∑–∞–Ω–æ\n")
	}

	return message.String()
}

// createVetDetailsKeyboard —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Ä–∞—á–∞
func (h *VetHandlers) createVetDetailsKeyboard(vetID int) tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìù –û—Ç–∑—ã–≤—ã", fmt.Sprintf("show_reviews_%d", vetID)),
			tgbotapi.NewInlineKeyboardButtonData("üí¨ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", fmt.Sprintf("add_review_%d", vetID)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", fmt.Sprintf("appointment_%d", vetID)),
			tgbotapi.NewInlineKeyboardButtonData("‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", fmt.Sprintf("favorite_%d", vetID)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîç –ü–æ–∏—Å–∫ –≤—Ä–∞—á–µ–π", "main_menu"),
			tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu"),
		),
	)
}
