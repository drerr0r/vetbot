package handlers

import (
	"fmt"
	"html"
	"log"
	"strconv"
	"strings"

	"github.com/drerr0r/vetbot/internal/models"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// VetHandlers —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω–æ–≥–æ –±–æ—Ç–∞
type VetHandlers struct {
	bot BotAPI
	db  Database
}

// NewVetHandlers —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä VetHandlers
func NewVetHandlers(bot BotAPI, db Database) *VetHandlers {
	return &VetHandlers{
		bot: bot,
		db:  db,
	}
}

// HandleStart –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start
func (h *VetHandlers) HandleStart(update tgbotapi.Update) {
	log.Printf("HandleStart called")

	// –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	user := &models.User{
		TelegramID: update.Message.From.ID,
		Username:   update.Message.From.UserName,
		FirstName:  update.Message.From.FirstName,
		LastName:   update.Message.From.LastName,
	}

	err := h.db.CreateUser(user)
	if err != nil {
		log.Printf("Error creating user: %v", err)
	}

	// –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîç –ü–æ–∏—Å–∫ –ø–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–º", "main_specializations"),
			tgbotapi.NewInlineKeyboardButtonData("üïê –ü–æ–∏—Å–∫ –ø–æ –≤—Ä–µ–º–µ–Ω–∏", "main_time"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üè• –ü–æ–∏—Å–∫ –ø–æ –∫–ª–∏–Ω–∏–∫–∞–º", "main_clinics"),
			tgbotapi.NewInlineKeyboardButtonData("üèôÔ∏è –ü–æ–∏—Å–∫ –ø–æ –≥–æ—Ä–æ–¥—É", "main_city"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ÑπÔ∏è –ü–æ–º–æ—â—å", "main_help"),
		),
	)

	msg := tgbotapi.NewMessage(update.Message.Chat.ID,
		`üêæ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VetBot! üêæ

–Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ –ø–æ–∏—Å–∫–µ –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã—Ö –≤—Ä–∞—á–µ–π. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞:`)
	msg.ReplyMarkup = keyboard

	log.Printf("Sending start message with inline keyboard")
	_, err = h.bot.Send(msg)
	if err != nil {
		log.Printf("Error sending start message: %v", err)
	} else {
		log.Printf("Start message sent successfully")
	}
}

// HandleSpecializations –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
func (h *VetHandlers) HandleSpecializations(update tgbotapi.Update) {
	log.Printf("HandleSpecializations called")

	var chatID int64

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º chatID –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ update
	if update.CallbackQuery != nil {
		chatID = update.CallbackQuery.Message.Chat.ID
		// –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" —É –∫–Ω–æ–ø–∫–∏
		callback := tgbotapi.NewCallback(update.CallbackQuery.ID, "")
		h.bot.Send(callback)
	} else if update.Message != nil {
		chatID = update.Message.Chat.ID
	} else {
		log.Printf("Error: both CallbackQuery and Message are nil")
		return
	}

	specializations, err := h.db.GetAllSpecializations()
	if err != nil {
		log.Printf("Error getting specializations: %v", err)
		msg := tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π")
		h.bot.Send(msg)
		return
	}

	log.Printf("Found %d specializations", len(specializations))

	if len(specializations) == 0 {
		msg := tgbotapi.NewMessage(chatID, "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
		h.bot.Send(msg)
		return
	}

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π (–º–∞–∫—Å–∏–º—É–º 3 –≤ —Ä—è–¥—É)
	var keyboardRows [][]tgbotapi.InlineKeyboardButton
	var currentRow []tgbotapi.InlineKeyboardButton

	for i, spec := range specializations {
		btn := tgbotapi.NewInlineKeyboardButtonData(
			spec.Name,
			fmt.Sprintf("search_spec_%d", spec.ID),
		)
		currentRow = append(currentRow, btn)

		// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ä—è–¥ –ø–æ—Å–ª–µ –∫–∞–∂–¥—ã—Ö 3 –∫–Ω–æ–ø–æ–∫ –∏–ª–∏ –≤ –∫–æ–Ω—Ü–µ
		if (i+1)%3 == 0 || i == len(specializations)-1 {
			keyboardRows = append(keyboardRows, currentRow)
			currentRow = []tgbotapi.InlineKeyboardButton{}
		}
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
	backRow := tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "main_menu"),
	)
	keyboardRows = append(keyboardRows, backRow)

	keyboard := tgbotapi.NewInlineKeyboardMarkup(keyboardRows...)

	msg := tgbotapi.NewMessage(chatID,
		"üè• *–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤—Ä–∞—á–∞:*\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –Ω—É–∂–Ω–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Ä–∞—á–µ–π.")
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = keyboard

	log.Printf("Sending specializations menu to chat %d", chatID)
	_, err = h.bot.Send(msg)
	if err != nil {
		log.Printf("Error sending specializations menu: %v", err)
	}
}

// HandleSearch –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø–æ–∏—Å–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
func (h *VetHandlers) HandleSearch(update tgbotapi.Update) {
	log.Printf("HandleSearch called")

	var chatID int64

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º chatID –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ update
	if update.CallbackQuery != nil {
		chatID = update.CallbackQuery.Message.Chat.ID
		callback := tgbotapi.NewCallback(update.CallbackQuery.ID, "")
		h.bot.Send(callback)
	} else if update.Message != nil {
		chatID = update.Message.Chat.ID
	} else {
		log.Printf("Error: both CallbackQuery and Message are nil")
		return
	}

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–Ω—è–º–∏ –Ω–µ–¥–µ–ª–∏ –∏ –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "search_day_1"),
			tgbotapi.NewInlineKeyboardButtonData("–í—Ç–æ—Ä–Ω–∏–∫", "search_day_2"),
			tgbotapi.NewInlineKeyboardButtonData("–°—Ä–µ–¥–∞", "search_day_3"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ß–µ—Ç–≤–µ—Ä–≥", "search_day_4"),
			tgbotapi.NewInlineKeyboardButtonData("–ü—è—Ç–Ω–∏—Ü–∞", "search_day_5"),
			tgbotapi.NewInlineKeyboardButtonData("–°—É–±–±–æ—Ç–∞", "search_day_6"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", "search_day_7"),
			tgbotapi.NewInlineKeyboardButtonData("–õ—é–±–æ–π –¥–µ–Ω—å", "search_day_0"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "main_menu"),
		),
	)

	msg := tgbotapi.NewMessage(chatID,
		"üïê *–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞:*\n\n–Ø –ø–æ–∫–∞–∂—É –≤—Ä–∞—á–µ–π, —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å.")
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = keyboard

	log.Printf("Sending search by time menu to chat %d", chatID)
	_, err := h.bot.Send(msg)
	if err != nil {
		log.Printf("Error sending search menu: %v", err)
	}
}

// HandleClinics –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –∫–ª–∏–Ω–∏–∫
func (h *VetHandlers) HandleClinics(update tgbotapi.Update) {
	log.Printf("HandleClinics called")

	var chatID int64

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º chatID –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ update
	if update.CallbackQuery != nil {
		chatID = update.CallbackQuery.Message.Chat.ID
		callback := tgbotapi.NewCallback(update.CallbackQuery.ID, "")
		h.bot.Send(callback)
	} else if update.Message != nil {
		chatID = update.Message.Chat.ID
	} else {
		log.Printf("Error: both CallbackQuery and Message are nil")
		return
	}

	clinics, err := h.db.GetAllClinics()
	if err != nil {
		log.Printf("Error getting clinics: %v", err)
		msg := tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–ª–∏–Ω–∏–∫")
		h.bot.Send(msg)
		return
	}

	log.Printf("Found %d clinics", len(clinics))

	if len(clinics) == 0 {
		msg := tgbotapi.NewMessage(chatID, "–ö–ª–∏–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
		h.bot.Send(msg)
		return
	}

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–ª–∏–Ω–∏–∫
	var keyboardRows [][]tgbotapi.InlineKeyboardButton
	var currentRow []tgbotapi.InlineKeyboardButton

	for i, clinic := range clinics {
		btn := tgbotapi.NewInlineKeyboardButtonData(
			clinic.Name,
			fmt.Sprintf("search_clinic_%d", clinic.ID),
		)
		currentRow = append(currentRow, btn)

		// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ä—è–¥ –ø–æ—Å–ª–µ –∫–∞–∂–¥—ã—Ö 2 –∫–Ω–æ–ø–æ–∫ –∏–ª–∏ –≤ –∫–æ–Ω—Ü–µ
		if (i+1)%2 == 0 || i == len(clinics)-1 {
			keyboardRows = append(keyboardRows, currentRow)
			currentRow = []tgbotapi.InlineKeyboardButton{}
		}
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
	backRow := tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "main_menu"),
	)
	keyboardRows = append(keyboardRows, backRow)

	keyboard := tgbotapi.NewInlineKeyboardMarkup(keyboardRows...)

	msg := tgbotapi.NewMessage(chatID,
		"üè• *–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–Ω–∏–∫—É:*\n\n–Ø –ø–æ–∫–∞–∂—É –≤—Ä–∞—á–µ–π, —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–ª–∏–Ω–∏–∫–µ.")
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = keyboard

	log.Printf("Sending clinics menu to chat %d", chatID)
	_, err = h.bot.Send(msg)
	if err != nil {
		log.Printf("Error sending clinics menu: %v", err)
	}
}

// HandleSearchByCity –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø–æ–∏—Å–∫–∞ –ø–æ –≥–æ—Ä–æ–¥–∞–º
func (h *VetHandlers) HandleSearchByCity(update tgbotapi.Update) {
	log.Printf("HandleSearchByCity called")

	var chatID int64

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º chatID –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ update
	if update.CallbackQuery != nil {
		chatID = update.CallbackQuery.Message.Chat.ID
		callback := tgbotapi.NewCallback(update.CallbackQuery.ID, "")
		h.bot.Send(callback)
	} else if update.Message != nil {
		chatID = update.Message.Chat.ID
	} else {
		log.Printf("Error: both CallbackQuery and Message are nil")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤
	cities, err := h.db.GetAllCities()
	if err != nil {
		log.Printf("Error getting cities: %v", err)
		msg := tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤")
		h.bot.Send(msg)
		return
	}

	if len(cities) == 0 {
		msg := tgbotapi.NewMessage(chatID, "–ì–æ—Ä–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
		h.bot.Send(msg)
		return
	}

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≥–æ—Ä–æ–¥–æ–≤
	var keyboardRows [][]tgbotapi.InlineKeyboardButton
	var currentRow []tgbotapi.InlineKeyboardButton

	for i, city := range cities {
		btn := tgbotapi.NewInlineKeyboardButtonData(
			fmt.Sprintf("%s (%s)", city.Name, city.Region),
			fmt.Sprintf("search_city_%d", city.ID),
		)
		currentRow = append(currentRow, btn)

		// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ä—è–¥ –ø–æ—Å–ª–µ –∫–∞–∂–¥—ã—Ö 2 –∫–Ω–æ–ø–æ–∫ –∏–ª–∏ –≤ –∫–æ–Ω—Ü–µ
		if (i+1)%2 == 0 || i == len(cities)-1 {
			keyboardRows = append(keyboardRows, currentRow)
			currentRow = []tgbotapi.InlineKeyboardButton{}
		}
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
	backRow := tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "main_menu"),
	)
	keyboardRows = append(keyboardRows, backRow)

	keyboard := tgbotapi.NewInlineKeyboardMarkup(keyboardRows...)

	msg := tgbotapi.NewMessage(chatID,
		"üèôÔ∏è *–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Ä–∞—á–µ–π:*\n\n–Ø –ø–æ–∫–∞–∂—É –≤—Ä–∞—á–µ–π, —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ.")
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = keyboard

	log.Printf("Sending cities menu to chat %d", chatID)
	_, err = h.bot.Send(msg)
	if err != nil {
		log.Printf("Error sending cities menu: %v", err)
	}
}

// HandleHelp –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
func (h *VetHandlers) HandleHelp(update tgbotapi.Update) {
	log.Printf("HandleHelp called")

	var chatID int64

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º chatID –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ update
	if update.CallbackQuery != nil {
		chatID = update.CallbackQuery.Message.Chat.ID
		callback := tgbotapi.NewCallback(update.CallbackQuery.ID, "")
		h.bot.Send(callback)
	} else if update.Message != nil {
		chatID = update.Message.Chat.ID
	} else {
		log.Printf("Error: both CallbackQuery and Message are nil")
		return
	}

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "main_menu"),
		),
	)

	helpText := `üêæ *VetBot - –ü–æ–º–æ—â—å* üêæ

*–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*
‚Ä¢ üîç *–ü–æ–∏—Å–∫ –ø–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–º* - –Ω–∞–π—Ç–∏ –≤—Ä–∞—á–∞ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é
‚Ä¢ üïê *–ü–æ–∏—Å–∫ –ø–æ –≤—Ä–µ–º–µ–Ω–∏* - –Ω–∞–π—Ç–∏ –≤—Ä–∞—á–∞ –ø–æ –¥–Ω—é –Ω–µ–¥–µ–ª–∏
‚Ä¢ üè• *–ü–æ–∏—Å–∫ –ø–æ –∫–ª–∏–Ω–∏–∫–∞–º* - –Ω–∞–π—Ç–∏ –≤—Ä–∞—á–µ–π –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–ª–∏–Ω–∏–∫–µ
‚Ä¢ üèôÔ∏è *–ü–æ–∏—Å–∫ –ø–æ –≥–æ—Ä–æ–¥—É* - –Ω–∞–π—Ç–∏ –≤—Ä–∞—á–µ–π –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ

*–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:*
1. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
2. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É (—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è, –¥–µ–Ω—å, –∫–ª–∏–Ω–∏–∫–∞ –∏–ª–∏ –≥–æ—Ä–æ–¥)
3. –ë–æ—Ç –ø–æ–∫–∞–∂–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Ä–∞—á–µ–π —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º

*–ö–æ–º–∞–Ω–¥—ã:*
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/cities - –ü–æ–∏—Å–∫ –ø–æ –≥–æ—Ä–æ–¥–∞–º
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞`

	msg := tgbotapi.NewMessage(chatID, helpText)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = keyboard

	log.Printf("Sending help message to chat %d", chatID)
	_, err := h.bot.Send(msg)
	if err != nil {
		log.Printf("Error sending help message: %v", err)
	}
}

// HandleSearchBySpecialization –∏—â–µ—Ç –≤—Ä–∞—á–µ–π –ø–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
func (h *VetHandlers) HandleSearchBySpecialization(update tgbotapi.Update, specializationID int) {
	log.Printf("HandleSearchBySpecialization called with ID: %d", specializationID)

	var chatID int64
	var messageID int

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º chatID –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ update
	if update.CallbackQuery != nil {
		chatID = update.CallbackQuery.Message.Chat.ID
		messageID = update.CallbackQuery.Message.MessageID
		// –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" —É –∫–Ω–æ–ø–∫–∏
		callback := tgbotapi.NewCallback(update.CallbackQuery.ID, "")
		h.bot.Send(callback)
	} else if update.Message != nil {
		chatID = update.Message.Chat.ID
	} else {
		log.Printf("Error: both CallbackQuery and Message are nil")
		return
	}

	vets, err := h.db.GetVeterinariansBySpecialization(specializationID)
	if err != nil {
		log.Printf("Error getting veterinarians: %v", err)
		msg := tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤—Ä–∞—á–µ–π")
		h.bot.Send(msg)
		return
	}

	log.Printf("Found %d veterinarians for specialization ID: %d", len(vets), specializationID)

	spec, err := h.db.GetSpecializationByID(specializationID)
	if err != nil {
		log.Printf("Error getting specialization: %v", err)
	}

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ö —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–º", "main_specializations"),
			tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu"),
		),
	)

	if len(vets) == 0 {
		var specName string
		if spec != nil {
			specName = spec.Name
		} else {
			specName = "–≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"
		}

		msg := tgbotapi.NewMessage(chatID,
			fmt.Sprintf("üë®‚Äç‚öïÔ∏è *–í—Ä–∞—á–∏ –ø–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ \"%s\" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã*\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é.", specName))
		msg.ParseMode = "Markdown"
		msg.ReplyMarkup = keyboard
		h.bot.Send(msg)
		return
	}

	// –†–∞–∑–±–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
	messages := h.splitVetsIntoMessagesBySpecialization(vets, spec)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
	if len(messages) > 0 {
		firstMessage := messages[0]

		editMsg := tgbotapi.NewEditMessageText(chatID, messageID, firstMessage)
		editMsg.ParseMode = "Markdown"
		editMsg.ReplyMarkup = &keyboard
		_, err = h.bot.Send(editMsg)

		if err != nil {
			log.Printf("Error editing message: %v", err)
			// –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
			msg := tgbotapi.NewMessage(chatID, firstMessage)
			msg.ParseMode = "Markdown"
			msg.ReplyMarkup = keyboard
			h.bot.Send(msg)
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
		for i := 1; i < len(messages); i++ {
			msg := tgbotapi.NewMessage(chatID, messages[i])
			msg.ParseMode = "Markdown"
			h.bot.Send(msg)
		}
	}
}

// splitVetsIntoMessagesBySpecialization —Ä–∞–∑–±–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Ä–∞—á–µ–π –ø–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π
func (h *VetHandlers) splitVetsIntoMessagesBySpecialization(vets []*models.Veterinarian, spec *models.Specialization) []string {
	var messages []string
	var currentMessage strings.Builder

	// –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
	if spec != nil {
		currentMessage.WriteString(fmt.Sprintf("üë®‚Äç‚öïÔ∏è *–í—Ä–∞—á–∏ –ø–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ \"%s\":*\n\n", html.EscapeString(spec.Name)))
	} else {
		currentMessage.WriteString("üë®‚Äç‚öïÔ∏è *–ù–∞–π–¥–µ–Ω–Ω—ã–µ –≤—Ä–∞—á–∏:*\n\n")
	}

	maxDisplay := 10 // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ 10 –≤—Ä–∞—á–∞–º–∏
	displayCount := min(len(vets), maxDisplay)

	for i := 0; i < displayCount; i++ {
		vet := vets[i]
		vetText := h.formatVeterinarianInfoCompact(vet, i+1)

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç –ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤—Ä–∞—á–∞ –ª–∏–º–∏—Ç
		if currentMessage.Len()+len(vetText) > 3500 { // –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å
			messages = append(messages, currentMessage.String())
			currentMessage.Reset()
			if spec != nil {
				currentMessage.WriteString(fmt.Sprintf("üë®‚Äç‚öïÔ∏è *–í—Ä–∞—á–∏ –ø–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ \"%s\" (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ):*\n\n", html.EscapeString(spec.Name)))
			} else {
				currentMessage.WriteString("üë®‚Äç‚öïÔ∏è *–ù–∞–π–¥–µ–Ω–Ω—ã–µ –≤—Ä–∞—á–∏ (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ):*\n\n")
			}
		}

		currentMessage.WriteString(vetText)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ –≤—Ä–∞—á–∏
	if len(vets) > maxDisplay {
		currentMessage.WriteString(fmt.Sprintf("\nüìÑ *–ü–æ–∫–∞–∑–∞–Ω–æ %d –∏–∑ %d –≤—Ä–∞—á–µ–π*. –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∏—Å–∫ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º.",
			maxDisplay, len(vets)))
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	if currentMessage.Len() > 0 {
		messages = append(messages, currentMessage.String())
	}

	// –ï—Å–ª–∏ –≤—Ä–∞—á–µ–π –±–æ–ª—å—à–µ 10, —Å–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
	if len(vets) > maxDisplay {
		for i := maxDisplay; i < len(vets); i += 10 {
			var continuationBuilder strings.Builder

			if spec != nil {
				continuationBuilder.WriteString(fmt.Sprintf("üë®‚Äç‚öïÔ∏è *–í—Ä–∞—á–∏ –ø–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ \"%s\" (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ %d):*\n\n",
					html.EscapeString(spec.Name), (i/10)+1))
			} else {
				continuationBuilder.WriteString(fmt.Sprintf("üë®‚Äç‚öïÔ∏è *–ù–∞–π–¥–µ–Ω–Ω—ã–µ –≤—Ä–∞—á–∏ (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ %d):*\n\n", (i/10)+1))
			}

			endIndex := min(i+10, len(vets))
			for j := i; j < endIndex; j++ {
				vet := vets[j]
				vetText := h.formatVeterinarianInfoCompact(vet, j+1)
				continuationBuilder.WriteString(vetText)
			}

			messages = append(messages, continuationBuilder.String())
		}
	}

	return messages
}

// formatVeterinarianInfoCompact —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–∞—á–µ –≤ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–º –≤–∏–¥–µ
func (h *VetHandlers) formatVeterinarianInfoCompact(vet *models.Veterinarian, index int) string {
	var sb strings.Builder

	sb.WriteString(fmt.Sprintf("**%d. %s %s**\n", index, html.EscapeString(vet.FirstName), html.EscapeString(vet.LastName)))
	sb.WriteString(fmt.Sprintf("üìû `%s`", html.EscapeString(vet.Phone)))

	if vet.Email.Valid && vet.Email.String != "" {
		sb.WriteString(fmt.Sprintf(" üìß %s", html.EscapeString(vet.Email.String)))
	}

	if vet.ExperienceYears.Valid {
		sb.WriteString(fmt.Sprintf(" üíº %d –ª–µ—Ç", vet.ExperienceYears.Int64))
	}

	// –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Ä–∞—á–∞ (—Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏—è)
	specs, err := h.db.GetSpecializationsByVetID(vet.ID)
	if err == nil && len(specs) > 0 {
		sb.WriteString(" üéØ ")
		specNames := make([]string, len(specs))
		for j, spec := range specs {
			specNames[j] = html.EscapeString(spec.Name)
		}
		sb.WriteString(strings.Join(specNames, ", "))
	}

	sb.WriteString("\n\n")
	return sb.String()
}

// HandleSearchByClinic –∏—â–µ—Ç –≤—Ä–∞—á–µ–π –ø–æ –∫–ª–∏–Ω–∏–∫–µ
func (h *VetHandlers) HandleSearchByClinic(update tgbotapi.Update, clinicID int) {
	log.Printf("HandleSearchByClinic called with ID: %d", clinicID)

	var chatID int64
	var messageID int

	if update.CallbackQuery != nil {
		chatID = update.CallbackQuery.Message.Chat.ID
		messageID = update.CallbackQuery.Message.MessageID
		callback := tgbotapi.NewCallback(update.CallbackQuery.ID, "")
		h.bot.Send(callback)
	} else if update.Message != nil {
		chatID = update.Message.Chat.ID
	} else {
		log.Printf("Error: both CallbackQuery and Message are nil")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –≤—Ä–∞—á–µ–π –∫–ª–∏–Ω–∏–∫–∏ —á–µ—Ä–µ–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
	criteria := &models.SearchCriteria{
		ClinicID: clinicID,
	}
	vets, err := h.db.FindAvailableVets(criteria)
	if err != nil {
		log.Printf("Error finding vets by clinic: %v", err)
		msg := tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤—Ä–∞—á–µ–π")
		h.bot.Send(msg)
		return
	}

	log.Printf("Found %d veterinarians for clinic ID: %d", len(vets), clinicID)

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–Ω–∏–∫–µ
	clinics, err := h.db.GetAllClinics()
	if err != nil {
		log.Printf("Error getting clinics: %v", err)
		msg := tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–Ω–∏–∫–µ")
		h.bot.Send(msg)
		return
	}

	var clinicName string
	for _, c := range clinics {
		if c.ID == clinicID {
			clinicName = c.Name
			break
		}
	}

	// –ï—Å–ª–∏ –∫–ª–∏–Ω–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
	if clinicName == "" {
		clinicName = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–ª–∏–Ω–∏–∫–∞"
	}

	// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ö –∫–ª–∏–Ω–∏–∫–∞–º", "main_clinics"),
			tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu"),
		),
	)

	if len(vets) == 0 {
		msg := tgbotapi.NewMessage(chatID,
			fmt.Sprintf("üè• *–í—Ä–∞—á–∏ –≤ –∫–ª–∏–Ω–∏–∫–µ \"%s\" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã*\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∫–ª–∏–Ω–∏–∫—É.", clinicName))
		msg.ParseMode = "Markdown"
		msg.ReplyMarkup = keyboard
		h.bot.Send(msg)
		return
	}

	var sb strings.Builder
	sb.WriteString(fmt.Sprintf("üè• *–í—Ä–∞—á–∏ –≤ –∫–ª–∏–Ω–∏–∫–µ \"%s\":*\n\n", html.EscapeString(clinicName)))

	for i, vet := range vets {
		sb.WriteString(fmt.Sprintf("**%d. %s %s**\n", i+1, html.EscapeString(vet.FirstName), html.EscapeString(vet.LastName)))
		sb.WriteString(fmt.Sprintf("üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* `%s`\n", html.EscapeString(vet.Phone)))

		if vet.Email.Valid && vet.Email.String != "" {
			sb.WriteString(fmt.Sprintf("üìß *Email:* %s\n", html.EscapeString(vet.Email.String)))
		}

		if vet.ExperienceYears.Valid {
			sb.WriteString(fmt.Sprintf("üíº *–û–ø—ã—Ç:* %d –ª–µ—Ç\n", vet.ExperienceYears.Int64))
		}

		// –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Ä–∞—á–∞
		specs, err := h.db.GetSpecializationsByVetID(vet.ID)
		if err == nil && len(specs) > 0 {
			sb.WriteString("üéØ *–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:* ")
			specNames := make([]string, len(specs))
			for j, spec := range specs {
				specNames[j] = html.EscapeString(spec.Name)
			}
			sb.WriteString(strings.Join(specNames, ", "))
			sb.WriteString("\n")
		}

		sb.WriteString("\n")
	}

	if update.CallbackQuery != nil && messageID != 0 {
		editMsg := tgbotapi.NewEditMessageText(chatID, messageID, sb.String())
		editMsg.ParseMode = "Markdown"
		editMsg.ReplyMarkup = &keyboard
		h.bot.Send(editMsg)
	} else {
		msg := tgbotapi.NewMessage(chatID, sb.String())
		msg.ParseMode = "Markdown"
		msg.ReplyMarkup = keyboard
		h.bot.Send(msg)
	}
}

// HandleCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ inline callback –∑–∞–ø—Ä–æ—Å—ã
func (h *VetHandlers) HandleCallback(update tgbotapi.Update) {
	log.Printf("HandleCallback called")

	callback := update.CallbackQuery
	data := callback.Data

	log.Printf("Callback data: %s", data)

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã callback –¥–∞–Ω–Ω—ã—Ö
	switch {
	case data == "main_menu":
		h.showMainMenu(callback)
	case data == "main_specializations":
		h.HandleSpecializations(update)
	case data == "main_time":
		h.HandleSearch(update)
	case data == "main_clinics":
		h.HandleClinics(update)
	case data == "main_city":
		h.HandleSearchByCity(update)
	case data == "main_help":
		h.HandleHelp(update)
	case strings.HasPrefix(data, "search_spec_"):
		h.handleSearchSpecCallback(callback)
	case strings.HasPrefix(data, "search_day_"):
		h.handleDaySelection(callback)
	case strings.HasPrefix(data, "search_clinic_"):
		h.handleSearchClinicCallback(callback)
	case strings.HasPrefix(data, "search_city_"):
		h.handleSearchCityCallback(callback)
	default:
		// –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback
		callbackConfig := tgbotapi.NewCallback(callback.ID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
		h.bot.Request(callbackConfig)
	}
}

// showMainMenu –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
func (h *VetHandlers) showMainMenu(callback *tgbotapi.CallbackQuery) {
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîç –ü–æ–∏—Å–∫ –ø–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–º", "main_specializations"),
			tgbotapi.NewInlineKeyboardButtonData("üïê –ü–æ–∏—Å–∫ –ø–æ –≤—Ä–µ–º–µ–Ω–∏", "main_time"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üè• –ü–æ–∏—Å–∫ –ø–æ –∫–ª–∏–Ω–∏–∫–∞–º", "main_clinics"),
			tgbotapi.NewInlineKeyboardButtonData("üèôÔ∏è –ü–æ–∏—Å–∫ –ø–æ –≥–æ—Ä–æ–¥—É", "main_city"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ÑπÔ∏è –ü–æ–º–æ—â—å", "main_help"),
		),
	)

	editMsg := tgbotapi.NewEditMessageText(callback.Message.Chat.ID, callback.Message.MessageID,
		`üêæ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VetBot! üêæ

–Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ –ø–æ–∏—Å–∫–µ –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã—Ö –≤—Ä–∞—á–µ–π. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞:`)
	editMsg.ReplyMarkup = &keyboard

	_, err := h.bot.Send(editMsg)
	if err != nil {
		log.Printf("Error editing message to main menu: %v", err)
		// –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		msg := tgbotapi.NewMessage(callback.Message.Chat.ID,
			`üêæ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VetBot! üêæ

–Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ –ø–æ–∏—Å–∫–µ –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã—Ö –≤—Ä–∞—á–µ–π. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞:`)
		msg.ReplyMarkup = keyboard
		h.bot.Send(msg)
	}

	callbackConfig := tgbotapi.NewCallback(callback.ID, "")
	h.bot.Request(callbackConfig)
}

// handleSearchSpecCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –ø–æ–∏—Å–∫–∞ –ø–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
func (h *VetHandlers) handleSearchSpecCallback(callback *tgbotapi.CallbackQuery) {
	specIDStr := strings.TrimPrefix(callback.Data, "search_spec_")
	specID, err := strconv.Atoi(specIDStr)
	if err != nil {
		log.Printf("Error parsing specialization ID: %v", err)
		callbackConfig := tgbotapi.NewCallback(callback.ID, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")
		h.bot.Request(callbackConfig)
		return
	}

	log.Printf("Searching for specialization ID: %d", specID)

	// –°–æ–∑–¥–∞–µ–º update –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ HandleSearchBySpecialization
	update := tgbotapi.Update{
		CallbackQuery: callback,
	}
	h.HandleSearchBySpecialization(update, specID)
}

// handleSearchClinicCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –ø–æ–∏—Å–∫–∞ –ø–æ –∫–ª–∏–Ω–∏–∫–µ
func (h *VetHandlers) handleSearchClinicCallback(callback *tgbotapi.CallbackQuery) {
	clinicIDStr := strings.TrimPrefix(callback.Data, "search_clinic_")
	clinicID, err := strconv.Atoi(clinicIDStr)
	if err != nil {
		log.Printf("Error parsing clinic ID: %v", err)
		callbackConfig := tgbotapi.NewCallback(callback.ID, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")
		h.bot.Request(callbackConfig)
		return
	}

	log.Printf("Searching for clinic ID: %d", clinicID)

	update := tgbotapi.Update{
		CallbackQuery: callback,
	}
	h.HandleSearchByClinic(update, clinicID)
}

// handleSearchCityCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –ø–æ–∏—Å–∫–∞ –ø–æ –≥–æ—Ä–æ–¥—É
func (h *VetHandlers) handleSearchCityCallback(callback *tgbotapi.CallbackQuery) {
	cityIDStr := strings.TrimPrefix(callback.Data, "search_city_")
	cityID, err := strconv.Atoi(cityIDStr)
	if err != nil {
		log.Printf("Error parsing city ID: %v", err)
		callbackConfig := tgbotapi.NewCallback(callback.ID, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")
		h.bot.Request(callbackConfig)
		return
	}

	log.Printf("Searching for city ID: %d", cityID)

	criteria := &models.SearchCriteria{
		CityID: cityID,
	}

	vets, err := h.db.FindVetsByCity(criteria)
	if err != nil {
		log.Printf("Error finding vets by city: %v", err)
		callbackConfig := tgbotapi.NewCallback(callback.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤—Ä–∞—á–µ–π")
		h.bot.Request(callbackConfig)
		return
	}

	log.Printf("Found %d vets for city %d", len(vets), cityID)

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ—Ä–æ–¥–µ
	city, err := h.db.GetCityByID(cityID)
	if err != nil {
		log.Printf("Error getting city: %v", err)
		city = &models.City{Name: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–æ—Ä–æ–¥"}
	}

	// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ö –≥–æ—Ä–æ–¥–∞–º", "main_city"),
			tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu"),
		),
	)

	if len(vets) == 0 {
		msg := tgbotapi.NewMessage(callback.Message.Chat.ID,
			fmt.Sprintf("üèôÔ∏è *–í—Ä–∞—á–∏ –≤ –≥–æ—Ä–æ–¥–µ \"%s\" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã*\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥.", city.Name))
		msg.ParseMode = "Markdown"
		msg.ReplyMarkup = keyboard
		h.bot.Send(msg)
		callbackConfig := tgbotapi.NewCallback(callback.ID, "–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω")
		h.bot.Request(callbackConfig)
		return
	}

	// –†–∞–∑–±–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ
	messages := h.splitVetsIntoMessages(vets, city.Name)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
	if len(messages) > 0 {
		firstMessage := messages[0]
		if len(messages) > 1 {
			firstMessage += fmt.Sprintf("\n\nüìÑ *–ü–æ–∫–∞–∑–∞–Ω–æ %d –∏–∑ %d –≤—Ä–∞—á–µ–π*. –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∏—Å–∫ –ø–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–º.",
				min(10, len(vets)), len(vets))
		}

		editMsg := tgbotapi.NewEditMessageText(callback.Message.Chat.ID, callback.Message.MessageID, firstMessage)
		editMsg.ParseMode = "Markdown"
		editMsg.ReplyMarkup = &keyboard
		_, err = h.bot.Send(editMsg)

		if err != nil {
			log.Printf("Error editing message: %v", err)
			// –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
			msg := tgbotapi.NewMessage(callback.Message.Chat.ID, firstMessage)
			msg.ParseMode = "Markdown"
			msg.ReplyMarkup = keyboard
			h.bot.Send(msg)
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
		for i := 1; i < len(messages); i++ {
			msg := tgbotapi.NewMessage(callback.Message.Chat.ID, messages[i])
			msg.ParseMode = "Markdown"
			h.bot.Send(msg)
		}
	}

	callbackConfig := tgbotapi.NewCallback(callback.ID, "–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω")
	h.bot.Request(callbackConfig)
}

// handleDaySelection –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–Ω—è –¥–ª—è –ø–æ–∏—Å–∫–∞
func (h *VetHandlers) handleDaySelection(callback *tgbotapi.CallbackQuery) {
	log.Printf("handleDaySelection called")

	data := callback.Data
	dayStr := strings.TrimPrefix(data, "search_day_")
	day, err := strconv.Atoi(dayStr)
	if err != nil {
		log.Printf("Error parsing day: %v", err)
		return
	}

	log.Printf("Searching for day: %d", day)

	criteria := &models.SearchCriteria{
		DayOfWeek: day,
	}

	vets, err := h.db.FindAvailableVets(criteria)
	if err != nil {
		log.Printf("Error finding vets: %v", err)
		callbackConfig := tgbotapi.NewCallback(callback.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤—Ä–∞—á–µ–π")
		h.bot.Request(callbackConfig)
		return
	}

	log.Printf("Found %d vets for day %d", len(vets), day)

	// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ö –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏", "main_time"),
			tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu"),
		),
	)

	if len(vets) == 0 {
		dayName := getDayName(day)
		msg := tgbotapi.NewMessage(callback.Message.Chat.ID,
			fmt.Sprintf("üïê *–í—Ä–∞—á–∏, —Ä–∞–±–æ—Ç–∞—é—â–∏–µ –≤ %s, –Ω–µ –Ω–∞–π–¥–µ–Ω—ã*\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –¥–µ–Ω—å.", dayName))
		msg.ParseMode = "Markdown"
		msg.ReplyMarkup = keyboard
		h.bot.Send(msg)
		callbackConfig := tgbotapi.NewCallback(callback.ID, "–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω")
		h.bot.Request(callbackConfig)
		return
	}

	var sb strings.Builder
	dayName := getDayName(day)
	sb.WriteString(fmt.Sprintf("üïê *–í—Ä–∞—á–∏, —Ä–∞–±–æ—Ç–∞—é—â–∏–µ –≤ %s:*\n\n", dayName))

	for i, vet := range vets {
		sb.WriteString(fmt.Sprintf("**%d. %s %s**\n", i+1, html.EscapeString(vet.FirstName), html.EscapeString(vet.LastName)))
		sb.WriteString(fmt.Sprintf("üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* `%s`\n", html.EscapeString(vet.Phone)))

		if vet.Email.Valid && vet.Email.String != "" {
			sb.WriteString(fmt.Sprintf("üìß *Email:* %s\n", html.EscapeString(vet.Email.String)))
		}

		if vet.ExperienceYears.Valid {
			sb.WriteString(fmt.Sprintf("üíº *–û–ø—ã—Ç:* %d –ª–µ—Ç\n", vet.ExperienceYears.Int64))
		}

		// –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–Ω—è
		// –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–Ω—è
		schedules, err := h.db.GetSchedulesByVetID(vet.ID)
		if err == nil {
			for _, schedule := range schedules {
				if schedule.DayOfWeek == day || day == 0 {
					scheduleDayName := getDayName(schedule.DayOfWeek)
					startTime := schedule.StartTime
					endTime := schedule.EndTime
					// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ
					if startTime != "" && endTime != "" && startTime != "00:00" && endTime != "00:00" {
						sb.WriteString(fmt.Sprintf("üïê *%s:* %s-%s", scheduleDayName, startTime, endTime))
						if schedule.Clinic != nil && schedule.Clinic.Name != "" {
							sb.WriteString(fmt.Sprintf(" (%s)", html.EscapeString(schedule.Clinic.Name)))
						}
						sb.WriteString("\n")
					}
				}
			}
		}
		sb.WriteString("\n")
	}

	editMsg := tgbotapi.NewEditMessageText(callback.Message.Chat.ID, callback.Message.MessageID, sb.String())
	editMsg.ParseMode = "Markdown"
	editMsg.ReplyMarkup = &keyboard

	_, err = h.bot.Send(editMsg)
	if err != nil {
		log.Printf("Error sending day search results: %v", err)
		// –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		msg := tgbotapi.NewMessage(callback.Message.Chat.ID, sb.String())
		msg.ParseMode = "Markdown"
		msg.ReplyMarkup = keyboard
		h.bot.Send(msg)
	}

	callbackConfig := tgbotapi.NewCallback(callback.ID, "–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω")
	h.bot.Request(callbackConfig)
}

// HandleTest –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
func (h *VetHandlers) HandleTest(update tgbotapi.Update) {
	log.Printf("HandleTest called")

	msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!")
	_, err := h.bot.Send(msg)
	if err != nil {
		log.Printf("Error sending test message: %v", err)
	} else {
		log.Printf("Test message sent successfully")
	}
}

// getDayName –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
func getDayName(day int) string {
	days := map[int]string{
		1: "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
		2: "–≤—Ç–æ—Ä–Ω–∏–∫",
		3: "—Å—Ä–µ–¥—É",
		4: "—á–µ—Ç–≤–µ—Ä–≥",
		5: "–ø—è—Ç–Ω–∏—Ü—É",
		6: "—Å—É–±–±–æ—Ç—É",
		7: "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
		0: "–ª—é–±–æ–π –¥–µ–Ω—å",
	}
	return days[day]
}

// splitVetsIntoMessages —Ä–∞–∑–±–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Ä–∞—á–µ–π –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π
func (h *VetHandlers) splitVetsIntoMessages(vets []*models.Veterinarian, cityName string) []string {
	var messages []string
	var currentMessage strings.Builder

	// –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
	currentMessage.WriteString(fmt.Sprintf("üèôÔ∏è *–í—Ä–∞—á–∏ –≤ –≥–æ—Ä–æ–¥–µ \"%s\":*\n\n", cityName))

	for i, vet := range vets {
		vetText := h.formatVeterinarianInfo(vet, i+1)

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç –ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤—Ä–∞—á–∞ –ª–∏–º–∏—Ç
		if currentMessage.Len()+len(vetText) > 3500 { // –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å
			messages = append(messages, currentMessage.String())
			currentMessage.Reset()
			currentMessage.WriteString(fmt.Sprintf("üèôÔ∏è *–í—Ä–∞—á–∏ –≤ –≥–æ—Ä–æ–¥–µ \"%s\" (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ):*\n\n", cityName))
		}

		currentMessage.WriteString(vetText)

		// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ 10 –≤—Ä–∞—á–∞–º–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ UX
		if i == 9 && len(vets) > 10 {
			currentMessage.WriteString(fmt.Sprintf("\nüìÑ ... –∏ –µ—â–µ %d –≤—Ä–∞—á–µ–π. –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∏—Å–∫ –ø–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–º.", len(vets)-10))
			break
		}
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	if currentMessage.Len() > 0 {
		messages = append(messages, currentMessage.String())
	}

	return messages
}

// formatVeterinarianInfo —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–∞—á–µ
func (h *VetHandlers) formatVeterinarianInfo(vet *models.Veterinarian, index int) string {
	var sb strings.Builder

	sb.WriteString(fmt.Sprintf("**%d. %s %s**\n", index, html.EscapeString(vet.FirstName), html.EscapeString(vet.LastName)))
	sb.WriteString(fmt.Sprintf("üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* `%s`\n", html.EscapeString(vet.Phone)))

	if vet.Email.Valid && vet.Email.String != "" {
		sb.WriteString(fmt.Sprintf("üìß *Email:* %s\n", html.EscapeString(vet.Email.String)))
	}

	if vet.ExperienceYears.Valid {
		sb.WriteString(fmt.Sprintf("üíº *–û–ø—ã—Ç:* %d –ª–µ—Ç\n", vet.ExperienceYears.Int64))
	}

	// –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Ä–∞—á–∞
	specs, err := h.db.GetSpecializationsByVetID(vet.ID)
	if err == nil && len(specs) > 0 {
		sb.WriteString("üéØ *–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:* ")
		specNames := make([]string, len(specs))
		for j, spec := range specs {
			specNames[j] = html.EscapeString(spec.Name)
		}
		sb.WriteString(strings.Join(specNames, ", "))
		sb.WriteString("\n")
	}

	// –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Ä–∞—á–∞ (—Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–Ω–∏)
	schedules, err := h.db.GetSchedulesByVetID(vet.ID)
	if err == nil && len(schedules) > 0 {
		sb.WriteString("üïê *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:* ")
		scheduleDays := make([]string, 0)

		// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –¥–Ω—è–º
		daySchedules := make(map[int][]string)
		for _, schedule := range schedules {
			if schedule.StartTime != "" && schedule.EndTime != "" &&
				schedule.StartTime != "00:00" && schedule.EndTime != "00:00" {

				clinicName := ""
				if schedule.Clinic != nil && schedule.Clinic.Name != "" {
					clinicName = fmt.Sprintf(" (%s)", html.EscapeString(schedule.Clinic.Name))
				}

				scheduleInfo := fmt.Sprintf("%s-%s%s",
					schedule.StartTime, schedule.EndTime, clinicName)

				daySchedules[schedule.DayOfWeek] = append(daySchedules[schedule.DayOfWeek], scheduleInfo)
			}
		}

		// –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
		for day := 1; day <= 7; day++ {
			if times, exists := daySchedules[day]; exists && len(times) > 0 {
				dayName := getDayName(day)
				scheduleDays = append(scheduleDays, fmt.Sprintf("%s %s", dayName, strings.Join(times, ", ")))
			}
		}

		if len(scheduleDays) > 0 {
			sb.WriteString(strings.Join(scheduleDays, "; "))
		} else {
			sb.WriteString("–Ω–µ —É–∫–∞–∑–∞–Ω–æ")
		}
		sb.WriteString("\n")
	}

	sb.WriteString("\n")
	return sb.String()
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –º–∏–Ω–∏–º—É–º–∞
func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}
