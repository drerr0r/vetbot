package handlers

import (
	"fmt"
	"log"
	"strconv"
	"strings"

	"github.com/drerr0r/vetbot/internal/database"
	"github.com/drerr0r/vetbot/internal/models"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// VetHandlers —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω–æ–≥–æ –±–æ—Ç–∞
type VetHandlers struct {
	bot *tgbotapi.BotAPI
	db  *database.Database
}

// NewVetHandlers —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä VetHandlers
func NewVetHandlers(bot *tgbotapi.BotAPI, db *database.Database) *VetHandlers {
	return &VetHandlers{
		bot: bot,
		db:  db,
	}
}

// HandleStart –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start
func (h *VetHandlers) HandleStart(update tgbotapi.Update) {
	// –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	user := &models.User{
		TelegramID: update.Message.From.ID,
		Username:   update.Message.From.UserName,
		FirstName:  update.Message.From.FirstName,
		LastName:   update.Message.From.LastName,
	}

	err := h.db.CreateUser(user)
	if err != nil {
		log.Printf("Error creating user: %v", err)
	}

	msg := tgbotapi.NewMessage(update.Message.Chat.ID,
		`üêæ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VetBot! üêæ

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω–æ–≥–æ –≤—Ä–∞—á–∞ –ø–æ –Ω—É–∂–Ω–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/specializations - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Ä–∞—á–µ–π
/search - –ø–æ–∏—Å–∫ –≤—Ä–∞—á–∞
/clinics - —Å–ø–∏—Å–æ–∫ –∫–ª–∏–Ω–∏–∫
/help - –ø–æ–º–æ—â—å`)

	h.bot.Send(msg)
}

// HandleSpecializations –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π
func (h *VetHandlers) HandleSpecializations(update tgbotapi.Update) {
	specializations, err := h.db.GetAllSpecializations()
	if err != nil {
		log.Printf("Error getting specializations: %v", err)
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π")
		h.bot.Send(msg)
		return
	}

	if len(specializations) == 0 {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
		h.bot.Send(msg)
		return
	}

	var sb strings.Builder
	sb.WriteString("üè• *–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:*\n\n")

	for _, spec := range specializations {
		sb.WriteString(fmt.Sprintf("‚Ä¢ *%s*", spec.Name))
		if spec.Description != "" {
			sb.WriteString(fmt.Sprintf(" - %s", spec.Description))
		}
		sb.WriteString(fmt.Sprintf(" (/search_%d)\n", spec.ID))
	}

	sb.WriteString("\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Ä–∞—á–µ–π —ç—Ç–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")

	msg := tgbotapi.NewMessage(update.Message.Chat.ID, sb.String())
	msg.ParseMode = "Markdown"
	h.bot.Send(msg)
}

// HandleSearch –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∏—Å–∫–∞ –≤—Ä–∞—á–µ–π
func (h *VetHandlers) HandleSearch(update tgbotapi.Update) {
	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–Ω—è–º–∏ –Ω–µ–¥–µ–ª–∏
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "search_day_1"),
			tgbotapi.NewInlineKeyboardButtonData("–í—Ç–æ—Ä–Ω–∏–∫", "search_day_2"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–°—Ä–µ–¥–∞", "search_day_3"),
			tgbotapi.NewInlineKeyboardButtonData("–ß–µ—Ç–≤–µ—Ä–≥", "search_day_4"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ü—è—Ç–Ω–∏—Ü–∞", "search_day_5"),
			tgbotapi.NewInlineKeyboardButtonData("–°—É–±–±–æ—Ç–∞", "search_day_6"),
			tgbotapi.NewInlineKeyboardButtonData("–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", "search_day_7"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–õ—é–±–æ–π –¥–µ–Ω—å", "search_day_0"),
		),
	)

	msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
	msg.ReplyMarkup = keyboard
	h.bot.Send(msg)
}

// HandleSearchBySpecialization –∏—â–µ—Ç –≤—Ä–∞—á–µ–π –ø–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
func (h *VetHandlers) HandleSearchBySpecialization(update tgbotapi.Update, specializationID int) {
	vets, err := h.db.GetVeterinariansBySpecialization(specializationID)
	if err != nil {
		log.Printf("Error getting veterinarians: %v", err)
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤—Ä–∞—á–µ–π")
		h.bot.Send(msg)
		return
	}

	if len(vets) == 0 {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í—Ä–∞—á–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
		h.bot.Send(msg)
		return
	}

	spec, err := h.db.GetSpecializationByID(specializationID)
	if err != nil {
		log.Printf("Error getting specialization: %v", err)
	}

	var sb strings.Builder
	if spec != nil {
		sb.WriteString(fmt.Sprintf("üë®‚Äç‚öïÔ∏è *–í—Ä–∞—á–∏ –ø–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ \"%s\":*\n\n", spec.Name))
	} else {
		sb.WriteString("üë®‚Äç‚öïÔ∏è *–ù–∞–π–¥–µ–Ω–Ω—ã–µ –≤—Ä–∞—á–∏:*\n\n")
	}

	for i, vet := range vets {
		sb.WriteString(fmt.Sprintf("*%d. %s %s*\n", i+1, vet.FirstName, vet.LastName))
		sb.WriteString(fmt.Sprintf("üìû –¢–µ–ª–µ—Ñ–æ–Ω: `%s`\n", vet.Phone))
		if vet.Email != "" {
			sb.WriteString(fmt.Sprintf("üìß Email: %s\n", vet.Email))
		}
		if vet.ExperienceYears > 0 {
			sb.WriteString(fmt.Sprintf("üíº –û–ø—ã—Ç: %d –ª–µ—Ç\n", vet.ExperienceYears))
		}
		if vet.Description != "" {
			sb.WriteString(fmt.Sprintf("üìù %s\n", vet.Description))
		}

		// –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Ä–∞—á–∞
		schedules, err := h.db.GetSchedulesByVetID(vet.ID)
		if err == nil && len(schedules) > 0 {
			sb.WriteString("üïê –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n")
			for _, schedule := range schedules {
				dayName := getDayName(schedule.DayOfWeek)
				sb.WriteString(fmt.Sprintf("   - %s: %s-%s\n", dayName, schedule.StartTime, schedule.EndTime))
			}
		}

		sb.WriteString("\n")
	}

	msg := tgbotapi.NewMessage(update.Message.Chat.ID, sb.String())
	msg.ParseMode = "Markdown"
	h.bot.Send(msg)
}

// HandleClinics –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–ª–∏–Ω–∏–∫
func (h *VetHandlers) HandleClinics(update tgbotapi.Update) {
	clinics, err := h.db.GetAllClinics()
	if err != nil {
		log.Printf("Error getting clinics: %v", err)
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–ª–∏–Ω–∏–∫")
		h.bot.Send(msg)
		return
	}

	if len(clinics) == 0 {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ö–ª–∏–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
		h.bot.Send(msg)
		return
	}

	var sb strings.Builder
	sb.WriteString("üè¢ *–°–ø–∏—Å–æ–∫ –∫–ª–∏–Ω–∏–∫:*\n\n")

	for i, clinic := range clinics {
		sb.WriteString(fmt.Sprintf("*%d. %s*\n", i+1, clinic.Name))
		sb.WriteString(fmt.Sprintf("üìç –ê–¥—Ä–µ—Å: %s\n", clinic.Address))
		if clinic.Phone != "" {
			sb.WriteString(fmt.Sprintf("üìû –¢–µ–ª–µ—Ñ–æ–Ω: `%s`\n", clinic.Phone))
		}
		if clinic.WorkingHours != "" {
			sb.WriteString(fmt.Sprintf("üïê –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: %s\n", clinic.WorkingHours))
		}
		sb.WriteString("\n")
	}

	msg := tgbotapi.NewMessage(update.Message.Chat.ID, sb.String())
	msg.ParseMode = "Markdown"
	h.bot.Send(msg)
}

// HandleHelp –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É
func (h *VetHandlers) HandleHelp(update tgbotapi.Update) {
	msg := tgbotapi.NewMessage(update.Message.Chat.ID,
		`üêæ *VetBot - –ü–æ–º–æ—â—å* üêæ

*–ö–æ–º–∞–Ω–¥—ã:*
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/specializations - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Ä–∞—á–µ–π
/search - –ü–æ–∏—Å–∫ –≤—Ä–∞—á–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
/clinics - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª–∏–Ω–∏–∫
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

*–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:*
1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /specializations —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
2. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É –ø–æ–∏—Å–∫–∞ —Ä—è–¥–æ–º —Å –Ω—É–∂–Ω–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
3. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /search –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
4. –ë–æ—Ç –ø–æ–∫–∞–∂–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Ä–∞—á–µ–π —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º

*–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:* –¢–µ–ª–µ—Ñ–æ–Ω—ã –≤—Ä–∞—á–µ–π –∏ –∫–ª–∏–Ω–∏–∫ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ, —É–¥–æ–±–Ω–æ–º –¥–ª—è –∑–≤–æ–Ω–∫–∞.`)

	msg.ParseMode = "Markdown"
	h.bot.Send(msg)
}

// HandleCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç inline callback –∑–∞–ø—Ä–æ—Å—ã
func (h *VetHandlers) HandleCallback(update tgbotapi.Update) {
	callback := update.CallbackQuery
	data := callback.Data

	if strings.HasPrefix(data, "search_day_") {
		h.handleDaySelection(callback)
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
	callbackConfig := tgbotapi.NewCallback(callback.ID, "–û–±—Ä–∞–±–æ—Ç–∫–∞...")
	h.bot.Request(callbackConfig)
}

// handleDaySelection –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–Ω—è –¥–ª—è –ø–æ–∏—Å–∫–∞
func (h *VetHandlers) handleDaySelection(callback *tgbotapi.CallbackQuery) {
	data := callback.Data
	dayStr := strings.TrimPrefix(data, "search_day_")
	day, err := strconv.Atoi(dayStr)
	if err != nil {
		log.Printf("Error parsing day: %v", err)
		return
	}

	criteria := &models.SearchCriteria{
		DayOfWeek: day,
	}

	vets, err := h.db.FindAvailableVets(criteria)
	if err != nil {
		log.Printf("Error finding vets: %v", err)
		callbackConfig := tgbotapi.NewCallback(callback.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤—Ä–∞—á–µ–π")
		h.bot.Request(callbackConfig)
		return
	}

	if len(vets) == 0 {
		dayName := getDayName(day)
		msg := tgbotapi.NewMessage(callback.Message.Chat.ID,
			fmt.Sprintf("–í—Ä–∞—á–∏ –Ω–∞ %s –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", dayName))
		h.bot.Send(msg)
		callbackConfig := tgbotapi.NewCallback(callback.ID, "–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω")
		h.bot.Request(callbackConfig)
		return
	}

	var sb strings.Builder
	dayName := getDayName(day)
	sb.WriteString(fmt.Sprintf("üë®‚Äç‚öïÔ∏è *–í—Ä–∞—á–∏, —Ä–∞–±–æ—Ç–∞—é—â–∏–µ –≤ %s:*\n\n", dayName))

	for i, vet := range vets {
		sb.WriteString(fmt.Sprintf("*%d. %s %s*\n", i+1, vet.FirstName, vet.LastName))
		sb.WriteString(fmt.Sprintf("üìû –¢–µ–ª–µ—Ñ–æ–Ω: `%s`\n", vet.Phone))

		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–Ω—è
		schedules, err := h.db.GetSchedulesByVetID(vet.ID)
		if err == nil {
			for _, schedule := range schedules {
				if schedule.DayOfWeek == day || day == 0 {
					scheduleDayName := getDayName(schedule.DayOfWeek)
					sb.WriteString(fmt.Sprintf("üïê %s: %s-%s\n", scheduleDayName, schedule.StartTime, schedule.EndTime))
				}
			}
		}
		sb.WriteString("\n")
	}

	msg := tgbotapi.NewMessage(callback.Message.Chat.ID, sb.String())
	msg.ParseMode = "Markdown"
	h.bot.Send(msg)

	callbackConfig := tgbotapi.NewCallback(callback.ID, "–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω")
	h.bot.Request(callbackConfig)
}

// getDayName –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
func getDayName(day int) string {
	days := map[int]string{
		1: "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
		2: "–≤—Ç–æ—Ä–Ω–∏–∫",
		3: "—Å—Ä–µ–¥—É",
		4: "—á–µ—Ç–≤–µ—Ä–≥",
		5: "–ø—è—Ç–Ω–∏—Ü—É",
		6: "—Å—É–±–±–æ—Ç—É",
		7: "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
		0: "–ª—é–±–æ–π –¥–µ–Ω—å",
	}
	return days[day]
}
