package handlers

import (
	"fmt"
	"strconv"
	"strings"
	"testing"

	"github.com/drerr0r/vetbot/pkg/utils"
	"github.com/stretchr/testify/assert"
)

// ============================================================================
// –¢–ï–°–¢–´ –î–õ–Ø –ö–û–ù–°–¢–†–£–ö–¢–û–†–ê –ò –ë–ê–ó–û–í–û–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò
// ============================================================================

func TestNewAdminHandlers(t *testing.T) {
	// Arrange
	mockBot := NewMockBot()
	mockDB := NewMockDatabase()
	config := &utils.Config{AdminIDs: []int64{12345}}

	// Act
	handler := NewAdminHandlers(mockBot, mockDB, config)

	// Assert
	assert.NotNil(t, handler)
	assert.Equal(t, mockBot, handler.bot)
	assert.Equal(t, mockDB, handler.db)
	assert.Equal(t, config, handler.config)
	assert.NotNil(t, handler.adminState)
	assert.NotNil(t, handler.tempData) // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤–æ–µ –ø–æ–ª–µ
}

func TestAdminHandlersTempData(t *testing.T) {
	// Arrange
	mockBot := NewMockBot()
	mockDB := NewMockDatabase()
	config := &utils.Config{AdminIDs: []int64{12345}}
	handler := NewAdminHandlers(mockBot, mockDB, config)

	// Act & Assert - –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ tempData —Ä–∞–±–æ—Ç–∞–µ—Ç
	handler.tempData["test_key"] = "test_value"
	value, exists := handler.tempData["test_key"]

	assert.True(t, exists)
	assert.Equal(t, "test_value", value)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
	delete(handler.tempData, "test_key")
	_, exists = handler.tempData["test_key"]
	assert.False(t, exists)
}

// ============================================================================
// –¢–ï–°–¢–´ –î–õ–Ø –õ–û–ì–ò–ö–ò –°–û–°–¢–û–Ø–ù–ò–ô –ò –ù–ê–í–ò–ì–ê–¶–ò–ò
// ============================================================================

func TestAdminHandlers_StateManagement(t *testing.T) {
	tests := []struct {
		name          string
		initialState  string
		action        string
		expectedState string
		description   string
	}{
		{
			name:          "Main menu to vet management",
			initialState:  "main_menu",
			action:        "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–∞—á–∞–º–∏",
			expectedState: "vet_management",
			description:   "–î–æ–ª–∂–µ–Ω –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–∞—á–∞–º–∏",
		},
		{
			name:          "Main menu to clinic management",
			initialState:  "main_menu",
			action:        "üè• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–Ω–∏–∫–∞–º–∏",
			expectedState: "clinic_management",
			description:   "–î–æ–ª–∂–µ–Ω –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–Ω–∏–∫–∞–º–∏",
		},
		{
			name:          "Vet management to add vet",
			initialState:  "vet_management",
			action:        "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤—Ä–∞—á–∞",
			expectedState: "add_vet_name",
			description:   "–î–æ–ª–∂–µ–Ω –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∏–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Ä–∞—á–∞–º–∏ –≤ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–∞—á–∞",
		},
		{
			name:          "Vet management to vet list",
			initialState:  "vet_management",
			action:        "üìã –°–ø–∏—Å–æ–∫ –≤—Ä–∞—á–µ–π",
			expectedState: "vet_list",
			description:   "–î–æ–ª–∂–µ–Ω –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∏–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Ä–∞—á–∞–º–∏ –≤ —Å–ø–∏—Å–æ–∫ –≤—Ä–∞—á–µ–π",
		},
		{
			name:          "Back from vet management to main menu",
			initialState:  "vet_management",
			action:        "üîô –ù–∞–∑–∞–¥",
			expectedState: "main_menu",
			description:   "–î–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –∏–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Ä–∞—á–∞–º–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			// Arrange
			var currentState string

			// –ò–º–∏—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏–∑ AdminHandlers
			currentState = tt.initialState

			switch tt.action {
			case "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–∞—á–∞–º–∏":
				if currentState == "main_menu" {
					currentState = "vet_management"
				}
			case "üè• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–Ω–∏–∫–∞–º–∏":
				if currentState == "main_menu" {
					currentState = "clinic_management"
				}
			case "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤—Ä–∞—á–∞":
				if currentState == "vet_management" {
					currentState = "add_vet_name"
				}
			case "üìã –°–ø–∏—Å–æ–∫ –≤—Ä–∞—á–µ–π":
				if currentState == "vet_management" {
					currentState = "vet_list"
				}
			case "üîô –ù–∞–∑–∞–¥":
				switch currentState {
				case "vet_management", "clinic_management":
					currentState = "main_menu"
				case "vet_list", "vet_edit_menu":
					currentState = "vet_management"
				case "clinic_list", "clinic_edit_menu":
					currentState = "clinic_management"
				default:
					currentState = "main_menu"
				}
			}

			// Assert
			assert.Equal(t, tt.expectedState, currentState, tt.description)
		})
	}
}

// ============================================================================
// –¢–ï–°–¢–´ –î–õ–Ø –í–ê–õ–ò–î–ê–¶–ò–ò –î–ê–ù–ù–´–•
// ============================================================================

func TestAdminHandlers_ValidationLogic(t *testing.T) {
	tests := []struct {
		name          string
		input         string
		expectedValid bool
		testType      string
	}{
		{
			name:          "Valid specialization IDs",
			input:         "1,2,3",
			expectedValid: true,
			testType:      "specializations",
		},
		{
			name:          "Valid single specialization ID",
			input:         "5",
			expectedValid: true,
			testType:      "specializations",
		},
		{
			name:          "Empty specialization IDs",
			input:         "",
			expectedValid: true,
			testType:      "specializations",
		},
		{
			name:          "Invalid specialization IDs with letters",
			input:         "1,a,3",
			expectedValid: false,
			testType:      "specializations",
		},
		{
			name:          "Invalid specialization IDs with special chars",
			input:         "1,2,3!",
			expectedValid: false,
			testType:      "specializations",
		},
		{
			name:          "Valid vet name",
			input:         "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤",
			expectedValid: true,
			testType:      "name",
		},
		{
			name:          "Empty vet name",
			input:         "",
			expectedValid: false,
			testType:      "name",
		},
		{
			name:          "Valid phone number",
			input:         "+79123456789",
			expectedValid: true,
			testType:      "phone",
		},
		{
			name:          "Empty phone number",
			input:         "",
			expectedValid: false,
			testType:      "phone",
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			// Arrange
			var isValid bool

			// –ò–º–∏—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–∑ AdminHandlers
			switch tt.testType {
			case "specializations":
				if tt.input == "" {
					isValid = true // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–æ–ø—É—Å—Ç–∏–º–∞
				} else {
					// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã - —á–∏—Å–ª–∞
					ids := strings.Split(tt.input, ",")
					isValid = true
					for _, idStr := range ids {
						_, err := strconv.Atoi(strings.TrimSpace(idStr))
						if err != nil {
							isValid = false
							break
						}
					}
				}
			case "name":
				isValid = strings.TrimSpace(tt.input) != ""
			case "phone":
				isValid = strings.TrimSpace(tt.input) != ""
			}

			// Assert
			assert.Equal(t, tt.expectedValid, isValid, "–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è '%s' –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å %v", tt.input, tt.expectedValid)
		})
	}
}

// ============================================================================
// –¢–ï–°–¢–´ –î–õ–Ø –û–ë–†–ê–ë–û–¢–ö–ò –ö–û–ú–ê–ù–î –ê–î–ú–ò–ù–ö–ò
// ============================================================================

func TestAdminHandlers_CommandProcessing(t *testing.T) {
	tests := []struct {
		name           string
		state          string
		userInput      string
		expectedAction string
	}{
		{
			name:           "Main menu - vet management",
			state:          "main_menu",
			userInput:      "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–∞—á–∞–º–∏",
			expectedAction: "show_vet_management",
		},
		{
			name:           "Main menu - clinic management",
			state:          "main_menu",
			userInput:      "üè• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–Ω–∏–∫–∞–º–∏",
			expectedAction: "show_clinic_management",
		},
		{
			name:           "Main menu - statistics",
			state:          "main_menu",
			userInput:      "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
			expectedAction: "show_stats",
		},
		{
			name:           "Main menu - exit admin",
			state:          "main_menu",
			userInput:      "‚ùå –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏",
			expectedAction: "close_admin",
		},
		{
			name:           "Vet management - add vet",
			state:          "vet_management",
			userInput:      "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤—Ä–∞—á–∞",
			expectedAction: "start_add_vet",
		},
		{
			name:           "Vet management - list vets",
			state:          "vet_management",
			userInput:      "üìã –°–ø–∏—Å–æ–∫ –≤—Ä–∞—á–µ–π",
			expectedAction: "show_vet_list",
		},
		{
			name:           "Unknown command in main menu",
			state:          "main_menu",
			userInput:      "unknown command",
			expectedAction: "show_help",
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			// Arrange
			var action string

			// –ò–º–∏—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –∏–∑ handleMainMenu –∏ handleVetManagement
			switch tt.state {
			case "main_menu":
				switch tt.userInput {
				case "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–∞—á–∞–º–∏":
					action = "show_vet_management"
				case "üè• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–Ω–∏–∫–∞–º–∏":
					action = "show_clinic_management"
				case "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
					action = "show_stats"
				case "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
					action = "show_settings"
				case "‚ùå –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏":
					action = "close_admin"
				default:
					action = "show_help"
				}
			case "vet_management":
				switch tt.userInput {
				case "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤—Ä–∞—á–∞":
					action = "start_add_vet"
				case "üìã –°–ø–∏—Å–æ–∫ –≤—Ä–∞—á–µ–π":
					action = "show_vet_list"
				case "üîô –ù–∞–∑–∞–¥":
					action = "go_back"
				default:
					action = "show_help"
				}
			}

			// Assert
			assert.Equal(t, tt.expectedAction, action, "–î–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è '%s' –∏ –≤–≤–æ–¥–∞ '%s' –¥–æ–ª–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –¥–µ–π—Å—Ç–≤–∏–µ '%s'",
				tt.state, tt.userInput, tt.expectedAction)
		})
	}
}

// ============================================================================
// –¢–ï–°–¢–´ –î–õ–Ø –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø –°–û–û–ë–©–ï–ù–ò–ô
// ============================================================================

func TestAdminHandlers_MessageFormatting(t *testing.T) {
	tests := []struct {
		name        string
		messageType string
		data        map[string]interface{}
		checks      []func(string) bool
	}{
		{
			name:        "Admin panel message",
			messageType: "admin_panel",
			data:        map[string]interface{}{},
			checks: []func(string) bool{
				func(s string) bool { return strings.Contains(s, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å") },
				func(s string) bool {
					return strings.Contains(s, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
				},
			},
		},
		{
			name:        "Vet management message",
			messageType: "vet_management",
			data: map[string]interface{}{
				"active_vets": 5,
				"total_vets":  10,
			},
			checks: []func(string) bool{
				func(s string) bool { return strings.Contains(s, "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–∞—á–∞–º–∏") },
				func(s string) bool { return strings.Contains(s, "–ê–∫—Ç–∏–≤–Ω—ã—Ö –≤—Ä–∞—á–µ–π: 5/10") },
				func(s string) bool { return strings.Contains(s, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ") },
			},
		},
		{
			name:        "Statistics message",
			messageType: "stats",
			data: map[string]interface{}{
				"user_count":     100,
				"active_vets":    15,
				"total_vets":     20,
				"active_clinics": 8,
				"total_clinics":  10,
				"request_count":  500,
			},
			checks: []func(string) bool{
				func(s string) bool { return strings.Contains(s, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞") },
				func(s string) bool { return strings.Contains(s, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: 100") },
				func(s string) bool { return strings.Contains(s, "–í—Ä–∞—á–µ–π: 15/20") },
				func(s string) bool { return strings.Contains(s, "–ö–ª–∏–Ω–∏–∫: 8/10") },
				func(s string) bool { return strings.Contains(s, "–ó–∞–ø—Ä–æ—Å–æ–≤: 500") },
				func(s string) bool { return strings.Contains(s, "‚úÖ") },
			},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			// Arrange
			var message string

			// –ò–º–∏—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ AdminHandlers
			switch tt.messageType {
			case "admin_panel":
				message = `üîß *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å*

–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:`
			case "vet_management":
				activeVets := tt.data["active_vets"].(int)
				totalVets := tt.data["total_vets"].(int)
				message = fmt.Sprintf(`üë• *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–∞—á–∞–º–∏*

–ê–∫—Ç–∏–≤–Ω—ã—Ö –≤—Ä–∞—á–µ–π: %d/%d

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`, activeVets, totalVets)
			case "stats":
				userCount := tt.data["user_count"].(int)
				activeVets := tt.data["active_vets"].(int)
				totalVets := tt.data["total_vets"].(int)
				activeClinics := tt.data["active_clinics"].(int)
				totalClinics := tt.data["total_clinics"].(int)
				requestCount := tt.data["request_count"].(int)

				message = fmt.Sprintf(`üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞*

üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %d
üë®‚Äç‚öïÔ∏è –í—Ä–∞—á–µ–π: %d/%d –∞–∫—Ç–∏–≤–Ω—ã—Ö
üè• –ö–ª–∏–Ω–∏–∫: %d/%d –∞–∫—Ç–∏–≤–Ω—ã—Ö
üìû –ó–∞–ø—Ä–æ—Å–æ–≤: %d

–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ ‚úÖ`, userCount, activeVets, totalVets, activeClinics, totalClinics, requestCount)
			}

			// Assert - –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —É—Å–ª–æ–≤–∏—è
			for i, check := range tt.checks {
				assert.True(t, check(message), "Check %d failed for message type '%s'. Message: %s", i, tt.messageType, message)
			}
		})
	}
}

// ============================================================================
// –¢–ï–°–¢–´ –î–õ–Ø –õ–û–ì–ò–ö–ò –í–†–ï–ú–ï–ù–ù–´–• –î–ê–ù–ù–´–• (–ë–ï–ó –ü–†–Ø–ú–û–ì–û –î–û–°–¢–£–ü–ê –ö –ü–û–õ–Ø–ú)
// ============================================================================

func TestAdminHandlers_TempDataLogic(t *testing.T) {
	t.Run("Temp data storage simulation", func(t *testing.T) {
		// –í–º–µ—Å—Ç–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—è tempData –Ω–∞–ø—Ä—è–º—É—é, —Ç–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É
		// –∫–æ—Ç–æ—Ä–∞—è –º–æ–≥–ª–∞ –±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å tempData

		// –ò–º–∏—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
		type TempData struct {
			userData map[string]interface{}
		}

		tempData := &TempData{
			userData: make(map[string]interface{}),
		}

		userID := int64(12345)
		userIDStr := strconv.FormatInt(userID, 10)

		// –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
		tempData.userData[userIDStr+"_name"] = "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤"
		tempData.userData[userIDStr+"_phone"] = "+79123456789"

		// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
		name := tempData.userData[userIDStr+"_name"]
		phone := tempData.userData[userIDStr+"_phone"]

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
		assert.Equal(t, "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤", name)
		assert.Equal(t, "+79123456789", phone)

		// –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
		userInfo := fmt.Sprintf("–í—Ä–∞—á: %s, –¢–µ–ª–µ—Ñ–æ–Ω: %s", name, phone)
		assert.Contains(t, userInfo, "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤")
		assert.Contains(t, userInfo, "+79123456789")
	})

	t.Run("Multiple users data isolation simulation", func(t *testing.T) {
		// –ò–º–∏—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∏–∑–æ–ª—è—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
		type UserData struct {
			name  string
			phone string
		}

		usersData := make(map[int64]*UserData)

		user1ID := int64(12345)
		user2ID := int64(67890)

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
		usersData[user1ID] = &UserData{name: "User 1", phone: "+79111111111"}
		usersData[user2ID] = &UserData{name: "User 2", phone: "+79222222222"}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–æ–ª—è—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö
		assert.Equal(t, "User 1", usersData[user1ID].name)
		assert.Equal(t, "User 2", usersData[user2ID].name)
		assert.NotEqual(t, usersData[user1ID].name, usersData[user2ID].name)
		assert.NotEqual(t, usersData[user1ID].phone, usersData[user2ID].phone)
	})
}

// ============================================================================
// –¢–ï–°–¢–´ –î–õ–Ø –û–ë–†–ê–ë–û–¢–ö–ò –°–ü–ï–¶–ò–ê–õ–ò–ó–ê–¶–ò–ô
// ============================================================================

func TestAdminHandlers_SpecializationHandling(t *testing.T) {
	tests := []struct {
		name          string
		input         string
		expectedIDs   []int
		shouldSucceed bool
	}{
		{
			name:          "Single ID",
			input:         "1",
			expectedIDs:   []int{1},
			shouldSucceed: true,
		},
		{
			name:          "Multiple IDs",
			input:         "1,2,3",
			expectedIDs:   []int{1, 2, 3},
			shouldSucceed: true,
		},
		{
			name:          "IDs with spaces",
			input:         "1, 2, 3",
			expectedIDs:   []int{1, 2, 3},
			shouldSucceed: true,
		},
		{
			name:          "Empty string",
			input:         "",
			expectedIDs:   []int{},
			shouldSucceed: true,
		},
		{
			name:          "Invalid format",
			input:         "1,a,3",
			expectedIDs:   nil,
			shouldSucceed: false,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			// Arrange
			var parsedIDs []int
			var parseError error

			// –ò–º–∏—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π
			if tt.input == "" {
				parsedIDs = []int{}
			} else {
				idStrs := strings.Split(tt.input, ",")
				parsedIDs = make([]int, 0, len(idStrs))

				for _, idStr := range idStrs {
					id, err := strconv.Atoi(strings.TrimSpace(idStr))
					if err != nil {
						parseError = err
						break
					}
					parsedIDs = append(parsedIDs, id)
				}
			}

			// Assert
			if tt.shouldSucceed {
				assert.NoError(t, parseError)
				assert.Equal(t, tt.expectedIDs, parsedIDs)
			} else {
				assert.Error(t, parseError)
			}
		})
	}
}

// ============================================================================
// –¢–ï–°–¢–´ –î–õ–Ø –ö–†–ê–ô–ù–ò–• –°–õ–£–ß–ê–ï–í
// ============================================================================

func TestAdminHandlers_EdgeCases(t *testing.T) {
	t.Run("Nil handler components", func(t *testing.T) {
		handler := &AdminHandlers{
			bot:        nil,
			db:         nil,
			adminState: nil,
			tempData:   nil,
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–¥ –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å nil
		assert.Nil(t, handler.bot)
		assert.Nil(t, handler.db)
		assert.Nil(t, handler.adminState)
		assert.Nil(t, handler.tempData)
	})

	t.Run("Empty state handling", func(t *testing.T) {
		handler := &AdminHandlers{
			adminState: make(map[int64]string),
		}

		userID := int64(12345)

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
		state, exists := handler.adminState[userID]
		assert.False(t, exists)
		assert.Equal(t, "", state)

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ
		handler.adminState[userID] = "main_menu"
		newState := handler.adminState[userID]
		assert.Equal(t, "main_menu", newState)

		// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ª–æ–≥–∏–∫–µ
		if newState == "main_menu" {
			assert.True(t, true, "–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å main_menu")
		}
	})

	t.Run("Back button from unknown state", func(t *testing.T) {
		handler := &AdminHandlers{
			adminState: make(map[int64]string),
		}

		userID := int64(12345)
		handler.adminState[userID] = "unknown_state"

		// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
		currentState := handler.adminState[userID]
		var newState string

		switch currentState {
		case "vet_management", "clinic_management":
			newState = "main_menu"
		case "vet_list", "vet_edit_menu":
			newState = "vet_management"
		case "clinic_list", "clinic_edit_menu":
			newState = "clinic_management"
		default:
			newState = "main_menu"
		}

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
		handler.adminState[userID] = newState
		finalState := handler.adminState[userID]

		assert.Equal(t, "main_menu", finalState)
	})

	t.Run("Basic data functionality simulation", func(t *testing.T) {
		// –í–º–µ—Å—Ç–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è tempData –Ω–∞–ø—Ä—è–º—É—é, —Ç–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–æ–≥–∏—á–Ω—É—é –ª–æ–≥–∏–∫—É
		testData := make(map[string]interface{})

		// –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –¥–∞–Ω–Ω—ã–º–∏
		testData["test_key"] = "test_value"
		testData["test_key2"] = "test_value2"

		// –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
		result1 := testData["test_key"]
		result2 := testData["test_key2"]

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
		assert.Equal(t, "test_value", result1)
		assert.Equal(t, "test_value2", result2)
		assert.NotEqual(t, result1, result2)

		// –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ü–∏–∫–ª–µ
		count := 0
		for key, value := range testData {
			assert.Contains(t, []string{"test_key", "test_key2"}, key)
			assert.Contains(t, []string{"test_value", "test_value2"}, value)
			count++
		}
		assert.Equal(t, 2, count)
	})
}

// ============================================================================
// –¢–ï–°–¢–´ –î–õ–Ø –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø –ö–õ–ê–í–ò–ê–¢–£–†
// ============================================================================

func TestAdminHandlers_KeyboardLayouts(t *testing.T) {
	tests := []struct {
		name            string
		keyboardType    string
		expectedButtons []string
	}{
		{
			name:         "Main admin keyboard",
			keyboardType: "main",
			expectedButtons: []string{
				"üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–∞—á–∞–º–∏",
				"üè• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–Ω–∏–∫–∞–º–∏",
				"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
				"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
				"‚ùå –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏",
			},
		},
		{
			name:         "Vet management keyboard",
			keyboardType: "vet_management",
			expectedButtons: []string{
				"‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤—Ä–∞—á–∞",
				"üìã –°–ø–∏—Å–æ–∫ –≤—Ä–∞—á–µ–π",
				"üîô –ù–∞–∑–∞–¥",
			},
		},
		{
			name:         "Clinic management keyboard",
			keyboardType: "clinic_management",
			expectedButtons: []string{
				"‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–Ω–∏–∫—É",
				"üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–Ω–∏–∫",
				"üîô –ù–∞–∑–∞–¥",
			},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			// Arrange
			var buttonTexts []string

			// –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä –∏–∑ AdminHandlers
			switch tt.keyboardType {
			case "main":
				buttonTexts = []string{
					"üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–∞—á–∞–º–∏", "üè• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–Ω–∏–∫–∞–º–∏",
					"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
					"‚ùå –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏",
				}
			case "vet_management":
				buttonTexts = []string{
					"‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤—Ä–∞—á–∞", "üìã –°–ø–∏—Å–æ–∫ –≤—Ä–∞—á–µ–π",
					"üîô –ù–∞–∑–∞–¥",
				}
			case "clinic_management":
				buttonTexts = []string{
					"‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–Ω–∏–∫—É", "üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–Ω–∏–∫",
					"üîô –ù–∞–∑–∞–¥",
				}
			}

			// Assert
			for _, expectedButton := range tt.expectedButtons {
				assert.Contains(t, buttonTexts, expectedButton)
			}
		})
	}
}

// ============================================================================
// –¢–ï–°–¢–´ –î–õ–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò –ò –û–¢–ß–ï–¢–û–í
// ============================================================================

func TestAdminHandlers_StatisticsLogic(t *testing.T) {
	t.Run("Statistics calculation", func(t *testing.T) {
		// –ò–º–∏—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –ø–æ–¥—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
		userCount := 150
		activeVets := 12
		totalVets := 15
		activeClinics := 8
		totalClinics := 10
		requestCount := 750

		// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —Ä–∞—Å—á–µ—Ç–∞—Ö
		activeVetPercentage := float64(activeVets) / float64(totalVets) * 100
		activeClinicPercentage := float64(activeClinics) / float64(totalClinics) * 100
		totalEntities := userCount + totalVets + totalClinics

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–∞—Å—á–µ—Ç–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
		assert.True(t, activeVets <= totalVets, "–ê–∫—Ç–∏–≤–Ω—ã—Ö –≤—Ä–∞—á–µ–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞")
		assert.True(t, activeClinics <= totalClinics, "–ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–Ω–∏–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞")
		assert.True(t, userCount >= 0, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º")
		assert.True(t, requestCount >= 0, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º")
		assert.Greater(t, activeVetPercentage, 0.0)
		assert.Greater(t, activeClinicPercentage, 0.0)
		assert.LessOrEqual(t, activeVetPercentage, 100.0)
		assert.LessOrEqual(t, activeClinicPercentage, 100.0)
		assert.Equal(t, 175, totalEntities) // 150 + 15 + 10 = 175
	})

	t.Run("Statistics formatting", func(t *testing.T) {
		stats := map[string]int{
			"users":    100,
			"vets":     15,
			"clinics":  8,
			"requests": 500,
		}

		// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∫ –≤ AdminHandlers
		message := fmt.Sprintf(`üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞*

üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %d
üë®‚Äç‚öïÔ∏è –í—Ä–∞—á–µ–π: %d
üè• –ö–ª–∏–Ω–∏–∫: %d
üìû –ó–∞–ø—Ä–æ—Å–æ–≤: %d

–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ ‚úÖ`,
			stats["users"], stats["vets"], stats["clinics"], stats["requests"])

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
		assert.Contains(t, message, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞")
		assert.Contains(t, message, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: 100")
		assert.Contains(t, message, "–í—Ä–∞—á–µ–π: 15")
		assert.Contains(t, message, "–ö–ª–∏–Ω–∏–∫: 8")
		assert.Contains(t, message, "–ó–∞–ø—Ä–æ—Å–æ–≤: 500")
		assert.Contains(t, message, "‚úÖ")

		// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–∫–∞—Ö
		totalEntities := stats["users"] + stats["vets"] + stats["clinics"]
		requestPerUser := float64(stats["requests"]) / float64(stats["users"])

		assert.Greater(t, totalEntities, 0)
		assert.Equal(t, 123, totalEntities)  // 100 + 15 + 8 = 123
		assert.Equal(t, 5.0, requestPerUser) // 500 / 100 = 5.0
	})
}
