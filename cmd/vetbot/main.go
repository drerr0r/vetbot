package main

import (
	"database/sql" // –î–û–ë–ê–í–¨–¢–ï –≠–¢–û–¢ –ò–ú–ü–û–†–¢
	"fmt"
	"log"
	"os"
	"os/signal"
	"strings"
	"syscall"

	"github.com/drerr0r/vetbot/internal/database"
	"github.com/drerr0r/vetbot/internal/handlers"
	"github.com/drerr0r/vetbot/pkg/utils"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func main() {
	// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	config, err := utils.LoadConfig()
	if err != nil {
		log.Fatalf("Error loading config: %v", err)
	}

	// –ù–ê–°–¢–†–ê–ò–í–ê–ï–ú –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
	utils.SetupLogging(config.Debug)

	log.Printf("Telegram token loaded: %s...", maskToken(config.TelegramToken))
	log.Printf("Database URL loaded: %s", maskDBPassword(config.DatabaseURL))
	log.Printf("Debug mode: %t", config.Debug)
	log.Printf("Admin IDs: %v", config.AdminIDs)

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ Telegram
	bot, err := tgbotapi.NewBotAPI(config.TelegramToken)
	if err != nil {
		log.Fatalf("Error creating bot: %v", err)
	}

	bot.Debug = config.Debug
	log.Printf("Authorized on account %s", bot.Self.UserName)

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
	db, err := database.New(config.DatabaseURL)
	if err != nil {
		log.Fatalf("Error connecting to database: %v", err)
	}
	defer db.Close()

	// –î–û–ë–ê–í–õ–Ø–ï–ú: –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –ú–ò–ì–†–ê–¶–ò–ô –ü–†–ò –ó–ê–ü–£–°–ö–ï
	log.Println("üöÄ Applying database migrations...")
	if err := applyMigrations(db.GetDB()); err != nil { // –ò—Å–ø–æ–ª—å–∑—É–µ–º GetDB() –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç *sql.DB
		log.Printf("‚ö†Ô∏è Migration warnings: %v", err)
		// –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è resilience
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
	log.Println("Checking and adding missing database columns...")
	err = db.AddMissingColumns()
	if err != nil {
		log.Printf("Warning: could not add missing columns: %v", err)
	} else {
		log.Println("Database columns check completed successfully")
	}

	// –°–æ–∑–¥–∞–µ–º –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è –±–æ—Ç–∞
	botAdapter := handlers.NewTelegramBotAdapter(bot)

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥–∞–ø—Ç–µ—Ä –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è bot
	mainHandler := handlers.NewMainHandler(botAdapter, db, config)

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º long polling
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := bot.GetUpdatesChan(u)

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è graceful shutdown
	sigChan := make(chan os.Signal, 1)
	signal.Notify(sigChan, syscall.SIGINT, syscall.SIGTERM)

	log.Println("Bot started. Press Ctrl+C to stop.")

	// –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
	for {
		select {
		case update := <-updates:
			// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ —Ç–æ–π –∂–µ –≥–æ—Ä—É—Ç–∏–Ω–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
			mainHandler.HandleUpdate(update)
		case <-sigChan:
			log.Println("Shutting down bot gracefully...")
			return
		}
	}
}

// –î–û–ë–ê–í–õ–Ø–ï–ú: –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π - –ø—Ä–∏–Ω–∏–º–∞–µ—Ç *sql.DB –≤–º–µ—Å—Ç–æ *database.Database
func applyMigrations(db *sql.DB) error {
	log.Println("üîÑ Checking for database migrations...")

	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–π –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
	migrationFiles := []string{
		"migrations/001_init.sql",
		"migrations/002_add_reviews.sql",
		// –î–æ–±–∞–≤–ª—è–π—Ç–µ —Å—é–¥–∞ –Ω–æ–≤—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ –º–µ—Ä–µ –∏—Ö —Å–æ–∑–¥–∞–Ω–∏—è
	}

	for _, migrationFile := range migrationFiles {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
		if _, err := os.Stat(migrationFile); os.IsNotExist(err) {
			log.Printf("‚ö†Ô∏è Migration file not found: %s", migrationFile)
			continue
		}

		// –ß–∏—Ç–∞–µ–º SQL –∏–∑ —Ñ–∞–π–ª–∞
		sqlContent, err := os.ReadFile(migrationFile)
		if err != nil {
			return fmt.Errorf("error reading migration %s: %v", migrationFile, err)
		}

		log.Printf("üìù Applying migration: %s", migrationFile)

		// –í—ã–ø–æ–ª–Ω—è–µ–º SQL - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º *sql.DB.Exec
		_, err = db.Exec(string(sqlContent))
		if err != nil {
			// –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ "—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" –¥–ª—è idempotency
			if contains(err.Error(), "already exists") || contains(err.Error(), "duplicate") || contains(err.Error(), "exists") {
				log.Printf("‚ÑπÔ∏è Migration already applied (safe to ignore): %s", migrationFile)
				continue
			}
			return fmt.Errorf("error applying migration %s: %v", migrationFile, err)
		}

		log.Printf("‚úÖ Successfully applied: %s", migrationFile)
	}

	log.Println("üéâ All migrations completed!")
	return nil
}

// –î–û–ë–ê–í–õ–Ø–ï–ú: –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä–æ–∫–∏
func contains(s, substr string) bool {
	return strings.Contains(strings.ToLower(s), strings.ToLower(substr))
}

// maskToken –º–∞—Å–∫–∏—Ä—É–µ—Ç —Ç–æ–∫–µ–Ω –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
func maskToken(token string) string {
	if len(token) <= 10 {
		return "***"
	}
	return token[:10] + "..."
}

// maskDBPassword –º–∞—Å–∫–∏—Ä—É–µ—Ç –ø–∞—Ä–æ–ª—å –≤ URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
func maskDBPassword(dbURL string) string {
	parts := strings.Split(dbURL, "@")
	if len(parts) != 2 {
		return dbURL
	}

	authPart := parts[0]
	if strings.Contains(authPart, ":") {
		authParts := strings.Split(authPart, ":")
		if len(authParts) >= 3 { // postgres://user:password@
			// –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é –ø–∞—Ä–æ–ª—è
			userPass := strings.Split(authParts[2], "@")
			if len(userPass) >= 2 {
				// –ú–∞—Å–∫–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
				return authParts[0] + "://" + authParts[1] + ":***@" + parts[1]
			}
		} else if len(authParts) == 2 && strings.Contains(authParts[0], "//") {
			// –§–æ—Ä–º–∞—Ç user:password@host
			protocolParts := strings.Split(authParts[0], "//")
			if len(protocolParts) == 2 {
				return protocolParts[0] + "//" + protocolParts[1] + ":***@" + parts[1]
			}
		}
	}

	return dbURL
}
